using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows;
using System.Diagnostics;
using System.Runtime.InteropServices;
using Utilities;
using Microsoft.Win32;
using System.IO;
using FormSerialisation;
using System.Net;
using System.Text.RegularExpressions;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.Serialization.Formatters.Binary;
using Taz_trainer.Properties;
using TarExample;
using System.Globalization;
using static DPI_Per_Monitor;
using System.Runtime.InteropServices.ComTypes;
using System.Security.Cryptography.X509Certificates;

using Newtonsoft.Json;
using System.Security.Principal;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.Button;
using System.Runtime.Remoting.Messaging;
using System.Runtime.Versioning;
using System.Threading;

namespace Taz_trainer
{
    public partial class form : System.Windows.Forms.Form
    {
        // dll import (pinvoke.net)
        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr OpenProcess(int processAccess, bool bInheritHandle, int processId);

        [DllImport("kernel32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        static extern bool CloseHandle(IntPtr hObject);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, int nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfBytesRead);

        string gihubUrl = "https://github.com";
        string TazFolderPath = "";
        float maxSpd = 10f;
        float Xcoord = 0f;
        float Ycoord = 0f;
        float Zcoord = 0f;
        float camSpd = 2000f;
        float flyStep = 1000f;

        // Achievements globals
        const int achievementsTotal = 115;
        bool[] achievementsStateTrainer = Enumerable.Repeat<bool>(false, achievementsTotal).ToArray();
        private string[,] Achievements = {
                { "271979", "Taz, With Your Nose So Bright", "Change into a red-nosed reindeer", "zoohub_second" },
                { "271980", "Revenge is Sweet", "Defeat the Catcher in Yosemite Zoo", "zoohub_main" },

                { "271981", "Elephant Abolitionist", "Destroy all 7 wanted posters and complete Zooney Tunes", "safarinew_main" },
                { "271982", "Hidden Treasure of Zooney Tunes", "Collect the golden Yosemite Sam statue in Zooney Tunes", "safarinew_second" },
                { "271983", "The Zooney Tunes Varmint", "On expert daffy-culty, earn the destruction bonus in Zooney Tunes", "safarinew_second" },
                { "271984", "Zooney Tunes' Most Wanted", "On expert daffy-culty, reach the maximum bounty of $10,000 in Zooney Tunes", "safarinew_second" },
                { "271985", "Fine Cuisine of Zooney Tunes", "On expert daffy-culty, eat all 100 sandwiches in Zooney Tunes", "safarinew_second" },
                { "271986", "Taz Rad Devil", "Change into a skater", "safarinew_second" },
                { "271987", "Cage-Free Zooney Tunes", "Defeat all 6 Catchers in Zooney Tunes", "safarinew_second" },
                { "271988", "The Zooney Tunes Assassin", "Defeat all 6 Catchers in Zooney Tunes on Expert Daffy-culty without being caught", "safarinew_second" },
                { "272091", "No Monkeying Around", "Destroy the wanted poster on the cliff van in Zooney Tunes without swinging from monkeys or bouncing on tires", "safarinew_second" },
                
                { "272072", "Safari Speedster", "Complete the Zooney Tunes bonus game", "safariset_second" },
                { "272073", "Zoolander", "Complete the Zooney Tunes bonus game with at least 0:12:0 left on the clock", "safariset_main_star" },

                { "271989", "Prepare for Takeoff", "Destroy all 7 wanted posters and complete Ice Burg", "kingdome_second" },
                { "271990", "Hidden Treasure of Ice Burg", "Collect the golden Yosemite Sam statue in Ice Burg", "kingdome_second" },
                { "271991", "The Ice Burg Varmint", "On expert daffy-culty, earn the destruction bonus in Ice Burg", "kingdome_second" },
                { "271992", "Ice Burg's Most Wanted", "On expert daffy-culty, reach the maximum bounty of $20,000 in Ice Burg", "kingdome_second" },
                { "271993", "Fine Cuisine of Ice Burg", "On expert daffy-culty, eat all 100 sandwiches in Ice Burg", "kingdome_second" },
                { "271994", "Taz Cool as Ice, Baby", "Change into a snowboarder", "kingdome_second" },
                { "271995", "Cage-Free Ice Burg", "Defeat all 6 Catchers in Ice Burg", "kingdome_second" },
                { "271996", "The Ice Burg Assassin", "Defeat all 6 Catchers in Ice Burg on Expert Daffy-culty without being caught", "kingdome_second" },

                { "272074", "Blistering Blitzer", "Complete the Ice Burg bonus game", "kingdomenight_second" },
                { "272075", "Taz Only Involved in Quality Work", "Complete the Ice Burg bonus game with at least 0:20:0 left on the clock", "kingdomenight_second_star" },

                { "271997", "Radical Raft", "Destroy all 7 wanted posters and complete Looney Lagoon", "aqua_main" },
                { "271998", "Hidden Treasure of Looney Lagoon", "Collect the golden Yosemite Sam statue in Looney Lagoon", "aqua_second" },
                { "271999", "The Looney Lagoon Varmint", "On expert daffy-culty, earn the destruction bonus in Looney Lagoon", "aqua_second" },
                { "272000", "Looney Lagoon's Most Wanted", "On expert daffy-culty, reach the maximum bounty of $30,000 in Looney Lagoon", "aqua_second" },
                { "272001", "Fine Cuisine of Looney Lagoon", "On expert daffy-culty, eat all 100 sandwiches in Looney Lagoon", "aqua_second" },
                { "272002", "Hang Ten, Duuude", "Change into a surfer", "aqua_second" },
                { "272003", "Cage-Free Looney Lagoon", "Defeat all 4 Catchers in Looney Lagoon", "aqua_second" },
                { "272004", "The Looney Lagoon Assassin", "Defeat all 4 Catchers in Looney Lagoon on Expert Daffy-culty without being caught", "aqua_second" },

                { "272076", "Wavy Walloper", "Complete the Looney Lagoon bonus game", "aqua_second" },
                { "272077", "Radical Crate Ravager", "Complete the Looney Lagoon bonus game while destroying at least 100 crates", "aqua_main_star" },

                { "272005", "Gossamer Gobbler", "Defeat Gossamer in Elephant Pong", "zooboss_main_alpha" },
                { "272006", "Pong Professional", "On expert daffy-culty, defeat Gossamer in Elephant Pong without letting him score", "zooboss_main_alpha_star" },

                { "272015", "Glizzy Gladiator", "Destroy all 7 wanted posters and complete Samsonian Museum", "city_main" },
                { "272016", "Hidden Treasure of Samsonian Museum", "Collect the golden Yosemite Sam statue in Samsonian Museum", "city_second" },
                { "272017", "The Samsonian Museum Varmint", "On expert daffy-culty, earn the destruction bonus in Samsonian Museum", "city_second" },
                { "272018", "Samsonian Museum's Most Wanted", "On expert daffy-culty, reach the maximum bounty of $75,000 in Samsonian Museum", "city_second" },
                { "272019", "Fine Cuisine of Samsonian Museum", "On expert daffy-culty, eat all 100 sandwiches in Samsonian Museum", "city_second" },
                { "272020", "Fujibayashi Naga-Taz", "Change into a ninja", "city_second" },
                { "272021", "Cage-Free Samsonian Museum", "Defeat the Catcher in Samsonian Museum", "city_second" },
                { "272022", "The Samsonian Museum Assassin", "Defeat the Catcher in Samsonian Museum on Expert Daffy-culty without being caught", "city_second" },

                { "272082", "Productive Polisher", "Complete the Samsonian Museum bonus game", "city_second_beta" },
                { "272083", "Janitor of the Year", "Complete the Samsonian Museum bonus game in 35s or less", "city_main_beta_star" },

                { "272007", "Department Store Delivery", "Destroy all 7 wanted posters and complete Looningdale's", "city_main" },
                { "272008", "Hidden Treasure of Looningdale's", "Collect the golden Yosemite Sam statue in Looningdale's", "city_second" },
                { "272009", "The Looningdale's Varmint", "On expert daffy-culty, earn the destruction bonus in Looningdale's", "city_second" },
                { "272010", "Looningdale's Most Wanted", "On expert daffy-culty, reach the maximum bounty of $50,000 in Looningdale's", "city_second" },
                { "272011", "Fine Cuisine of Looningdale's", "On expert daffy-culty, eat all 100 sandwiches in Looningdale's", "city_second" },
                { "272012", "Yo, Yo, Yo", "Change into a DJ", "city_second" },
                { "272013", "Cage-Free Looningdale's", "Defeat all 4 Catchers in Looningdale's", "city_second" },
                { "272014", "The Looningdale's Assassin", "Defeat all 4 Catchers in Looningdale's on Expert Daffy-culty without being caught", "city_second" },

                { "272078", "Retail Racer", "Complete the Looningdale's bonus game", "city_second_beta" },
                { "272079", "Shopping Cart Hero", "Complete the Looningdale's bonus game in 45.0s or less", "city_main_beta_star" },

                { "272023", "Demolition Detour", "Destroy all 7 wanted posters and complete Bank of Samerica", "city_main" },
                { "272024", "Hidden Treasure of Bank of Samerica", "Collect the golden Yosemite Sam statue in Bank of Samerica", "city_second" },
                { "272025", "The Bank of Samerica Varmint", "On expert daffy-culty, earn the destruction bonus in Bank of Samerica", "city_second" },
                { "272026", "Bank of Samerica's Most Wanted", "On expert daffy-culty, reach the maximum bounty of $100,000 in Bank of Samerica", "city_second" },
                { "272027", "Fine Cuisine of Bank of Samerica", "On expert daffy-culty, eat all 100 sandwiches in Bank of Samerica", "city_second" },
                { "272028", "Freeze! This Is a Raid", "Change into a SWAT officer", "city_second" },
                { "272029", "Cage-Free Bank of Samerica", "Defeat all 6 Catchers in Bank of Samerica", "city_second" },
                { "272030", "The Bank of Samerica Assassin", "Defeat all 6 Catchers in Bank of Samerica on Expert Daffy-culty without being caught", "city_second" },

                { "272080", "Skyscraper Scavenger", "Complete the Bank of Samerica bonus game", "city_second_beta" },
                { "272081", "Ferocious Taz in the Clouds", "Complete the Bank of Samerica bonus game while destroying at least 75 crates", "city_main_beta_star" },

                { "272031", "Daffy Dominator", "Defeat Daffy in Gladiatoons", "city_main_beta" },
                { "272032", "High Roller", "On expert daffy-culty, defeat Daffy in Gladiatoons without losing the lead after 1:30:0", "city_main_beta_star" },

                { "272033", "High Noon Shooter", "Destroy all 7 wanted posters and complete Granny Canyon", "west_main" },
                { "272034", "Hidden Treasure of Granny Canyon", "Collect the golden Yosemite Sam statue in Granny Canyon", "west_second" },
                { "272035", "The Granny Canyon Varmint", "On expert daffy-culty, earn the destruction bonus in Granny Canyon", "west_second" },
                { "272036", "Granny Canyon's Most Wanted", "On expert daffy-culty, reach the maximum bounty of $250,000 in Granny Canyon", "west_second" },
                { "272037", "Fine Cuisine of Granny Canyon", "On expert daffy-culty, eat all 100 sandwiches in Granny Canyon", "west_second" },
                { "272038", "Go Ahead, Make Taz Day", "Change into a cowboy", "west_second" },
                { "272039", "Cage-Free Granny Canyon", "Defeat all 4 Catchers in Granny Canyon", "west_second" },
                { "272040", "The Granny Canyon Assassin", "Defeat all 4 Catchers in Granny Canyon on Expert Daffy-culty without being caught", "west_second" },

                { "272084", "Desert Dasher", "Complete the Granny Canyon bonus game", "westset_second" },
                { "272085", "I'm a Rocket Taz", "Complete the Granny Canyon bonus game in 50s or less", "westset_main_star" },

                { "272041", "Digging for Gold", "Destroy all 7 wanted posters and complete Cartoon Strip-Mine", "west_main" },
                { "272042", "Hidden Treasure of Cartoon Strip-Mine", "Collect the golden Yosemite Sam statue in Cartoon Strip-Mine", "west_second" },
                { "272043", "The Cartoon Strip-Mine Varmint", "On expert daffy-culty, earn the destruction bonus in Cartoon Strip-Mine", "west_second" },
                { "272044", "Cartoon Strip-Mine's Most Wanted", "On expert daffy-culty, reach the maximum bounty of $500,000 in Cartoon Strip-Mine", "west_second" },
                { "272045", "Fine Cuisine of Cartoon Strip-Mine", "On expert daffy-culty, eat all 100 sandwiches in Cartoon Strip-Mine", "west_second" },
                { "272046", "Snakes…Why’d It Have to Be Snakes?", "Change into an adventurer", "west_second" },
                { "272047", "Cage-Free Cartoon Strip-Mine", "Defeat all 4 Catchers in Cartoon Strip-Mine", "west_second" },
                { "272048", "The Cartoon Strip-Mine Assassin", "Defeat all 4 Catchers in Cartoon Strip-Mine on Expert Daffy-culty without being caught", "west_second" },

                { "272086", "Swift Spelunker", "Complete the Cartoon Strip-Mine bonus game", "zooboss_second_beta" },
                { "272087", "Bad(t)azz", "Complete the Cartoon Strip-Mine bonus game with at least 0:25:0 left on the clock", "zooboss_main_beta_star" },

                { "272049", "Big Bad Taz", "Destroy all 7 wanted posters and complete Taz: Haunted", "ghost_main" },
                { "272050", "Hidden Treasure of Taz: Haunted", "Collect the golden Yosemite Sam statue in Taz: Haunted", "ghost_second" },
                { "272051", "The Taz: Haunted Varmint", "On expert daffy-culty, earn the destruction bonus in Taz: Haunted", "ghost_second" },
                { "272052", "Taz: Haunted's Most Wanted", "On expert daffy-culty, reach the maximum bounty of $750,000 in Taz: Haunted", "ghost_second" },
                { "272053", "Fine Cuisine of Taz: Haunted", "On expert daffy-culty, eat all 100 sandwiches in Taz: Haunted", "ghost_second" },
                { "272054", "Taz: Unleased", "Change into a werewolf", "ghost_second" },
                { "272055", "Cage-Free Taz: Haunted", "Defeat all 4 Catchers in Taz: Haunted", "ghost_second" },
                { "272056", "The Taz: Haunted Assassin", "Defeat all 4 Catchers in Taz: Haunted on Expert Daffy-culty without being caught", "ghost_second" },
                { "272057", "Glove to See It", "Transform into the iconic ball from Glover", "ghost_second" },

                { "272088", "Hopping Hound", "Complete the Taz: Haunted bonus game", "ghostdest_second" },
                { "272089", "Taz Need to Lay off the Booze", "Complete the Taz: Haunted bonus game while destroying at least 100 crates", "ghostdest_main_star" },

                { "272058", "Sam Suppressor", "Defeat Yosemite Sam in Dodge City", "westset_main" },
                { "272059", "Pesky Critter", "On expert daffy-culty, defeat Yosemite Sam in Dodge City without getting hit by an explosion_star", "westset_main_star" },

                { "272060", "Taz's Dominion", "Destroy all 7 wanted posters and complete Tazland A-maze-ment Park", "tasmania_main" },
                { "272061", "Hidden Treasure of Tazland A-maze-ment Park", "Collect the golden Yosemite Sam statue in Tazland A-maze-ment Park", "tasmania_second" },
                { "272062", "The Tazland A-maze-ment Park Varmint", "On expert daffy-culty, earn the destruction bonus in Tazland A-maze-ment Park", "tasmania_second" },
                { "272063", "Tazland A-maze-ment Park's Most Wanted", "On expert daffy-culty, reach the maximum bounty of $1,000,000 in Tazland A-maze-ment Park", "tasmania_second" },
                { "272064", "Fine Cuisine of Tazland A-maze-ment Park", "On expert daffy-culty, eat all 100 sandwiches in Tazland A-maze-ment Park", "tasmania_second" },
                { "272065", "Ta(r)zan", "Change into a caveman", "tasmania_second" },
                { "272066", "Cage-Free Tazland A-maze-ment Park", "Defeat all 5 Catchers in Tazland A-maze-ment Park", "tasmania_second" },
                { "272067", "The Tazland A-maze-ment Park Assassin", "Defeat all 5 Catchers in Tazland A-maze-ment Park on Expert Daffy-culty without being caught", "tasmania_second" },

                { "272068", "Sam Samba", "Defeat Yosemite Sam in Disco Volcano", "main" },
                { "272069", "Groovy Varmint", "On expert daffy-culty, defeat Yosemite Sam in Disco Volcano without touching lava or letting him score", "main_star" },

                { "272070", "Tweety Tranquilizer", "Defeat Tweety in The Hindenbird and reunite Taz with his wife!", "safarinew_main_beta" },
                { "272071", "Hydrogen Leak", "On expert daffy-culty, defeat Tweety in The Hindenbird without getting hit", "safarinew_main_beta_star" },

                { "272090", "Tazmanian Sniper", "Defeat a zoo keeper with a ranged costume attack from a great distance", "sky" },

                { "272092", "Gallery Gazer", "Collect all 10 gallery pages", "citycheese" },

                { "271794", "#1 Most Wanted", "Complete the game on Expert Daffy-culty with the highest possible bounty of $3,142,000", "zooboss_alpha_second_star" },
            };

        // DPI hacking
        void SetUserFonts(float scaleFactorX, float scaleFactorY)
        {
            var OldFont = Font;
            Font = new Font(OldFont.FontFamily, 11f * scaleFactorX, OldFont.Style, GraphicsUnit.Pixel);
            Refresh();
            OldFont.Dispose();
        }
        protected override void DefWndProc(ref Message m)
        {
            DPI_Per_Monitor.Check_WM_DPICHANGED_WM_NCCREATE(SetUserFonts, m, this.Handle);
            base.DefWndProc(ref m);
        }

        public form()
        {
            // Make the GUI ignore the DPI setting

            InitializeComponent();
            DPI_Per_Monitor.TryEnableDPIAware(this, SetUserFonts);

            // Advanced Tab Init
            tabs.SelectedTab = advancedTab;
            advancedTab.BindingContextChanged += (_, __) => tabs.SelectedTab = patcherTab;

            gkh.HookedKeys.Add(Keys.F1);
            gkh.HookedKeys.Add(Keys.F2);
            gkh.HookedKeys.Add(Keys.F3);
            gkh.HookedKeys.Add(Keys.F4);
            gkh.HookedKeys.Add(Keys.F5);
            gkh.HookedKeys.Add(Keys.F6);
            gkh.HookedKeys.Add(Keys.F7);
            gkh.HookedKeys.Add(Keys.F8);
            gkh.HookedKeys.Add(Keys.F9);
            gkh.HookedKeys.Add(Keys.F10);
            gkh.HookedKeys.Add(Keys.F11);
            gkh.HookedKeys.Add(Keys.F12);
            gkh.HookedKeys.Add(Keys.Insert);
            gkh.HookedKeys.Add(Keys.Home);
            gkh.HookedKeys.Add(Keys.End);
            gkh.HookedKeys.Add(Keys.OemMinus);
            gkh.HookedKeys.Add(Keys.Oemplus);

            gkh.HookedKeys.Add(Keys.NumPad9);
            gkh.HookedKeys.Add(Keys.NumPad8);
            gkh.HookedKeys.Add(Keys.NumPad7);
            gkh.HookedKeys.Add(Keys.NumPad6);
            gkh.HookedKeys.Add(Keys.NumPad5);
            gkh.HookedKeys.Add(Keys.NumPad4);
            gkh.HookedKeys.Add(Keys.NumPad3);
            gkh.HookedKeys.Add(Keys.NumPad2);
            gkh.HookedKeys.Add(Keys.NumPad1);
            gkh.HookedKeys.Add(Keys.NumPad0);
            gkh.HookedKeys.Add(Keys.PrintScreen);
            gkh.HookedKeys.Add(Keys.Decimal);
            gkh.HookedKeys.Add(Keys.Multiply);
            gkh.HookedKeys.Add(Keys.Divide);
            gkh.HookedKeys.Add(Keys.Add);
            gkh.HookedKeys.Add(Keys.Subtract);
            gkh.HookedKeys.Add(Keys.PageUp);
            gkh.HookedKeys.Add(Keys.PageDown);
            gkh.HookedKeys.Add(Keys.Back);
            gkh.HookedKeys.Add(Keys.Delete);

            gkh.KeyDown += new KeyEventHandler(gkh_KeyDown);
            gkh.KeyUp += new KeyEventHandler(gkh_KeyUp);


            TazFolderPath = getPathFromRegistry();

            if (TazFolderPath != "" && File.Exists(TazFolderPath + @"\Patcher.xml"))
            {
                try
                {
                    // Load form element states + additional data
                    Dictionary<string, object> additionalData = null;
                    FormSerialisor.Deserialise(this, TazFolderPath + @"\Patcher.xml", out additionalData);

                    if (additionalData != null && additionalData.ContainsKey("achievementsStateTrainer"))
                        achievementsStateTrainer = (bool[])additionalData["achievementsStateTrainer"];

                    textBoxRegistry.Text = getPathFromRegistry();
                }
                catch (Exception ex)
                {
                    this.toolStripStatusLabel.Text = ex.Message.ToString();
                    this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                    // Default form element states
                    autoFillVideo(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height);
                    textBoxRegistry.Text = getPathFromRegistry();
                    langComboBox.SelectedIndex = 0;
                    levelComboBox.SelectedIndex = 0;
                    apiComboBox.SelectedIndex = 0;
                    layoutComboBox.SelectedIndex = 0;
                    fogComboBox.SelectedIndex = 0;
                    daffycultyComboBox.SelectedIndex = 0;
                }
            }
            else
            {
                // Default form element states
                autoFillVideo(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height);
                textBoxRegistry.Text = getPathFromRegistry();
                langComboBox.SelectedIndex = 0;
                levelComboBox.SelectedIndex = 0;
                apiComboBox.SelectedIndex = 0;
                layoutComboBox.SelectedIndex = 0;
                fogComboBox.SelectedIndex = 0;
                daffycultyComboBox.SelectedIndex = 0;
            }

            // Lock speedrun options
            InitModeOptions();

            // Repacking tab init
            string RepackingHTML = Properties.Resources.Repacking;
            webBrowserRepacking.DocumentText = RepackingHTML;

            // Usage tab init
            webBrowserReadMe.DocumentText = Resources.ReadMe;

            string version = "v4.0";

            // Welcome Message
            this.toolStripStatusLabel.Text = version;
            this.toolStripStatusLabel.ForeColor = System.Drawing.Color.Black;

            // Check new release
            if (checkUpdates.Checked == true)
                CheckTrainerUpdate(version);

            DrawAchievementsTable();
            UpdateAchievementsTable();
        }



        //#######################################################################################################################
        //Key hooker functions

        globalKeyboardHook gkh = new globalKeyboardHook();


        void gkh_KeyUp(object sender, KeyEventArgs e)
        {

            e.Handled = true;
        }


        void gkh_KeyDown(object sender, KeyEventArgs e)
        {
            //Disable trainer cheats with speedrun mode
            if (e.KeyCode == Keys.F1)
            {
                if (invisibility.Enabled)
                    this.invisibility.Checked = !this.invisibility.Checked;
                sendKey(Keys.F1, "{F1}");
            }
            if (e.KeyCode == Keys.F2)
            {
                if (superBelchCan.Enabled)
                    this.superBelchCan.Checked = !this.superBelchCan.Checked;
                sendKey(Keys.F2, "{F2}");
            }
            if (e.KeyCode == Keys.F3)
            {
                if (superJump.Enabled)
                    this.superJump.Checked = !this.superJump.Checked;
                sendKey(Keys.F3, "{F3}");
            }
            if (e.KeyCode == Keys.F4)
            {
                if (freezeLevelTimer.Enabled)
                    this.freezeLevelTimer.Checked = !this.freezeLevelTimer.Checked;
                sendKey(Keys.F4, "{F4}");
            }
            if (e.KeyCode == Keys.F5)
            {
                if (debugMenu.Enabled)
                    this.debugMenu.Checked = !this.debugMenu.Checked;
                sendKey(Keys.F5, "{F5}");
            }
            if (e.KeyCode == Keys.F6)
            {
                if (drawDistance.Enabled)
                    this.drawDistance.Checked = !this.drawDistance.Checked;
                sendKey(Keys.F6, "{F6}");
            }
            if (e.KeyCode == Keys.F7)
            {
                if (textureFilter.Enabled)
                    this.textureFilter.Checked = !this.textureFilter.Checked;
                sendKey(Keys.F7, "{F7}");
            }
            if (e.KeyCode == Keys.F8)
            {
                if (textureAlpha.Enabled)
                    this.textureAlpha.Checked = !this.textureAlpha.Checked;
                sendKey(Keys.F8, "{F8}");
            }
            if (e.KeyCode == Keys.F9)
            {
                if (fpsCap.Enabled)
                    this.fpsCap.Checked = !this.fpsCap.Checked;
                sendKey(Keys.F9, "{F9}");
            }
            if (e.KeyCode == Keys.F10)
            {
                if (smoothLighting.Enabled)
                    this.smoothLighting.Checked = !this.smoothLighting.Checked;
                sendKey(Keys.F10, "{F10}");
            }
            if (e.KeyCode == Keys.F11)
            {
                if (coopMode.Enabled)
                    this.coopMode.Checked = !this.coopMode.Checked;
                sendKey(Keys.F11, "{F11}");
            }
            if (e.KeyCode == Keys.F12)
            {
                if (ballMode.Enabled)
                    this.ballMode.Checked = !this.ballMode.Checked;
                sendKey(Keys.F12, "{F12}");
            }
            if (e.KeyCode == Keys.Insert)
            {
                if (unsinkabilityMode.Enabled)
                    this.unsinkabilityMode.Checked = !this.unsinkabilityMode.Checked;
                sendKey(Keys.Insert, "{Insert}");
            }
            if (e.KeyCode == Keys.Home)
            {
                if (undestructibleWorld.Enabled)
                    this.undestructibleWorld.Checked = !this.undestructibleWorld.Checked;
                sendKey(Keys.Home, "{Home}");
            }
            if (e.KeyCode == Keys.End)
            {
                if (bulldozerMode.Enabled)
                    this.bulldozerMode.Checked = !this.bulldozerMode.Checked;
                sendKey(Keys.End, "{End}");
            }
            if (e.KeyCode == Keys.OemMinus)
            {
                if (gameSpeed.Enabled)
                    changeGameSpeed(0);
                sendKey(Keys.OemMinus, "{-}");
            }
            if (e.KeyCode == Keys.Oemplus)
            {
                if (gameSpeed.Enabled)
                    changeGameSpeed(1);
                sendKey(Keys.Oemplus, "{=}");
            }
            if (e.KeyCode == Keys.NumPad5)
            {
                if (flyMode.Enabled)
                    this.flyMode.Checked = !this.flyMode.Checked;
                sendKey(Keys.NumPad5, "{5}");
            }
            if (e.KeyCode == Keys.NumPad9)
            {
                if (this.flyMode.Checked == true && flyMode.Enabled)
                    movement(0); //Z+
                sendKey(Keys.NumPad9, "{9}");
            }
            if (e.KeyCode == Keys.NumPad8)
            {
                if (this.flyMode.Checked == true && flyMode.Enabled)
                    movement(4); //Y+
                sendKey(Keys.NumPad8, "{8}");
            }
            if (e.KeyCode == Keys.NumPad7)
            {
                if (this.flyMode.Checked == true && flyMode.Enabled)
                    movement(1); //Z-
                sendKey(Keys.NumPad7, "{7}");
            }
            if (e.KeyCode == Keys.NumPad6)
            {
                if (this.flyMode.Checked == true && flyMode.Enabled)
                    movement(2); //X+
                sendKey(Keys.NumPad6, "{6}");
            }
            if (e.KeyCode == Keys.NumPad4)
            {
                if (this.flyMode.Checked == true && flyMode.Enabled)
                    movement(3); //X-
                sendKey(Keys.NumPad4, "{4}");
            }
            if (e.KeyCode == Keys.NumPad3)
            {
                if (savePos.Enabled)
                    loadPos_CheckedChanged(sender, e);
                sendKey(Keys.NumPad3, "{3}");
            }
            if (e.KeyCode == Keys.NumPad2)
            {
                if (this.flyMode.Checked == true && flyMode.Enabled)
                {
                    movement(5); //Y-
                }
                sendKey(Keys.NumPad2, "{2}");
            }
            if (e.KeyCode == Keys.NumPad1)
            {
                if (savePos.Enabled)
                    this.savePos.Checked = !this.savePos.Checked;
                sendKey(Keys.NumPad1, "{1}");
            }
            if (e.KeyCode == Keys.NumPad0)
            {
                if (flyCamera.Enabled)
                    this.flyCamera.Checked = !this.flyCamera.Checked;
                sendKey(Keys.NumPad0, "{0}");
            }
            if (e.KeyCode == Keys.PrintScreen)
            {
                if (screenshot.Enabled)
                    this.screenshot.Checked = !this.screenshot.Checked;
                sendKey(Keys.PrintScreen, "{PRTSC}");
            }
            if (e.KeyCode == Keys.Multiply)
            {
                if (fpsCap.Enabled)
                    incFPScap(sender, e);
                sendKey(Keys.Multiply, "{MULTIPLY}");
            }
            if (e.KeyCode == Keys.Divide)
            {
                if (fpsCap.Enabled)
                    decFPScap(sender, e);
                sendKey(Keys.Divide, "{/}");
            }
            if (e.KeyCode == Keys.Add)
            {
                if (fov.Enabled)
                    this.incFOV(sender, e);
                sendKey(Keys.Add, "{ADD}");
            }
            if (e.KeyCode == Keys.Subtract)
            {
                if (fov.Enabled)
                    this.decFOV(sender, e);
                sendKey(Keys.Subtract, "{SUBTRACT}");
            }
            if (e.KeyCode == Keys.PageUp)
            {
                if (ballMode.Enabled)
                    buttonNext_Click(sender, e);
                sendKey(Keys.PageUp, "{PGUP}");
            }
            if (e.KeyCode == Keys.PageDown)
            {
                if (ballMode.Enabled)
                    buttonPrev_Click(sender, e);
                sendKey(Keys.PageDown, "{PGDN}");
            }
            if (e.KeyCode == Keys.Back)
            {
                if (speedHack.Enabled)
                    this.speedHack.Checked = !this.speedHack.Checked;
                sendKey(Keys.Back, "{BKSP}");
            }
            if (e.KeyCode == Keys.Decimal)
            {
                if (debugInfo.Enabled)
                    this.debugInfo.Checked = !this.debugInfo.Checked;
                sendKey(Keys.Decimal, "{.}");
            }
            if (e.KeyCode == Keys.Delete)
            {
                if (resetLevel.Enabled)
                    this.resetLevel.Checked = !this.resetLevel.Checked;
                sendKey(Keys.Delete, "{DEL}");
            }
            if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.F4)
            {
                if (!killProcess())
                    sendKey(Keys.F4, "%{F4}");
            }

            e.Handled = true;
        }

        private void sendKey(System.Windows.Forms.Keys item, String key)
        {
            //sends keycode for another apps without hooking
            gkh.HookedKeys.Remove(item);
            SendKeys.Send(key);
            gkh.HookedKeys.Add(item);
        }

        //#######################################################################################################################
        //Process functions

        public string procName = "Taz";


        //Searching process
        private int findProcessId(string procName)
        {
            var procList = Process.GetProcesses();

            foreach (var proc in procList)
            {
                if (proc.ProcessName == procName && proc.ProcessName.Length == procName.Length)
                {
                    return proc.Id;
                }
            }
            return 0;
        }


        //Read memory from process
        private byte[] checkAndRead(IntPtr adress, byte[] bytes, int size, IntPtr mem)
        {
            int procId = findProcessId(procName);
            if (procId == 0)
            {
                //this.toolStripStatusLabel.Text = "Change option failed. " + procName + " process not found!";
                //this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                return bytes;
            }
            //this.toolStripStatusLabel.Text = procName + "process found";
            var handle = OpenProcess(0x001F0FFF, false, procId);
            ReadProcessMemory(handle, (IntPtr)adress, bytes, size, out mem);
            CloseHandle(handle);
            return bytes;
        }


        //Write process in memory
        private void checkAndWrite(IntPtr adress, byte[] bytes, int size, IntPtr mem)
        {
            int procId = findProcessId(procName);
            if (procId == 0)
            {
                this.toolStripStatusLabel.Text = "Change option failed. " + procName + " process not found!";
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                return;
            }
            var handle = OpenProcess(0x001F0FFF, false, procId);
            this.toolStripStatusLabel.Text = procName + " process found. Handle = " + handle;
            this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;
            if (WriteProcessMemory(handle, (IntPtr)adress, bytes, size, out mem) == false)
            {
                this.toolStripStatusLabel.Text = "WriteProcessMemory failed! Handle = " + handle;
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
            };
            CloseHandle(handle);
        }

        //Kill process
        private bool killProcess()
        {
            int procId = findProcessId(procName);
            if (procId == 0)
            {
                this.toolStripStatusLabel.Text = "Kill process failed. " + procName + " process not found!";
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                return false;
            }
            else
            {
                Process.GetProcessById(procId).Kill();
                this.toolStripStatusLabel.Text = procName + " process killed";
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;
                return true;
            }
        }
        private bool checkProcess()
        {
            int procId = findProcessId(procName);
            if (procId == 0)
                return false;
            else
                return true;
        }

        private void startGame()
        {
            string TazExecPath = TazFolderPath + "\\Taz.exe";
            Process.Start(TazExecPath, "Launched");
        }

        //#######################################################################################################################
        //Other

        private void autoFillVideo(int width, int height)
        {
            //fill resolution
            this.width.Text = width.ToString();
            this.height.Text = height.ToString();
            this.windowed.Checked = false;
        }

        private void autoAspect(int width, int height)
        {
            //calculate aspect ratio
            int a = width;
            int b = height;
            int aspect1 = 0;
            int aspect2 = 0;
            while (b != 0)
            {
                int temp = b;
                b = a % b;
                a = temp;
            }
            if (a != 0)
            {
                aspect1 = width / a;
                aspect2 = height / a;
            }
            //if long
            while (aspect1 > 255 || aspect2 > 255)
            {
                aspect1 /= 2;
                aspect2 /= 2;
            }
            //fill aspect
            this.aspect1.Text = aspect1.ToString();
            this.aspect2.Text = aspect2.ToString();
        }
        private void width_TextChanged(object sender, EventArgs e)
        {
            try
            {
                string width = this.width.Text;
                string height = this.height.Text;
                if (width == "")
                    width = "0";
                if (height == "")
                    height = "0";
                if (radioSpeedrun.Checked == false)
                    autoAspect(UInt16.Parse(width), UInt16.Parse(height));
                windowed.Checked = true;
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
            }
        }
        private void height_TextChanged(object sender, EventArgs e)
        {
            try
            {
                string width = this.width.Text;
                string height = this.height.Text;
                if (width == "")
                    width = "0";
                if (height == "")
                    height = "0";
                if (radioSpeedrun.Checked == false)
                    autoAspect(UInt16.Parse(width), UInt16.Parse(height));
                windowed.Checked = true;
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
            }
        }

        private void playKeySound(System.IO.Stream stream)
        {
            if (trainerSound.Checked == true)
            {
                System.Media.SoundPlayer player = new System.Media.SoundPlayer(stream);
                player.Play();
            }

        }

        private void playScreenshotSound(System.IO.Stream stream)
        {
            if (screenshotSound.Checked == true)
            {
                System.Media.SoundPlayer player = new System.Media.SoundPlayer(stream);
                player.Play();
            }

        }
        private void playAchievementSound(System.IO.Stream stream)
        {
            if (screenshotSound.Checked == true)
            {
                System.Media.SoundPlayer player = new System.Media.SoundPlayer(stream);
                player.Play();
            }

        }


        //#######################################################################################################################
        //Cheats
        private void drawDistance_CheckedChanged(object sender, EventArgs e)
        {
            if (this.drawDistance.Checked == true)
            {
                //environment
                byte[] bytes = { 0xFF, 0xFF }; // mov word ptr [esi+1E6h], 0FFFFh
                checkAndWrite((IntPtr)0x00474FC4, bytes, bytes.Length, new IntPtr());
                byte[] bytes2 = { 0xEB }; // jmp
                checkAndWrite((IntPtr)0x00474FD0, bytes2, bytes2.Length, new IntPtr());

                // CollectibleTwinkle
                byte[] bytes3 = { 0x00, 0x00, 0x80, 0x7F }; // +Inf
                checkAndWrite((IntPtr)0x005F66E8, bytes3, bytes3.Length, new IntPtr());
                byte[] bytes4 = { 0xE8, 0x66, 0x5F, 0x00 }; // fcomp [+Inf]
                checkAndWrite((IntPtr)0x0047E00B, bytes4, bytes4.Length, new IntPtr());
                byte[] bytes5 = { 0xD9, 0xE8, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 }; // fld1; nops
                checkAndWrite((IntPtr)0x0047E016, bytes5, bytes5.Length, new IntPtr());

                message("Unlimited Draw Distance: On");
            }
            else
            {
                //environment
                byte[] bytes = { 0x00, 0x00 }; // mov word ptr [esi+1E6h], 0h
                checkAndWrite((IntPtr)0x00474FC4, bytes, bytes.Length, new IntPtr());
                byte[] bytes2 = { 0x75 }; // jnz
                checkAndWrite((IntPtr)0x00474FD0, bytes2, bytes2.Length, new IntPtr());

                // CollectibleTwinkle
                byte[] bytes4 = { 0xF4, 0x75, 0x5F, 0x00 }; // fcomp [5000.0]
                checkAndWrite((IntPtr)0x0047E00B, bytes4, bytes4.Length, new IntPtr());
                byte[] bytes5 = { 0xD9, 0x46, 0x3C, 0xD8, 0x0D, 0xE4, 0x7E, 0x5F, 0x00, 0xD9, 0xFE }; // fld dword ptr [esi+3Ch]; fmul [0.00062831852]; fsin
                checkAndWrite((IntPtr)0x0047E016, bytes5, bytes5.Length, new IntPtr());

                message("Unlimited Draw Distance: Off");
            }
        }

        private void superJump_CheckedChanged(object sender, EventArgs e)
        {
            // JumpHack.CEA
            byte[] code = { 0x51, 0x50, 0x8B, 0x0D, 0x90, 0x83, 0x6C, 0x00, 0x8B, 0x49, 0x20, 0x81, 0xF9, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x17, 0x00, 0x00, 0x00, 0x8B, 0x0D, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x89, 0xC0, 0x01, 0x00, 0x00, 0xB8, 0x00, 0xC0, 0xDA, 0x44, 0x89, 0x81, 0x98, 0x00, 0x00, 0x00, 0x8B, 0x05, 0x54, 0x4A, 0x6F, 0x00, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x2C, 0x00, 0x00, 0x00, 0x8B, 0x0D, 0x70, 0x80, 0x6C, 0x00, 0x8B, 0x49, 0x20, 0x81, 0xF9, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x17, 0x00, 0x00, 0x00, 0x8B, 0x0D, 0xC4, 0x8B, 0x6C, 0x00, 0x8B, 0x89, 0xC0, 0x01, 0x00, 0x00, 0xB8, 0x00, 0xC0, 0xDA, 0x44, 0x89, 0x81, 0x98, 0x00, 0x00, 0x00, 0x58, 0x59, 0xD9, 0x44, 0x24, 0x58, 0xD8, 0x63, 0x08, 0xE9, 0x55, 0xBA, 0xE6, 0xFF };
            checkAndWrite((IntPtr)0x005F6780, code, code.Length, new IntPtr());

            // Jump to injection
            if (this.superJump.Checked == true)
            {
                byte[] inj = { 0xE9, 0x36, 0x45, 0x19, 0x00, 0x90, 0x90 };
                checkAndWrite((IntPtr)0x00462245, inj, inj.Length, new IntPtr());

                message("Jump Hack: On (Hold Jump Button)");
            }
            else
            {
                // Restore original code
                byte[] inj = { 0xD9, 0x44, 0x24, 0x58, 0xD8, 0x63, 0x08 };
                checkAndWrite((IntPtr)0x00462245, inj, inj.Length, new IntPtr());

                message("Jump Hack: Off");
            }
        }


        private void changeGameSpeed(byte ch)
        {
            //read current speed
            byte[] bytes = { 0x00, 0x00, 0x00, 0x00 };
            bytes = checkAndRead((IntPtr)0x006F4A3C, bytes, bytes.Length, new IntPtr());
            float current = BitConverter.ToSingle(bytes, 0);

            //PositiveInfinity stops game, all other commented values crashes
            float[] values = { /* 0, Single.Epsilon, 0.0000001f, */ 0.000001f, 0.001f, 0.01f, 0.1f, 1, maxSpd /*, Single.MaxValue, Single.PositiveInfinity*/ };
            int index = Array.FindIndex(values, x => x == current);

            if (index == -1) index = Array.FindIndex(values, x => x == 1);

            if (!((index == 0 && ch == 0) || (index == values.Length - 1 && ch == 1)))
            {
                //inc or dec speed
                if (ch == 1) index++;
                else index--;
            }
            checkAndWrite((IntPtr)0x006F4A3C, BitConverter.GetBytes(values[index]), BitConverter.GetBytes(values[index]).Length, new IntPtr());
            string num = values[index].ToString();
            if (index == 0) num = "0,000001";
            message("Game Speed: x" + num);
        }


        private void superBelchCan_CheckedChanged(object sender, EventArgs e)
        {
            if (this.superBelchCan.Checked == true)
            {
                byte[] bytes = { 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 };
                checkAndWrite((IntPtr)0x00482FE2, bytes, bytes.Length, new IntPtr());

                message("Burp Hack Mode: On");
            }
            else
            {
                byte[] bytes = { 0x0F, 0x85, 0x95, 0x00, 0x00, 0x00 };
                checkAndWrite((IntPtr)0x00482FE2, bytes, bytes.Length, new IntPtr());

                message("Burp Hack Mode: Off");
            }
        }


        private void invisibility_CheckedChanged(object sender, EventArgs e)
        {
            SingleCallInitialise();

            if (this.invisibility.Checked == true)
            {
                byte[] ret = { 0xC3 };

                // FinishInvisibility return
                checkAndWrite((IntPtr)0x0051F440, ret, ret.Length, new IntPtr());

                // UpdateCharacterInvisiblity return
                checkAndWrite((IntPtr)0x0051F2D0, ret, ret.Length, new IntPtr());

                // InvisOn.CEA
                byte[] code = { 0x68, 0x00, 0x96, 0x68, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x50, 0xE8, 0x9F, 0xEE, 0xE7, 0xFF, 0x83, 0xC4, 0x08, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0xC7, 0x81, 0x70, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xC7, 0x81, 0x48, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x8B, 0x05, 0x54, 0x4A, 0x6F, 0x00, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x2E, 0x00, 0x00, 0x00, 0x68, 0x00, 0x96, 0x68, 0x00, 0x8B, 0x05, 0xC4, 0x8B, 0x6C, 0x00, 0x50, 0xE8, 0x62, 0xEE, 0xE7, 0xFF, 0x83, 0xC4, 0x08, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0xC7, 0x81, 0x70, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xC7, 0x81, 0x48, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());

                message("Invisibility Mode: On");
            }
            else
            {
                byte[] ret = { 0x56 };

                // FinishInvisibility restore
                checkAndWrite((IntPtr)0x0051F440, ret, ret.Length, new IntPtr());

                // UpdateCharacterInvisiblity restore
                checkAndWrite((IntPtr)0x0051F2D0, ret, ret.Length, new IntPtr());

                // InvisOff.CEA
                byte[] code = { 0x6A, 0x00, 0x6A, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x50, 0xE8, 0x00, 0xED, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0xC7, 0x81, 0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x81, 0x48, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x05, 0x54, 0x4A, 0x6F, 0x00, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x2D, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x8B, 0x05, 0xC4, 0x8B, 0x6C, 0x00, 0x50, 0xE8, 0xC4, 0xEC, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0xC7, 0x81, 0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x81, 0x48, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());

                message("Invisibility Mode: Off");
            }

            byte[] injectionFlag = { 0x01 };
            checkAndWrite((IntPtr)0x00655510, injectionFlag, injectionFlag.Length, new IntPtr());
        }


        private void flyMode_CheckedChanged(object sender, EventArgs e)
        {

            byte[] bytes = { 0x81, 0xBF, 0xA0, 0x01, 0x00, 0x00, 0x74, 0x61, 0x7A, 0x64, 0x0F, 0x84, 0xC5, 0xBB, 0xE6, 0xFF, 0xD9, 0x44, 0x24, 0x54, 0xD8, 0x63, 0x04, 0xD9, 0x9F, 0xC4, 0x00, 0x00, 0x00, 0xE9, 0xB3, 0xBB, 0xE6, 0xFF };
            checkAndWrite((IntPtr)0x005F6670, bytes, bytes.Length, new IntPtr());

            /*
            //Editing taz state in structure
            adress = 0x006C8BC0; //Base adress
            bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
            adress = BitConverter.ToInt32(bytes, 0);
            adress += 0x1C8; //Second adress
            bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
            adress = BitConverter.ToInt32(bytes, 0);
            adress += 0xB0; //Target adress

            bytes[0] = 0x00;
            size = 1;

            if (this.flyMode.Checked == true)
            {
                bytes[0] = 0x00; // 3C;
            }
            */

            //Change instruction for gravity
            if (this.flyMode.Checked == true)
            {
                byte[] bytes2 = { 0xE9, 0x33, 0x44, 0x19, 0x00, 0x90, 0x90 };
                checkAndWrite((IntPtr)0x00462238, bytes2, bytes2.Length, new IntPtr());

                //byte[] flymode = { 0xEB,0x4C };
                //checkAndWrite((IntPtr)0x00480D6B, flymode, flymode.Length, new IntPtr());

                message("Fly Mode: On (Step = " + flyStep.ToString() + ")");
            }
            else
            {
                //Z force = 0
                var adress = 0x006C8BC0; //Base adress
                byte[] bytes3 = { 0x00, 0x00, 0x00, 0x00 };
                bytes = checkAndRead((IntPtr)adress, bytes3, bytes3.Length, new IntPtr());
                adress = BitConverter.ToInt32(bytes3, 0);
                adress += 0x1C0;
                bytes = checkAndRead((IntPtr)adress, bytes3, bytes3.Length, new IntPtr());
                adress = BitConverter.ToInt32(bytes3, 0);
                adress += 0x98;
                checkAndWrite((IntPtr)adress, bytes3, bytes3.Length, new IntPtr());

                byte[] bytes2 = { 0xD9, 0x44, 0x24, 0x54, 0xD8, 0x63, 0x04 };
                checkAndWrite((IntPtr)0x00462238, bytes2, bytes2.Length, new IntPtr());

                //byte[] flymode = { 0xA0, 0x71 };
                //checkAndWrite((IntPtr)0x00480D6B, flymode, flymode.Length, new IntPtr());

                message("Fly Mode: Off");
            }
        }

        private void movement(byte dir)
        {
            //Read taz structure coordinates offset
            float value;
            var adress = 0x006C8BC0; //Base adress
            byte[] bytes = { 0x00, 0x00, 0x00, 0x00 };
            int size = bytes.Length;
            var mem = new IntPtr();
            bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
            adress = BitConverter.ToInt32(bytes, 0);
            switch (dir)
            {

                case (0): //Z+
                    //Coordinate
                    adress += 0xC4;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value += flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    /*
                    //Camera
                    adress = 0x00708994;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value += flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    //Camera point at
                    adress = 0x007089A4;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value += flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    */
                    break;

                case (1): //Z-
                    //Coordinate
                    adress += 0xC4;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value -= flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    /*
                    //Camera
                    adress = 0x00708994;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value -= flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    //Camera point at
                    adress = 0x007089A4;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value -= flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    */
                    break;

                case (2): //X+
                    //Coordinate
                    adress += 0xC0;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value += flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    /*
                    //Camera
                    adress = 0x00708990;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value += flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    //Camera point at
                    adress = 0x007089A0;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value += flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    */
                    break;

                case (3): //X-
                    //Coordinate
                    adress += 0xC0;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value -= flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    /*
                    //Camera
                    adress = 0x00708990;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value -= flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    //Camera point at
                    adress = 0x007089A0;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value -= flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    */
                    break;

                case (4): //Y+
                    //Coordinate
                    adress += 0xC8;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value += flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    /*
                    //Camera
                    adress = 0x00708998;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value += flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    //Camera point at
                    adress = 0x007089A8;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value += flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    */
                    break;

                case (5): //Y-
                    //Coordinate
                    adress += 0xC8;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value -= flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    /*
                    //Camera
                    adress = 0x00708998;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value -= flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    //Camera point at
                    adress = 0x007089A8;
                    bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
                    value = BitConverter.ToSingle(bytes, 0);
                    value -= flyStep;
                    bytes = BitConverter.GetBytes(value);
                    checkAndWrite((IntPtr)adress, bytes, size, mem);
                    */
                    break;
            }
        }

        private void savePos_CheckedChanged(object sender, EventArgs e)
        {
            //Read taz structure coordinates offset
            float value;
            var adress = 0x006C8BC0; //Base adress
            byte[] bytes = { 0x00, 0x00, 0x00, 0x00 };
            int size = bytes.Length;
            var mem = new IntPtr();
            bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
            adress = BitConverter.ToInt32(bytes, 0);
            adress += 0xC0;
            bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
            value = BitConverter.ToSingle(bytes, 0);
            Xcoord = value;
            adress += 0x4;
            bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
            value = BitConverter.ToSingle(bytes, 0);
            Ycoord = value;
            adress += 0x4;
            bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
            value = BitConverter.ToSingle(bytes, 0);
            Zcoord = value;

            savedCoordX.Text = Xcoord.ToString();
            savedCoordY.Text = Ycoord.ToString();
            savedCoordZ.Text = Zcoord.ToString();

            message("Taz Position Saved");
        }

        private void loadPos_CheckedChanged(object sender, EventArgs e)
        {
            //Read taz structure coordinates offset
            var adress = 0x006C8BC0; //Base adress
            byte[] bytes = { 0x00, 0x00, 0x00, 0x00 };
            int size = bytes.Length;
            var mem = new IntPtr();
            bytes = checkAndRead((IntPtr)adress, bytes, size, mem);
            adress = BitConverter.ToInt32(bytes, 0);
            adress += 0xC0;
            bytes = BitConverter.GetBytes(Xcoord);
            checkAndWrite((IntPtr)adress, bytes, size, mem);
            adress += 0x4;
            bytes = BitConverter.GetBytes(Ycoord);
            checkAndWrite((IntPtr)adress, bytes, size, mem);
            adress += 0x4;
            bytes = BitConverter.GetBytes(Zcoord);
            checkAndWrite((IntPtr)adress, bytes, size, mem);

            message("Taz Position Loaded");
        }

        private void flyCamera_CheckedChanged(object sender, EventArgs e)
        {
            if (this.flyCamera.Checked == true)
            {
                
                // Hide messages
                byte[] bytes2 = { 0x00 };
                checkAndWrite((IntPtr)0x00643008, bytes2, bytes2.Length, new IntPtr());
                byte[] bytes3 = { 0x00 };
                checkAndWrite((IntPtr)0x0064301C, bytes3, bytes3.Length, new IntPtr());
                // Fly camera state
                byte[] bytes = { 0x01 };
                checkAndWrite((IntPtr)0x0071C4D4, bytes, bytes.Length, new IntPtr());
                // Controls suspend
                byte[] controlsuspend = { 0x01 };
                checkAndWrite((IntPtr)0x006C8E02, controlsuspend, controlsuspend.Length, new IntPtr());
                // Custom camera speed
                byte[] spd = BitConverter.GetBytes(camSpd);
                checkAndWrite((IntPtr)0x00731340, spd, spd.Length, new IntPtr());
                byte[] camSpdOffset = { 0x40, 0x13, 0x73, 0x00 };
                checkAndWrite((IntPtr)0x004E14ED, camSpdOffset, camSpdOffset.Length, new IntPtr());
                checkAndWrite((IntPtr)0x004E14FB, camSpdOffset, camSpdOffset.Length, new IntPtr());
                checkAndWrite((IntPtr)0x004E1505, camSpdOffset, camSpdOffset.Length, new IntPtr());

                message("Photo Mode: On (Velocity = " + camSpd.ToString() + ")" );
            }
            else
            {
                // Fly camera state
                byte[] bytes = { 0x00 };
                checkAndWrite((IntPtr)0x0071C4D4, bytes, bytes.Length, new IntPtr());
                // Restore messages
                byte[] bytes2 = { 0x74 };
                checkAndWrite((IntPtr)0x00643008, bytes2, bytes2.Length, new IntPtr());
                byte[] bytes3 = { 0x66 };
                checkAndWrite((IntPtr)0x0064301C, bytes3, bytes3.Length, new IntPtr());
                // Controls restore
                byte[] controlsuspend = { 0x00 };
                checkAndWrite((IntPtr)0x006C8E02, controlsuspend, controlsuspend.Length, new IntPtr());
                // Restore camera speed
                byte[] camSpdOffset = { 0xF8, 0x73, 0x5F, 0x00 };
                checkAndWrite((IntPtr)0x004E14ED, camSpdOffset, camSpdOffset.Length, new IntPtr());
                checkAndWrite((IntPtr)0x004E14FB, camSpdOffset, camSpdOffset.Length, new IntPtr());
                checkAndWrite((IntPtr)0x004E1505, camSpdOffset, camSpdOffset.Length, new IntPtr());

                message("Photo Mode: Off");
            }

        }

        private void screenshot_CheckedChanged(object sender, EventArgs e)
        {
            SingleCallInitialise();
            // Take BMP screenshot to Taz folder
            // Screenshot.CEA
            byte[] screenshot = { 0xFF, 0x35, 0x6E, 0x13, 0x73, 0x00, 0xFF, 0x15, 0xCC, 0x70, 0x5F, 0x00, 0xFF, 0x35, 0xDA, 0xE4, 0x6F, 0x00, 0xFF, 0x35, 0xD8, 0xE4, 0x6F, 0x00, 0xFF, 0x35, 0xD6, 0xE4, 0x6F, 0x00, 0xFF, 0x35, 0xD4, 0xE4, 0x6F, 0x00, 0xFF, 0x35, 0xD2, 0xE4, 0x6F, 0x00, 0xFF, 0x35, 0xCE, 0xE4, 0x6F, 0x00, 0xFF, 0x35, 0xCC, 0xE4, 0x6F, 0x00, 0x68, 0x40, 0x13, 0x73, 0x00, 0x68, 0x40, 0x13, 0x73, 0x00, 0xE8, 0xD2, 0x4C, 0xFE, 0xFF, 0x83, 0xC4, 0x24, 0x68, 0x40, 0x13, 0x73, 0x00, 0xE8, 0x1E, 0x86, 0xF7, 0xFF, 0x83, 0xC4, 0x04, 0xC3 };
            checkAndWrite((IntPtr)0x005F6900, screenshot, screenshot.Length, new IntPtr());

            byte[] screenshotdata = { 0x25, 0x30, 0x34, 0x68, 0x75, 0x2D, 0x25, 0x30, 0x32, 0x68, 0x75, 0x2D, 0x25, 0x30, 0x32, 0x68, 0x75, 0x2D, 0x25, 0x30, 0x32, 0x68, 0x75, 0x2D, 0x25, 0x30, 0x32, 0x68, 0x75, 0x2D, 0x25, 0x30, 0x32, 0x68, 0x75, 0x2D, 0x25, 0x30, 0x33, 0x68, 0x75, 0x2E, 0x62, 0x6D, 0x70, 0x00, 0xCC, 0xE4, 0x6F, 0x00 };
            checkAndWrite((IntPtr)0x00731340, screenshotdata, screenshotdata.Length, new IntPtr());

            byte[] injectionFlag = { 0x01 };
            checkAndWrite((IntPtr)0x00655510, injectionFlag, injectionFlag.Length, new IntPtr());

            playScreenshotSound(Properties.Resources.cameraclick);
        }

        private void freezeLevelTimer_CheckedChanged(object sender, EventArgs e)
        {

            if (this.freezeLevelTimer.Checked == true)
            {
                //bonuscrates
                byte[] bytes = { 0x31, 0xDB, 0xEB, 0x10 };
                checkAndWrite((IntPtr)0x004ECF9F, bytes, bytes.Length, new IntPtr());

                //bonusrace
                byte[] bytes2 = { 0xA1, 0x2C, 0xC6, 0x71, 0x00, 0x83, 0xF8, 0x01, 0xEB, 0x10 };
                checkAndWrite((IntPtr)0x004F7305, bytes2, bytes2.Length, new IntPtr());

                //gladiatoons
                byte[] bytes3 = { 0x8A, 0x15, 0x54, 0x4A, 0x6F, 0x00, 0x84, 0xD2, 0xC7, 0x44, 0x24, 0x14, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x10 };
                checkAndWrite((IntPtr)0x00518D88, bytes3, bytes3.Length, new IntPtr());

                //leveltime
                byte[] bytes4 = { 0x0F, 0xBE, 0x0D, 0x30, 0x4C, 0x70, 0x00, 0x51, 0xEB, 0x10 };
                checkAndWrite((IntPtr)0x004A7543, bytes4, bytes4.Length, new IntPtr());

                //security boxes
                byte[] bytes5 = { 0x90, 0x90, 0x90, 0x90, 0x90 };
                checkAndWrite((IntPtr)0x0044AE2B, bytes5, bytes5.Length, new IntPtr());


                message("Freeze Timers & Sam Boxes: On");
            }
            else
            {
                //bonuscrates
                byte[] bytes = { 0xD9, 0x05, 0x88, 0x4B };
                checkAndWrite((IntPtr)0x004ECF9F, bytes, bytes.Length, new IntPtr());

                //bonusrace
                byte[] bytes2 = { 0xD9, 0x05, 0x88, 0x4B, 0x6F, 0x00, 0xA1, 0x2C, 0xC6, 0x71 };
                checkAndWrite((IntPtr)0x004F7305, bytes2, bytes2.Length, new IntPtr());

                //gladiatoons
                byte[] bytes3 = { 0xD9, 0x05, 0x88, 0x4B, 0x6F, 0x00, 0x8A, 0x15, 0x54, 0x4A, 0x6F, 0x00, 0x84, 0xD2, 0xD8, 0x05, 0x84, 0x65 };
                checkAndWrite((IntPtr)0x00518D88, bytes3, bytes3.Length, new IntPtr());

                //leveltime
                byte[] bytes4 = { 0xD9, 0x05, 0xB8, 0x8B, 0x6C, 0x00, 0x0F, 0xBE, 0x0D, 0x30 };
                checkAndWrite((IntPtr)0x004A7543, bytes4, bytes4.Length, new IntPtr());

                //security boxes
                byte[] bytes5 = { 0xE8, 0x50, 0xEC, 0xFF, 0xFF };
                checkAndWrite((IntPtr)0x0044AE2B, bytes5, bytes5.Length, new IntPtr());

                message("Freeze Timers & Sam Boxes: Off");
            }
        }

        private void speedHack_CheckedChanged(object sender, EventArgs e)
        {
            if (this.speedHack.Checked == true)
            {
                //set spin speed hack
                byte[] bytes = { 0xC7, 0x46, 0x28, 0x00, 0x00, 0x80, 0x3F, 0xEB, 0x18, 0x90, 0x90 };
                checkAndWrite((IntPtr)0x00462397, bytes, bytes.Length, new IntPtr());

                message("Spin Hack: On");
            }
            else
            {
                //restore normal spin speed check
                byte[] bytes = { 0xD9, 0x46, 0x28, 0xD8, 0x5E, 0x24, 0xDF, 0xE0, 0xF6, 0xC4, 0x01 };
                checkAndWrite((IntPtr)0x00462397, bytes, bytes.Length, new IntPtr());

                message("Spin Hack: Off");
            }
        }


        private void unsinkabilityMode_CheckedChanged(object sender, EventArgs e)
        {
            if (this.unsinkabilityMode.Checked == true)
            {
                //turn off water collision
                byte[] bytes = { 0xC3, 0x90, 0x90, 0x90 };
                checkAndWrite((IntPtr)0x0042D410, bytes, bytes.Length, new IntPtr());

                message("Unsinkability: On");
            }
            else
            {
                //restore water collision
                byte[] bytes = { 0x8B, 0x4C, 0x24, 0x04 };
                checkAndWrite((IntPtr)0x0042D410, bytes, bytes.Length, new IntPtr());

                message("Unsinkability: Off");
            }
        }

        private void textureFilter_CheckedChanged(object sender, EventArgs e)
        {
            if (this.textureFilter.Checked == true)
            {
                //set D3DTSS_MAGFILTER filtering value to D3DTEXF_POINT (Stage 0 + Stage 1)
                byte[] bytes = { 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 };
                checkAndWrite((IntPtr)0x00655E00, bytes, bytes.Length, new IntPtr());

                message("Texture Filter: Nearest-Neighbour");
            }
            else
            {
                //set D3DTSS_MAGFILTER filtering value to D3DTEXF_LINEAR (Original)
                byte[] bytes = { 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00 };
                checkAndWrite((IntPtr)0x00655E00, bytes, bytes.Length, new IntPtr());

                message("Texture Filter: Linear");
            }
        }

        private void textureAlpha_CheckedChanged(object sender, EventArgs e)
        {
            if (this.textureAlpha.Checked == true)
            {
                //set D3DTSS_ALPHAOP value to D3DTOP_BLENDTEXTUREALPHA
                byte[] bytes = { 0x0D };
                checkAndWrite((IntPtr)0x0057384C, bytes, bytes.Length, new IntPtr());

                message("Show Wall Collisions: On");
            }
            else
            {
                //set D3DTSS_ALPHAOP value to D3DTOP_MODULATE2X (Original)
                byte[] bytes = { 0x05 };
                checkAndWrite((IntPtr)0x0057384C, bytes, bytes.Length, new IntPtr());

                message("Show Wall Collisions: Off");
            }
        }

        private void debugMenu_CheckedChanged(object sender, EventArgs e)
        {
            SingleCallInitialise();

            // Get Debug Menu State
            byte[] state = { 0x00 };
            checkAndRead((IntPtr) 0x00752028, state, 1, new IntPtr());

            if (state[0] == 0)
            {
                // Debug Menu Activate
                // DbgMenuShow.CEA
                byte[] enterGui = { 0x68, 0x80, 0x37, 0x4A, 0x00, 0xE8, 0xE6, 0x62, 0xF8, 0xFF, 0x83, 0xC4, 0x04, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, enterGui, enterGui.Length, new IntPtr());

                byte[] injectionFlag = { 0x01 };
                checkAndWrite((IntPtr)0x00655510, injectionFlag, injectionFlag.Length, new IntPtr());

                message("");
            }
            else
            {
                // Debug Menu Deactivate
                // DbgMenuHide.CEA
                byte[] exitGui = { 0xE8, 0x5B, 0x63, 0xF8, 0xFF, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, exitGui, exitGui.Length, new IntPtr());

                byte[] injectionFlag = { 0x01 };
                checkAndWrite((IntPtr)0x00655510, injectionFlag, injectionFlag.Length, new IntPtr());

                message("");
            }
        }

        private void debugInfo_CheckedChanged(object sender, EventArgs e)
        {
            if (this.debugInfo.Checked == true)
            {
                //debugTextOn_1929
                byte[] bytes = { 0x01 };
                checkAndWrite((IntPtr)0x006F4CAA, bytes, bytes.Length, new IntPtr());

                message("Debug Info: On");
            }
            else
            {
                //debugTextOn_1929
                byte[] bytes = { 0x00 };
                checkAndWrite((IntPtr)0x006F4CAA, bytes, bytes.Length, new IntPtr());

                message("Debug Info: Off");
            }
        }

        private void disallowJump_CheckedChanged(object sender, EventArgs e)
        {
            // Check patches
            byte[] check = { 0x00 };
            check = checkAndRead((IntPtr)0x005F6E00, check, check.Length, new IntPtr());
            if (check[0] == 0)
            {
                message("Cooperative Fix patch required");
                return;
            }

            SingleCallInitialise();

            //byte[] numPlayers = { 0x00 };
            //checkAndRead((IntPtr)0x006F4A54, numPlayers, 1, new IntPtr());

            if (coopMode.Checked)
            {
                // startposition2 = startposition
                byte[] startpos = { 0x00 };
                checkAndWrite((IntPtr)0x006442C9, startpos, startpos.Length, new IntPtr());

                // startposition2 = startposition
                byte[] gladiatoons_hack = { 0x00 };
                checkAndWrite((IntPtr)0x004A543F, gladiatoons_hack, gladiatoons_hack.Length, new IntPtr());

                // CoopOn.CEA
                byte[] coopcode = { 0xA0, 0xA8, 0x8B, 0x6C, 0x00, 0x3C, 0x0C, 0x0F, 0x85, 0x0C, 0x00, 0x00, 0x00, 0xB0, 0x00, 0xA2, 0x57, 0x4A, 0x6F, 0x00, 0xE9, 0x07, 0x00, 0x00, 0x00, 0xC6, 0x05, 0x54, 0x4A, 0x6F, 0x00, 0x02, 0xFF, 0x35, 0xA8, 0x8B, 0x6C, 0x00, 0xE8, 0x85, 0xEA, 0xEA, 0xFF, 0x83, 0xC4, 0x04, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, coopcode, coopcode.Length, new IntPtr());

                message("Cooperative Mode: On");
            }
            else
            {
                // reset startposition2
                byte[] startpos = { 0x32 };
                checkAndWrite((IntPtr)0x006442C9, startpos, startpos.Length, new IntPtr());

                // startposition2 = startposition
                byte[] gladiatoons_hack = { 0x01 };
                checkAndWrite((IntPtr)0x004A543F, gladiatoons_hack, gladiatoons_hack.Length, new IntPtr());

                // CoopOff.CEA
                byte[] coopcode = { 0xA0, 0xA8, 0x8B, 0x6C, 0x00, 0x3C, 0x0C, 0x0F, 0x85, 0x0C, 0x00, 0x00, 0x00, 0xB0, 0x01, 0xA2, 0x57, 0x4A, 0x6F, 0x00, 0xE9, 0x07, 0x00, 0x00, 0x00, 0xC6, 0x05, 0x54, 0x4A, 0x6F, 0x00, 0x01, 0xFF, 0x35, 0xA8, 0x8B, 0x6C, 0x00, 0xE8, 0x85, 0xEA, 0xEA, 0xFF, 0x83, 0xC4, 0x04, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, coopcode, coopcode.Length, new IntPtr());

                message("Cooperative Mode: Off");
            }

            byte[] injectionFlag = { 0x01 };
            checkAndWrite((IntPtr)0x00655510, injectionFlag, injectionFlag.Length, new IntPtr());

        }
        private void undestructibleWorld_CheckedChanged(object sender, EventArgs e)
        {
            if (this.undestructibleWorld.Checked == true)
            {
                if (this.bulldozerMode.Checked == true)
                    bulldozerMode.Checked = false;
                byte[] bytes = { 0xEB, 0x0D };
                checkAndWrite((IntPtr)0x0041B87B, bytes, bytes.Length, new IntPtr());

                message("Undestructible Mode: On");
            }
            else
            {
                byte[] bytes = { 0x75, 0x16 };
                checkAndWrite((IntPtr)0x0041B87B, bytes, bytes.Length, new IntPtr());

                message("Undestructible Mode: Off");
            }
        }

        private void bulldozerMode_CheckedChanged(object sender, EventArgs e)
        {
            if (this.bulldozerMode.Checked == true)
            {
                if (this.undestructibleWorld.Checked == true)
                    undestructibleWorld.Checked = false;
                byte[] bytes = { 0xB9, 0x01, 0x00, 0x00, 0x00, 0x90 }; // Alt Undestructible - 0xB9, 0x01, 0x00, 0x00, 0x00, 0x90
                checkAndWrite((IntPtr)0x0041B93C, bytes, bytes.Length, new IntPtr()); // mov ecx,1; nop

                message("Bulldozer Mode: On");
            }
            else
            {
                byte[] bytes = { 0x0F, 0x87, 0x48, 0xFF, 0xFF, 0xFF }; // Original
                checkAndWrite((IntPtr)0x0041B93C, bytes, bytes.Length, new IntPtr()); // ja def_41B942 

                message("Bulldozer Mode: Off");
            }
        }

        private void SmoothLighting_CheckedChanged(object sender, EventArgs e)
        {
            if (unstableLight.Checked == true)
            {
                //Code injection
                byte[] bytes = { 0x50, 0xB8, 0x05, 0x00, 0x00, 0x00, 0x89, 0x87, 0x44, 0x01, 0x00, 0x00, 0x58, 0xD8, 0x1D, 0x3C, 0x73, 0x5F, 0x00, 0xE9, 0x77, 0xBB, 0xE6, 0xFF };
                checkAndWrite((IntPtr)0x005F66D0, bytes, bytes.Length, new IntPtr());
                //Jump to injection
                byte[] bytes2 = { 0xE9, 0x72, 0x44, 0x19, 0x00, 0x90 };
                checkAndWrite((IntPtr)0x00462259, bytes2, bytes2.Length, new IntPtr());

                if (this.smoothLighting.Checked == true)
                {
                    //Lighting mode 5
                    byte[] bytes3 = { 0x05 };
                    checkAndWrite((IntPtr)0x005F66D2, bytes3, bytes3.Length, new IntPtr());

                    message("Legacy Lighting: On (Unstable)");
                }
                else
                {
                    //Lighting mode 4
                    byte[] bytes3 = { 0x04 };
                    checkAndWrite((IntPtr)0x005F66D2, bytes3, bytes3.Length, new IntPtr());

                    message("Legacy Lighting: Off (Unstable)");
                }
            }
            else
            {
                // Check patches
                byte[] check = { 0x00 };
                check = checkAndRead((IntPtr)0x005F6A50, check, check.Length, new IntPtr());
                if (check[0] == 0)
                {
                    message("Advanced Cheats patch required");
                    return;
                }

                SingleCallInitialise();
                
                if (this.smoothLighting.Checked == true)
                {
                    // Apply Airbrushed Characters and Near Focus cheats in specific order
                    // AltLightOn.CEA
                    byte[] light = { 0x68, 0x16, 0x00, 0x00, 0x00, 0xE8, 0xE6, 0x54, 0xE8, 0xFF, 0x83, 0xC4, 0x04, 0x68, 0x15, 0x00, 0x00, 0x00, 0xE8, 0xD9, 0x54, 0xE8, 0xFF, 0x83, 0xC4, 0x04, 0x68, 0x15, 0x00, 0x00, 0x00, 0xE8, 0x5C, 0x58, 0xE8, 0xFF, 0x83, 0xC4, 0x04, 0xC3 };
                    checkAndWrite((IntPtr)0x005F6900, light, light.Length, new IntPtr());

                    // Update Airbrushed Characters on level change
                    // AltLightPatch.CEA
                    byte[] patch = { 0x68, 0x15, 0x00, 0x00, 0x00, 0xE8, 0x16, 0x57, 0xE8, 0xFF, 0x83, 0xC4, 0x04, 0x68, 0x15, 0x00, 0x00, 0x00, 0xE8, 0x99, 0x5A, 0xE8, 0xFF, 0x83, 0xC4, 0x04, 0x8B, 0x4C, 0x24, 0x38, 0x5F, 0xE9, 0x64, 0xBE, 0xED, 0xFF };
                    checkAndWrite((IntPtr)0x005F66D0, patch, patch.Length, new IntPtr());
                    // Jump to injection on level change
                    byte[] inj = { 0xE9, 0x78, 0x41, 0x12, 0x00 };
                    checkAndWrite((IntPtr)0x004D2553, inj, inj.Length, new IntPtr());

                    message("Airbrush Shading: On");
                }
                else
                {
                    // Deactivate Near Focus
                    // AltLightOff.CEA
                    byte[] light = { 0x68, 0x16, 0x00, 0x00, 0x00, 0xE8, 0x76, 0x58, 0xE8, 0xFF, 0x83, 0xC4, 0x04, 0xC3 };
                    checkAndWrite((IntPtr)0x005F6900, light, light.Length, new IntPtr());
                    
                    // Restore injection
                    byte[] inj = { 0x8B, 0x4C, 0x24, 0x38, 0x5F };
                    checkAndWrite((IntPtr)0x004D2553, inj, inj.Length, new IntPtr());

                    message("Airbrush Shading: Off");
                }

                byte[] injectionFlag = { 0x01 };
                checkAndWrite((IntPtr)0x00655510, injectionFlag, injectionFlag.Length, new IntPtr());

            }
        }

        private void fpsCap_CheckedChanged(object sender, EventArgs e)
        {
            // Check FPS patch
            byte[] fpsPatch = { 0x00 };

            // Ignore FPS state on / and * buttons
            string test = sender.GetType().Name;
            if (sender.GetType().Name != "globalKeyboardHook")
                checkAndRead((IntPtr)0x00655500, fpsPatch, 1, new IntPtr());

            if (fpsPatch[0] == 0)
            {
                // FrameLimiter.CEA
                byte[] bytes = { 0xE8, 0x0B, 0x9A, 0xE9, 0xFF, 0xE8, 0xE6, 0x1E, 0xF8, 0xFF, 0x52, 0x50, 0x8B, 0x15, 0x0C, 0x55, 0x65, 0x00, 0x8B, 0x05, 0x08, 0x55, 0x65, 0x00, 0x52, 0x50, 0xE8, 0xE1, 0x1F, 0xF8, 0xFF, 0x83, 0xC4, 0x10, 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x00, 0x52, 0x50, 0xE8, 0x7D, 0x1F, 0xF8, 0xFF, 0x83, 0xC4, 0x10, 0xD8, 0x1D, 0x04, 0x55, 0x65, 0x00, 0xDF, 0xE0, 0xF6, 0xC4, 0x01, 0x75, 0xC2, 0xE8, 0xA8, 0x1E, 0xF8, 0xFF, 0x89, 0x15, 0x0C, 0x55, 0x65, 0x00, 0xA3, 0x08, 0x55, 0x65, 0x00, 0xE9, 0x99, 0x10, 0xEB, 0xFF };
                checkAndWrite((IntPtr)0x005F6700, bytes, bytes.Length, new IntPtr());
                byte[] bytes2 = { 0xE9, 0x0F, 0xEF, 0x14, 0x00 };
                checkAndWrite((IntPtr)0x004A77EC, bytes2, bytes2.Length, new IntPtr());

                float miliseconds = (1000 / (float)numericFpsCap.Value) / 1000;

                // Float delay in seconds
                byte[] bytes3 = BitConverter.GetBytes(miliseconds);
                checkAndWrite((IntPtr)0x00655504, bytes3, bytes3.Length, new IntPtr());

                // FPS patched
                fpsPatch[0] = 1;
                checkAndWrite((IntPtr)0x00655500, fpsPatch, fpsPatch.Length, new IntPtr());

                message("Framerate Limit: " + numericFpsCap.Value.ToString() + " FPS");
            }
            else
            {
                // 0,00
                byte[] bytes3 = { 0x00, 0x00, 0x00, 0x00 };
                checkAndWrite((IntPtr)0x00655504, bytes3, bytes3.Length, new IntPtr());

                // FPS not patched
                fpsPatch[0] = 0;
                checkAndWrite((IntPtr)0x00655500, fpsPatch, fpsPatch.Length, new IntPtr());

                message("Unlimited Framerate");
            }
        }

        private void incFPScap(object sender, EventArgs e)
        {
            byte[] fpsPatch = { 0x00 };
            checkAndRead((IntPtr)0x00655500, fpsPatch, 1, new IntPtr());

            if (fpsPatch[0] == 1)
            {
                numericFpsCap.UpButton();
                fpsCap_CheckedChanged(sender, e);
            }
            else
            {
                message("Unlimited Framerate (F9 to Toggle)");
            }
        }

        private void decFPScap(object sender, EventArgs e)
        {
            byte[] fpsPatch = { 0x00 };
            checkAndRead((IntPtr)0x00655500, fpsPatch, 1, new IntPtr());

            if (fpsPatch[0] == 1)
            {
                numericFpsCap.DownButton();
                fpsCap_CheckedChanged(sender, e);
            }
            else
            {
                message("Unlimited Framerate (F9 to Toggle)");
            }
        }

        private void incFOV(object sender, EventArgs e)
        {
            byte[] fovPatch = { 0x00 };
            checkAndRead((IntPtr)0x00655520, fovPatch, 1, new IntPtr());
            //fov
            if (fovPatch[0] == 1)
            {
                // increase fov
                numericFoV.UpButton();
                // fov value
                float fov = (float)(3.141592653589793 / 180) * (float)numericFoV.Value;
                byte[] bytes = BitConverter.GetBytes(fov);
                checkAndWrite((IntPtr)0x00655524, bytes, bytes.Length, new IntPtr());
                // SetFOV.CEA
                SingleCallInitialise();
                byte[] setfov = { 0x68, 0xD4, 0x6A, 0x6C, 0x00, 0x68, 0xE4, 0xCB, 0x96, 0x3F, 0xE8, 0x71, 0x90, 0xE9, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, setfov, setfov.Length, new IntPtr());
                byte[] injectionFlag = { 0x01 };
                checkAndWrite((IntPtr)0x00655510, injectionFlag, injectionFlag.Length, new IntPtr());

                message("FOV: " + numericFoV.Value.ToString());
            }
            else
            {
                // FoV.CEA
                byte[] bytes = { 0x8B, 0x05, 0x24, 0x55, 0x65, 0x00, 0x89, 0x45, 0x08, 0xD9, 0x45, 0x08, 0x8B, 0x4D, 0x0C, 0xE9, 0x18, 0x92, 0xE9, 0xFF };
                checkAndWrite((IntPtr)0x005F6760, bytes, bytes.Length, new IntPtr());

                //jump to injection
                byte[] bytes2 = { 0xE9, 0xD5, 0x6D, 0x16, 0x00, 0x90 };
                checkAndWrite((IntPtr)0x0048F986, bytes2, bytes2.Length, new IntPtr());

                //fov value
                float fov = (float)(3.141592653589793 / 180) * (float)numericFoV.Value;
                byte[] bytes3 = BitConverter.GetBytes(fov);
                checkAndWrite((IntPtr)0x00655524, bytes3, bytes3.Length, new IntPtr());

                //fov patched
                fovPatch[0] = 0x01;
                checkAndWrite((IntPtr)0x00655520, fovPatch, fovPatch.Length, new IntPtr());

                message("FOV: " + numericFoV.Value.ToString());
            }
        }

        private void decFOV(object sender, EventArgs e)
        {
            byte[] fovPatch = { 0x00 };
            checkAndRead((IntPtr)0x00655520, fovPatch, 1, new IntPtr());

            if (fovPatch[0] == 1)
            {
                // decrease fov
                numericFoV.DownButton();
                // fov value
                float fov = (float)(3.141592653589793 / 180) * (float)numericFoV.Value;
                byte[] bytes = BitConverter.GetBytes(fov);
                checkAndWrite((IntPtr)0x00655524, bytes, bytes.Length, new IntPtr());
                // SetFOV.CEA
                SingleCallInitialise();
                byte[] setfov = { 0x68, 0xD4, 0x6A, 0x6C, 0x00, 0x68, 0xE4, 0xCB, 0x96, 0x3F, 0xE8, 0x71, 0x90, 0xE9, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, setfov, setfov.Length, new IntPtr());
                byte[] injectionFlag = { 0x01 };
                checkAndWrite((IntPtr)0x00655510, injectionFlag, injectionFlag.Length, new IntPtr());

                message("FOV: " + numericFoV.Value.ToString());
            }
            else
            {
                // FoV.CEA
                byte[] bytes = { 0x8B, 0x05, 0x24, 0x55, 0x65, 0x00, 0x89, 0x45, 0x08, 0xD9, 0x45, 0x08, 0x8B, 0x4D, 0x0C, 0xE9, 0x18, 0x92, 0xE9, 0xFF };
                checkAndWrite((IntPtr)0x005F6760, bytes, bytes.Length, new IntPtr());

                //jump to injection
                byte[] bytes2 = { 0xE9, 0xD5, 0x6D, 0x16, 0x00, 0x90 };
                checkAndWrite((IntPtr)0x0048F986, bytes2, bytes2.Length, new IntPtr());

                //fov value
                float fov = (float)(3.141592653589793 / 180) * (float)numericFoV.Value;
                byte[] bytes3 = BitConverter.GetBytes(fov);
                checkAndWrite((IntPtr)0x00655524, bytes3, bytes3.Length, new IntPtr());

                //fov patched
                fovPatch[0] = 0x01;
                checkAndWrite((IntPtr)0x00655520, fovPatch, fovPatch.Length, new IntPtr());

                message("FOV: " + numericFoV.Value.ToString());
            }
        }

        private void ballMode_CheckedChanged(object sender, EventArgs e)
        {

            if (ballMode.Checked == true)
            {
                if (listViewActors.SelectedItems.Count > 0)
                {
                    int i = listViewActors.SelectedItems[0].Index;
                    listViewActors.SelectedItems.Clear();
                    listViewActors.Items[i].Selected = true;
                }
                else
                    listViewActors.Items[0].Selected = true;
            }
            else
            {
                AdvancedActorCheat(false);
            }
        }

        private void SingleCallInitialise()
        {
            // Is single injections ready?
            byte[] init = { 0x00 };
            init = checkAndRead((IntPtr)0x005F6880, init, 1, new IntPtr());
            //init = checkAndRead((IntPtr)0x005F6C00, init, 1, new IntPtr());
            if (init[0] == 0)
            {
                // InjectionPost.CEA

                byte[] ret = { 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, ret, ret.Length, new IntPtr());

                byte[] injectionPost = { 0x8B, 0x05, 0x10, 0x55, 0x65, 0x00, 0x83, 0xF8, 0x01, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xE8, 0x6C, 0x00, 0x00, 0x00, 0xC7, 0x05, 0x10, 0x55, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xB8, 0xA0, 0x6F, 0x00, 0xE9, 0x3C, 0x0F, 0xEB, 0xFF };
                checkAndWrite((IntPtr)0x005F6880, injectionPost, injectionPost.Length, new IntPtr());

                byte[] injectionPostJmp = { 0xE9, 0x9C, 0xF0, 0x14, 0x00 };
                checkAndWrite((IntPtr)0x004A77DF, injectionPostJmp, injectionPostJmp.Length, new IntPtr());
                 
                // InjectionPre.CEA
                checkAndWrite((IntPtr)0x005F6C80, ret, ret.Length, new IntPtr());
                
                byte[] injectionPre = { 0x8B, 0x05, 0x10, 0x55, 0x65, 0x00, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xE8, 0x6C, 0x00, 0x00, 0x00, 0xC7, 0x05, 0x10, 0x55, 0x65, 0x00, 0x01, 0x00, 0x00, 0x00, 0x8B, 0x15, 0xBC, 0x83, 0x6C, 0x00, 0xE9, 0xCE, 0x0B, 0xEB, 0xFF };
                checkAndWrite((IntPtr)0x005F6C00, injectionPre, injectionPre.Length, new IntPtr());

                byte[] injectionPreJmp = { 0xE9, 0x0A, 0xF4, 0x14, 0x00 };
                checkAndWrite((IntPtr)0x004A77F1, injectionPreJmp, injectionPreJmp.Length, new IntPtr());
            }
        }

        private void message(string message)
        {
            if (trainerText.Checked == true)
            {
                //Correct position of dbg text
                byte[] bytes = { 0xD1, 0xF8, 0x68, 0x80, 0x00, 0x00, 0x00, 0x83, 0xE8, 0x40, 0x90 };
                checkAndWrite((IntPtr)0x004A362B, bytes, bytes.Length, new IntPtr());

                //Copy text to dbg string 2 + 0 at end
                byte[] bytes2 = Encoding.ASCII.GetBytes(message);
                checkAndWrite((IntPtr)0x00642A94, bytes2, bytes2.Length + 1, new IntPtr());

                //Hide dbg string 2
                byte[] bytes3 = { 0x00 };
                checkAndWrite((IntPtr)0x00642A78, bytes3, bytes3.Length, new IntPtr());

                //Show time of dbg text (3.0)
                byte[] bytes4 = { 0x00, 0x00, 0xE0, 0x40 }; // 7.00
                checkAndWrite((IntPtr)0x00642038, bytes4, bytes4.Length, new IntPtr());
                
                //Restart timer
                timer.Stop();
                timer.Start();
            }

            playKeySound(Properties.Resources.moveselection);
        }

        private void timer_Tick(object sender, EventArgs e)
        {
            timer.Stop();

            //Restore show time of dbg text
            byte[] bytes4 = { 0x00, 0x00, 0x20, 0x41 }; // 10.00
            checkAndWrite((IntPtr)0x00642038, bytes4, bytes4.Length, new IntPtr());

            //Restore position of dbg text
            byte[] bytes = { 0x2B, 0xC2, 0x68, 0x80, 0x00, 0x00, 0x00, 0xD1, 0xF8, 0xF7, 0xD8 };
            checkAndWrite((IntPtr)0x004A362B, bytes, bytes.Length, new IntPtr());

            //Restore original dbg  text string 1
            byte[] bytes3 = { 0x42 };
            checkAndWrite((IntPtr)0x00642A78, bytes3, bytes3.Length, new IntPtr());

            //Restore original dbg  text string 2
            byte[] bytes2 = { 0x46, 0x6F, 0x67, 0x3A, 0x6D, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x2C, 0x20, 0x6D, 0x61, 0x78, 0x20, 0x25, 0x64, 0x2C, 0x20, 0x52, 0x47, 0x42, 0x28, 0x25, 0x64, 0x2C, 0x25, 0x64, 0x2C, 0x25, 0x64, 0x29, 0x00 };
            checkAndWrite((IntPtr)0x00642A94, bytes2, bytes2.Length, new IntPtr());
        }

        //#######################################################################################################################
        //Patcher
        private string getPathFromRegistry()
        {
            //Read path from registry
            string TazPath = (string)Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Infogrames Interactive\TazWanted\Release", "Location", null);
            if (TazPath == null)
            {
                // Search in x86 registry
                TazPath = (string)Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Infogrames Interactive\TazWanted\Release", "Location", null);
            }
            if (TazPath == null)
            {
                MessageBox.Show("Unable to find Taz Wanted game path in registy. Make sure that game installed properly or select path manually in Settings tab.", "Game path not found", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            if (TazPath == "")
            {
                MessageBox.Show("Taz Wanted game path registy value is empty. Make sure that game installed properly or select path manually in Settings tab.", "Game path not found", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            return TazPath;
        }



        private void patch_Click(object sender, EventArgs e)
        {
            try
            {
                // Kill existing process
                if (checkProcess())
                {
                    var result = MessageBox.Show("Another game instance is already running. Terminate?", "Patch Game", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (result == DialogResult.Yes)
                        killProcess();
                    else
                        return;
                }

                bool backuped = false;

                // Backup Taz.exe
                if (File.Exists(TazFolderPath + "\\Taz.exe.backup") == false)
                {
                    File.Copy(TazFolderPath + "\\Taz.exe", TazFolderPath + "\\Taz.exe.backup", true);
                    backuped = true;
                }

                // Check taz.dat
                if (File.Exists(TazFolderPath + "\\taz.dat") == false)
                {
                    //create empty dat file
                    File.WriteAllBytes(TazFolderPath + "\\taz.dat", Properties.Resources.taz);
                }

                // Backup taz.dat
                if (File.Exists(TazFolderPath + "\\taz.dat.backup") == false)
                {
                    File.Copy(TazFolderPath + "\\taz.dat", TazFolderPath + "\\taz.dat.backup", true);
                    backuped = true;
                }

                // Check TazWanted.sav
                if (File.Exists(TazFolderPath + "\\TazWanted.sav") == false)
                {
                    //create empty sav file
                    File.WriteAllBytes(TazFolderPath + "\\TazWanted.sav", Properties.Resources.TazWanted);
                }

                // Taz.exe patches

                using (var file = new FileStream(TazFolderPath + "\\Taz.exe", FileMode.Open, FileAccess.ReadWrite))
                {
                    // NoCD 
                    if (noCD.Checked && noCD.Enabled)
                    {
                        byte[] nocd = new byte[] { 0x33, 0xC0, 0x40, 0xC3 };
                        file.Position = 0xA1F10;
                        file.Write(nocd, 0, nocd.Length);
                    }
                    else
                    {

                        byte[] nocd = new byte[] { 0x81, 0xEC, 0x38, 0x01 };
                        file.Position = 0xA1F10;
                        file.Write(nocd, 0, nocd.Length);

                    }

                    // 4gb
                    if (patch4gb.Checked && patch4gb.Enabled)
                    {
                        file.Position = 0x12E;
                        file.WriteByte(0x2F);
                    }
                    else
                    {
                        file.Position = 0x12E;
                        file.WriteByte(0x0F);
                    }

                    // Subtitles
                    if (cutsceneSubtitles.Checked && cutsceneSubtitles.Enabled)
                    {
                        byte[] intro = new byte[] { 0xE8, 0x09, 0x6F, 0x00, 0x00 };
                        file.Position = 0xD2D92;
                        file.Write(intro, 0, intro.Length);

                        byte[] mute = new byte[] { 0x3D, 0xD0, 0x42, 0x00, 0x00, 0x0F, 0x8C, 0x0B, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x43, 0x00, 0x00, 0x0F, 0x8E, 0x0B, 0x00, 0x00, 0x00, 0x3D, 0x80, 0x31, 0x00, 0x00, 0x0F, 0x8D, 0x6E, 0x54, 0xF5, 0xFF, 0x68, 0x30, 0x7E, 0x6C, 0x00, 0xE9, 0x37, 0x54, 0xF5, 0xFF };
                        file.Position = 0x184BC0;
                        file.Write(mute, 0, mute.Length);

                        byte[] muteinj = new byte[] { 0xE9, 0xA0, 0xAB, 0x0A, 0x00, 0x90, 0x90 };
                        file.Position = 0xDA01B;
                        file.Write(muteinj, 0, muteinj.Length);

                        byte[] data = new byte[] { 0x74, 0x72, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x69, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x04, 0x00, 0x00, 0x5C, 0x8F, 0xDA, 0x40, 0x63, 0x69, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE3, 0x03, 0x00, 0x00, 0x9A, 0x99, 0x05, 0x41, 0x63, 0x69, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCB, 0x04, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x63, 0x69, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x34, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0xA4, 0x70, 0xD5, 0x40, 0x63, 0x69, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x35, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCD, 0x04, 0x00, 0x00, 0x6E, 0xA3, 0x1E, 0x41, 0x63, 0x69, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x36, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9F, 0x03, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0x63, 0x69, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x37, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x04, 0x00, 0x00, 0x52, 0xB8, 0x2A, 0x41, 0x63, 0x69, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x38, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCF, 0x04, 0x00, 0x00, 0x52, 0xB8, 0x2A, 0x41, 0x63, 0x69, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x39, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x04, 0x00, 0x00, 0xB6, 0xF3, 0x97, 0x40, 0x63, 0x69, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD1, 0x04, 0x00, 0x00, 0xEC, 0x51, 0x90, 0x40, 0x63, 0x69, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x04, 0x00, 0x00, 0xC3, 0x64, 0x0E, 0x40, 0x63, 0x69, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x03, 0x00, 0x00, 0x27, 0xA0, 0x91, 0x3F, 0x63, 0x69, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x34, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x04, 0x00, 0x00, 0xEC, 0x51, 0x78, 0x40, 0x63, 0x69, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x35, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x04, 0x00, 0x00, 0xD7, 0xA3, 0x88, 0x40, 0x63, 0x69, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x36, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1, 0x04, 0x00, 0x00, 0xDE, 0x71, 0xA4, 0x40, 0x63, 0x69, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x37, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x03, 0x00, 0x00, 0x7B, 0x14, 0xF6, 0x40, 0x63, 0x69, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x38, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x04, 0x00, 0x00, 0xB4, 0x59, 0xAD, 0x40, 0x63, 0x69, 0x74, 0x79, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x03, 0x00, 0x00, 0x8F, 0xC2, 0x35, 0x3F, 0x63, 0x69, 0x74, 0x79, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x04, 0x00, 0x00, 0x1F, 0x85, 0x2B, 0x3F, 0x63, 0x69, 0x74, 0x79, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9A, 0x03, 0x00, 0x00, 0x9D, 0x80, 0x86, 0x3F, 0x63, 0x69, 0x74, 0x79, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x35, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9B, 0x03, 0x00, 0x00, 0x94, 0x87, 0x45, 0x40, 0x63, 0x69, 0x74, 0x79, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x36, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x03, 0x00, 0x00, 0xF6, 0x17, 0xA2, 0x41, 0x67, 0x61, 0x6D, 0x65, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x2D, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA1, 0x04, 0x00, 0x00, 0x8F, 0xC2, 0x75, 0x40, 0x67, 0x61, 0x6D, 0x65, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA3, 0x04, 0x00, 0x00, 0x77, 0x2D, 0xA9, 0x3F, 0x67, 0x61, 0x6D, 0x65, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x34, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA4, 0x04, 0x00, 0x00, 0x1F, 0x85, 0x0B, 0x40, 0x67, 0x61, 0x6D, 0x65, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x35, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA5, 0x04, 0x00, 0x00, 0xD7, 0xA3, 0x50, 0x40, 0x67, 0x61, 0x6D, 0x65, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x36, 0x2D, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x04, 0x00, 0x00, 0x34, 0x80, 0x0B, 0x40, 0x67, 0x61, 0x6D, 0x65, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x36, 0x2D, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x04, 0x00, 0x00, 0x58, 0xCA, 0x1E, 0x40, 0x67, 0x61, 0x6D, 0x65, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x36, 0x2D, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x04, 0x00, 0x00, 0x48, 0x50, 0x9C, 0x3F, 0x67, 0x61, 0x6D, 0x65, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x39, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAC, 0x04, 0x00, 0x00, 0xC9, 0xE5, 0x47, 0x40, 0x67, 0x61, 0x6D, 0x65, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x03, 0x00, 0x00, 0x88, 0xF4, 0x1F, 0x40, 0x67, 0x61, 0x6D, 0x65, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCF, 0x03, 0x00, 0x00, 0x84, 0x0D, 0x85, 0x40, 0x67, 0x61, 0x6D, 0x65, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x34, 0x2D, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x6F, 0x9F, 0x40, 0x67, 0x61, 0x6D, 0x65, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x03, 0x00, 0x00, 0xD8, 0xF0, 0x38, 0x40, 0x67, 0x61, 0x6D, 0x65, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x03, 0x00, 0x00, 0x37, 0x89, 0xB9, 0x3F, 0x67, 0x61, 0x6D, 0x65, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x04, 0x00, 0x00, 0x03, 0x09, 0xE2, 0x3F, 0x67, 0x61, 0x6D, 0x65, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x35, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x03, 0x00, 0x00, 0x9C, 0xA2, 0x43, 0x40, 0x67, 0x61, 0x6D, 0x65, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x37, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCB, 0x03, 0x00, 0x00, 0xEE, 0x5A, 0xAE, 0x40, 0x67, 0x61, 0x6D, 0x65, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x39, 0x20, 0x61, 0x6C, 0x74, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x04, 0x00, 0x00, 0x78, 0x7A, 0xED, 0x3F, 0x67, 0x61, 0x6D, 0x65, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x30, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x03, 0x00, 0x00, 0x2B, 0xF6, 0xD7, 0x3F, 0x67, 0x61, 0x6D, 0x65, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x31, 0x20, 0x61, 0x6C, 0x74, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0xCD, 0x03, 0x00, 0x00, 0xBB, 0x27, 0xA3, 0x40, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x04, 0x00, 0x00, 0x3D, 0x0A, 0x57, 0x40, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x03, 0x00, 0x00, 0xAA, 0x60, 0x74, 0x3F, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x35, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x03, 0x00, 0x00, 0xAE, 0x47, 0xA1, 0x3F, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x36, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xED, 0x03, 0x00, 0x00, 0x5C, 0x8F, 0x85, 0x41, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x37, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB5, 0x03, 0x00, 0x00, 0x1F, 0x85, 0x2B, 0x3F, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x38, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x04, 0x00, 0x00, 0xD3, 0x4D, 0xCA, 0x40, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x03, 0x00, 0x00, 0xA3, 0x01, 0x92, 0x40, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB6, 0x03, 0x00, 0x00, 0x7B, 0x14, 0xAE, 0x3F, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xED, 0x04, 0x00, 0x00, 0x38, 0x67, 0x86, 0x40, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x34, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF, 0x03, 0x00, 0x00, 0x52, 0xB8, 0x9E, 0x3F, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x36, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x04, 0x00, 0x00, 0xD5, 0xE7, 0xF6, 0x40, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x37, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x9C, 0xC4, 0x8C, 0x40, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF1, 0x03, 0x00, 0x00, 0xB8, 0x1E, 0x45, 0x40, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF2, 0x03, 0x00, 0x00, 0xA5, 0x4E, 0x54, 0x40, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x03, 0x00, 0x00, 0x3D, 0x0A, 0x57, 0x3F, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x34, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB7, 0x03, 0x00, 0x00, 0xB8, 0x1E, 0x85, 0x3F, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x35, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB8, 0x03, 0x00, 0x00, 0xB3, 0x0C, 0xDB, 0x40, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x36, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x03, 0x00, 0x00, 0xAD, 0x69, 0x1A, 0x40, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x37, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB9, 0x03, 0x00, 0x00, 0xAE, 0x47, 0xE1, 0x3E, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x38, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA, 0x03, 0x00, 0x00, 0x00, 0x00, 0x70, 0x40, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x39, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5, 0x03, 0x00, 0x00, 0x98, 0x4C, 0x45, 0x40, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x30, 0x61, 0x6C, 0x74, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0xF6, 0x03, 0x00, 0x00, 0xAE, 0x47, 0xE1, 0x3E, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF7, 0x03, 0x00, 0x00, 0x14, 0xAE, 0x57, 0x40, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB, 0x03, 0x00, 0x00, 0xE1, 0x7A, 0x70, 0x40, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x03, 0x00, 0x00, 0x42, 0xCF, 0xDE, 0x3F, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x35, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x04, 0x00, 0x00, 0x5C, 0x8F, 0x72, 0x40, 0x73, 0x61, 0x6D, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x36, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBE, 0x03, 0x00, 0x00, 0x25, 0x75, 0x52, 0x3F, 0x74, 0x61, 0x73, 0x6D, 0x61, 0x6E, 0x69, 0x61, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAD, 0x03, 0x00, 0x00, 0x47, 0x03, 0xC2, 0x40, 0x74, 0x61, 0x73, 0x6D, 0x61, 0x6E, 0x69, 0x61, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x34, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAE, 0x03, 0x00, 0x00, 0x1F, 0x85, 0xA3, 0x40, 0x74, 0x61, 0x73, 0x6D, 0x61, 0x6E, 0x69, 0x61, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x35, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x03, 0x00, 0x00, 0x18, 0x26, 0x43, 0x3F, 0x74, 0x61, 0x73, 0x6D, 0x61, 0x6E, 0x69, 0x61, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x36, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x03, 0x00, 0x00, 0x81, 0x95, 0xD3, 0x40, 0x74, 0x61, 0x73, 0x6D, 0x61, 0x6E, 0x69, 0x61, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x37, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1, 0x03, 0x00, 0x00, 0xD8, 0xF0, 0x64, 0x3F, 0x74, 0x77, 0x65, 0x65, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0xEE, 0x04, 0x00, 0x00, 0xFB, 0xCB, 0xEA, 0x40, 0x74, 0x77, 0x65, 0x65, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x34, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0xD5, 0xE7, 0x3A, 0x3F, 0x74, 0x77, 0x65, 0x65, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x35, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0xC1, 0x03, 0x00, 0x00, 0xD7, 0xA3, 0xF0, 0x3E, 0x74, 0x77, 0x65, 0x65, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x36, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x31, 0x04, 0x00, 0x00, 0x3D, 0x0A, 0x1B, 0x41, 0x74, 0x77, 0x65, 0x65, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x37, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0xC2, 0x03, 0x00, 0x00, 0xA4, 0x70, 0xA5, 0x40, 0x74, 0x77, 0x65, 0x65, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0xC3, 0x03, 0x00, 0x00, 0x1F, 0x85, 0xEB, 0x3F, 0x74, 0x77, 0x65, 0x65, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x32, 0x04, 0x00, 0x00, 0x3A, 0x92, 0xD3, 0x3F, 0x74, 0x77, 0x65, 0x65, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x33, 0x04, 0x00, 0x00, 0x64, 0xCC, 0x05, 0x40, 0x74, 0x77, 0x65, 0x65, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x35, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0xC4, 0x03, 0x00, 0x00, 0x13, 0xF2, 0x29, 0x40, 0x74, 0x77, 0x65, 0x65, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x37, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x26, 0x04, 0x00, 0x00, 0xAE, 0x47, 0x81, 0x3F, 0x74, 0x77, 0x65, 0x65, 0x74, 0x79, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x39, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x27, 0x04, 0x00, 0x00, 0x48, 0xE1, 0x6A, 0x40, 0x77, 0x65, 0x73, 0x74, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x03, 0x00, 0x00, 0x30, 0x2A, 0x81, 0x3F, 0x77, 0x65, 0x73, 0x74, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA9, 0x03, 0x00, 0x00, 0xD7, 0xA3, 0x80, 0x40, 0x77, 0x65, 0x73, 0x74, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0x03, 0x00, 0x00, 0x7A, 0xC7, 0x79, 0x3F, 0x77, 0x65, 0x73, 0x74, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x34, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0x03, 0x00, 0x00, 0xAE, 0x47, 0x41, 0x40, 0x77, 0x65, 0x73, 0x74, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x35, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAB, 0x03, 0x00, 0x00, 0x1F, 0x85, 0x2B, 0x3F, 0x77, 0x65, 0x73, 0x74, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x36, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x52, 0xB8, 0xF6, 0x40, 0x77, 0x65, 0x73, 0x74, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x37, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE9, 0x03, 0x00, 0x00, 0x7B, 0x14, 0xD6, 0x40, 0x77, 0x65, 0x73, 0x74, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x38, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x03, 0x00, 0x00, 0x85, 0xEB, 0x4D, 0x41, 0x77, 0x65, 0x73, 0x74, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x39, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x03, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x77, 0x65, 0x73, 0x74, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x03, 0x00, 0x00, 0x09, 0x1B, 0x3E, 0x3F, 0x77, 0x65, 0x73, 0x74, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAC, 0x03, 0x00, 0x00, 0xA9, 0x13, 0x70, 0x3F, 0x77, 0x65, 0x73, 0x74, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA1, 0x03, 0x00, 0x00, 0x33, 0x33, 0x23, 0x40, 0x77, 0x65, 0x73, 0x74, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA3, 0x03, 0x00, 0x00, 0x25, 0x06, 0x1D, 0x40, 0x7A, 0x6F, 0x6F, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0x03, 0x00, 0x00, 0x8B, 0x6C, 0x67, 0x3F, 0x7A, 0x6F, 0x6F, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0x6D, 0x56, 0x79, 0x40, 0x7A, 0x6F, 0x6F, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x34, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDA, 0x03, 0x00, 0x00, 0x52, 0xB8, 0x3E, 0x40, 0x7A, 0x6F, 0x6F, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x35, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x03, 0x00, 0x00, 0x4A, 0x0C, 0x32, 0x3F, 0x7A, 0x6F, 0x6F, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x36, 0x5F, 0x61, 0x6C, 0x74, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0xDB, 0x03, 0x00, 0x00, 0xEC, 0x51, 0xD8, 0x3F, 0x7A, 0x6F, 0x6F, 0x62, 0x6F, 0x73, 0x73, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x37, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x03, 0x00, 0x00, 0x02, 0x2B, 0x04, 0x41, 0x7A, 0x6F, 0x6F, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDD, 0x03, 0x00, 0x00, 0xC3, 0xF5, 0x98, 0x40, 0x7A, 0x6F, 0x6F, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDE, 0x03, 0x00, 0x00, 0xE1, 0x7A, 0x54, 0x40, 0x7A, 0x6F, 0x6F, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x34, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDF, 0x03, 0x00, 0x00, 0x96, 0xB2, 0x82, 0x40, 0x7A, 0x6F, 0x6F, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x35, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0xA4, 0x70, 0xDD, 0x3F, 0x7A, 0x6F, 0x6F, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x36, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0xED, 0x0D, 0xE6, 0x3F, 0x7A, 0x6F, 0x6F, 0x62, 0x6F, 0x73, 0x73, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x37, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0x04, 0x00, 0x00, 0xFC, 0xA9, 0x13, 0x41, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x03, 0x00, 0x00, 0xF6, 0x28, 0x84, 0x40, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD1, 0x03, 0x00, 0x00, 0x3D, 0x0A, 0x0F, 0x41, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x03, 0x00, 0x00, 0x66, 0x66, 0xE6, 0x3E, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x34, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x03, 0x00, 0x00, 0xC9, 0xE5, 0xF9, 0x40, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x35, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD3, 0x03, 0x00, 0x00, 0xA5, 0x2C, 0x1B, 0x41, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x36, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x03, 0x00, 0x00, 0xCD, 0xCC, 0x4C, 0x3F, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x37, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x03, 0x00, 0x00, 0xAE, 0xD8, 0xF7, 0x40, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x39, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x03, 0x00, 0x00, 0x33, 0x33, 0xDD, 0x40, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x30, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD5, 0x03, 0x00, 0x00, 0x64, 0x5D, 0x94, 0x40, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x03, 0x00, 0x00, 0x20, 0xD2, 0x07, 0x40, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x32, 0x5F, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0x07, 0xCE, 0x01, 0x40, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x32, 0x5F, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x03, 0x00, 0x00, 0xB8, 0xAF, 0xBB, 0x3F, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x32, 0x5F, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x03, 0x00, 0x00, 0x0A, 0xD7, 0x23, 0x3F, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x32, 0x5F, 0x34, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x03, 0x00, 0x00, 0x8A, 0x8E, 0xCC, 0x3F, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x32, 0x5F, 0x36, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x03, 0x00, 0x00, 0x29, 0x5C, 0x0F, 0x40, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x32, 0x5F, 0x38, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x03, 0x00, 0x00, 0x8F, 0xC2, 0x95, 0x3F, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x32, 0x5F, 0x39, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x03, 0x00, 0x00, 0xEC, 0x51, 0xA0, 0x40, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x32, 0x5F, 0x31, 0x30, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x03, 0x00, 0x00, 0x0A, 0xD7, 0x43, 0x40, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x32, 0x5F, 0x31, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x03, 0x00, 0x00, 0x0E, 0xBE, 0x30, 0x3F, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x32, 0x5F, 0x31, 0x35, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x03, 0x00, 0x00, 0x71, 0x3D, 0x92, 0x40, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x32, 0x5F, 0x31, 0x36, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD9, 0x03, 0x00, 0x00, 0x03, 0x09, 0x6E, 0x40, 0x63, 0x69, 0x74, 0x79, 0x68, 0x75, 0x62, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x30, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x03, 0x00, 0x00, 0x38, 0x11, 0xEB, 0x3F, 0x63, 0x69, 0x74, 0x79, 0x68, 0x75, 0x62, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x31, 0x30, 0x5F, 0x61, 0x6C, 0x74, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x9E, 0x03, 0x00, 0x00, 0x95, 0xB9, 0xD7, 0x3F, 0x63, 0x69, 0x74, 0x79, 0x68, 0x75, 0x62, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x39, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9D, 0x03, 0x00, 0x00, 0x35, 0x96, 0x0B, 0x40, 0x63, 0x69, 0x74, 0x79, 0x68, 0x75, 0x62, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x39, 0x5F, 0x61, 0x6C, 0x74, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x9D, 0x03, 0x00, 0x00, 0x48, 0xC0, 0x37, 0x40, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x69, 0x6E, 0x74, 0x72, 0x6F, 0x5F, 0x39, 0x5F, 0x61, 0x6C, 0x74, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x83, 0x03, 0x00, 0x00, 0xE1, 0xEE, 0x50, 0x40, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x32, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x03, 0x00, 0x00, 0x95, 0x2D, 0x05, 0x40, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x32, 0x5F, 0x61, 0x6C, 0x74, 0x5F, 0x31, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x92, 0x03, 0x00, 0x00, 0x59, 0x33, 0x0D, 0x40, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x35, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x03, 0x00, 0x00, 0x8D, 0x96, 0x7B, 0x3F, 0x7A, 0x6F, 0x6F, 0x68, 0x75, 0x62, 0x6F, 0x75, 0x74, 0x72, 0x6F, 0x5F, 0x35, 0x5F, 0x61, 0x6C, 0x74, 0x5F, 0x33, 0x2E, 0x77, 0x61, 0x76, 0x00, 0x94, 0x03, 0x00, 0x00, 0x44, 0x8A, 0x6D, 0x3F };
                        file.Position = 0x184c00;
                        file.Write(data, 0, data.Length);

                        byte[] code = new byte[] { 0x8B, 0x44, 0x24, 0x04, 0x83, 0xC0, 0x12, 0x8B, 0x08, 0x81, 0xF9, 0x70, 0x6C, 0x61, 0x79, 0x0F, 0x85, 0x58, 0x00, 0x00, 0x00, 0x83, 0xC0, 0x05, 0x8B, 0xD8, 0x68, 0x00, 0x4C, 0x58, 0x00, 0x53, 0xE8, 0x1B, 0x5A, 0x05, 0x00, 0x83, 0xC4, 0x08, 0x85, 0xC0, 0x0F, 0x84, 0x3D, 0x00, 0x00, 0x00, 0xB9, 0x00, 0x4C, 0x58, 0x00, 0x83, 0xC1, 0x20, 0x8B, 0x01, 0x85, 0xC0, 0x0F, 0x84, 0x2B, 0x00, 0x00, 0x00, 0x51, 0x51, 0x53, 0xE8, 0xB6, 0x20, 0x06, 0x00, 0x83, 0xC4, 0x08, 0x59, 0x85, 0xC0, 0x75, 0xE3, 0x6A, 0x00, 0x83, 0xC1, 0x1C, 0x8B, 0x01, 0x50, 0x83, 0xE9, 0x04, 0x8B, 0x01, 0x50, 0xE8, 0x3B, 0x3D, 0xF5, 0xFF, 0x83, 0xC4, 0x0C, 0xE9, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xCE, 0x14, 0xFE, 0xFF, 0xE9, 0x32, 0xC2, 0xFD, 0xFF };
                        file.Position = 0x185e00;
                        file.Write(code, 0, code.Length);

                        byte[] inj = new byte[] { 0xE9, 0x57, 0x3D, 0x02, 0x00 };
                        file.Position = 0x1620A4;
                        file.Write(inj, 0, inj.Length);

                    }
                    else
                    {
                        // Remove injections
                        byte[] intro = new byte[] { 0xB8, 0x01, 0x00, 0x00, 0x00 };
                        file.Position = 0xD2D92;
                        file.Write(intro, 0, intro.Length);

                        byte[] muteinj = new byte[] { 0x74, 0x32, 0x68, 0x30, 0x7E, 0x6C, 0x00 };
                        file.Position = 0xDA01B;
                        file.Write(muteinj, 0, muteinj.Length);

                        byte[] inj = new byte[] { 0xE8, 0x97, 0x52, 0x00, 0x00 };
                        file.Position = 0x1620A4;
                        file.Write(inj, 0, inj.Length);
                    }


                    // Draw distance
                    if (disableDrawDistance.Checked && disableDrawDistance.Enabled)
                    {

                        byte[] bytes = new byte[] { 0xFF, 0xFF, 0xEB }; // 00 00 75
                        file.Position = 0x74FC4;
                        file.WriteByte(bytes[0]);
                        file.WriteByte(bytes[1]);
                        file.Position = 0x74FD0;
                        file.WriteByte(bytes[2]);

                        byte[] bytes0 = { 0x00, 0x00, 0x80, 0x7F };
                        byte[] bytes1 = { 0xE8, 0x66, 0x5F, 0x00 };
                        byte[] bytes2 = { 0xD9, 0xE8, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 };
                        file.Position = 0x1F66E8;
                        file.Write(bytes0, 0, bytes0.Length);
                        file.Position = 0x7E00B;
                        file.Write(bytes1, 0, bytes1.Length);
                        file.Position = 0x7E016;
                        file.Write(bytes2, 0, bytes2.Length);
                    }
                    else
                    {
                        // Restore draw distace
                        byte[] bytes = new byte[] { 0x00, 0x00, 0x75 };
                        file.Position = 0x74FC4;
                        file.WriteByte(bytes[0]);
                        file.WriteByte(bytes[1]);
                        file.Position = 0x74FD0;
                        file.WriteByte(bytes[2]);

                        // Restore effects draw distace
                        byte[] bytes0 = { 0x00, 0x00, 0x00, 0x00 };
                        byte[] bytes1 = { 0xF4, 0x75, 0x5F, 0x00 };
                        byte[] bytes2 = { 0xD9, 0x46, 0x3C, 0xD8, 0x0D, 0xE4, 0x7E, 0x5F, 0x00, 0xD9, 0xFE };
                        file.Position = 0x1F66E8;
                        file.Write(bytes0, 0, bytes0.Length);
                        file.Position = 0x7E00B;
                        file.Write(bytes1, 0, bytes1.Length);
                        file.Position = 0x7E016;
                        file.Write(bytes2, 0, bytes2.Length);
                    }

                    // Fog
                    // No fog
                    if (fogComboBox.SelectedIndex == 0 || !fogComboBox.Enabled)
                    {
                        // Restore fstp instructions
                        byte[] stock = new byte[] { 0xD9, 0x1D, 0xBC, 0x4C, 0x70, 0x00, 0xD9, 0x1D, 0xC4, 0x4C, 0x70, 0x00 };
                        file.Position = 0x8F464;
                        file.Write(stock, 0, stock.Length);
                    }
                    // Xbox/GameCube fog
                    else if (this.fogComboBox.SelectedIndex == 1)
                    {
                        // Skip fstp instructions
                        byte[] nops = new byte[] { 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 };
                        file.Position = 0x8F464;
                        file.Write(nops, 0, nops.Length);
                    }
                    // PlayStation 2 fog
                    else if (this.fogComboBox.SelectedIndex == 2)
                    {
                        // Code Injection
                        byte[] injection = new byte[] { 0xC7, 0x05, 0xBC, 0x4C, 0x70, 0x00, 0x00, 0x40, 0x9C, 0x44, 0x50, 0xB8, 0x00, 0x60, 0xEA, 0x46, 0x3B, 0x05, 0xC4, 0x4C, 0x70, 0x00, 0x58, 0x0F, 0x87, 0x53, 0x8C, 0xE9, 0xFF, 0xC7, 0x05, 0xC4, 0x4C, 0x70, 0x00, 0x00, 0x60, 0xEA, 0x46, 0xE9, 0x44, 0x8C, 0xE9, 0xFF };
                        file.Position = 0x1F6800;
                        file.Write(injection, 0, injection.Length);

                        // Jump to Injection
                        byte[] jmp = new byte[] { 0xE9, 0x97, 0x73, 0x16, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 };
                        file.Position = 0x8F464;
                        file.Write(jmp, 0, jmp.Length);
                    }


                    // Resolution and windowed
                    if (changeResolution.Checked)
                    {
                        byte[] width = BitConverter.GetBytes(UInt32.Parse(this.width.Text));
                        byte[] height = BitConverter.GetBytes(UInt32.Parse(this.height.Text));

                        // Resolution in Taz.exe
                        file.Position = 0x8F134;
                        file.WriteByte(width[0]);
                        file.WriteByte(width[1]);
                        file.WriteByte(width[2]);
                        file.WriteByte(width[3]);
                        file.Position = 0x8F13E;
                        file.WriteByte(height[0]);
                        file.WriteByte(height[1]);
                        file.WriteByte(height[2]);
                        file.WriteByte(height[3]);
                    }
                    else
                    {
                        //restore resolution in Taz.exe
                        file.Position = 0x8F134;
                        file.WriteByte(0x80);
                        file.WriteByte(0x02);
                        file.WriteByte(0x00);
                        file.WriteByte(0x00);
                        file.Position = 0x8F13E;
                        file.WriteByte(0xE0);
                        file.WriteByte(0x01);
                        file.WriteByte(0x00);
                        file.WriteByte(0x00);
                    }

                    // Aspect ratio
                    if (aspectRatio.Checked)
                    {
                        byte aspect1 = Byte.Parse(this.aspect1.Text);
                        byte aspect2 = Byte.Parse(this.aspect2.Text);

                        // Aspect
                        file.Position = 0x8FD76;
                        file.WriteByte(aspect1);
                        file.Position = 0x8FD7D;
                        file.WriteByte(aspect2);
                        // Override widescreen
                        file.Position = 0x8F860;
                        file.WriteByte(0xB2); // mov dl,01
                        file.WriteByte(0x01);
                        file.WriteByte(0x90); // nops
                        file.WriteByte(0x90);
                        file.WriteByte(0x90);
                        file.WriteByte(0x90);
                    }
                    else
                    {
                        // Restore aspect ratio
                        // 4:3 aspect
                        file.Position = 0x8FD76;
                        file.WriteByte(0x04);
                        file.Position = 0x8FD7D;
                        file.WriteByte(0x03);
                        // Override widescreen
                        file.Position = 0x8F860;
                        file.WriteByte(0x8A); // mov dl, byte ptr dword_6F4A38
                        file.WriteByte(0x15);
                        file.WriteByte(0x38);
                        file.WriteByte(0x4A);
                        file.WriteByte(0x6F);
                        file.WriteByte(0x00);

                    }

                    // Texture filtering
                    if (filtering.Checked && filtering.Enabled)
                    {
                        file.Position = 0x255E00;
                        file.WriteByte(0x01);
                        file.Position = 0x255E04;
                        file.WriteByte(0x01);
                    }
                    else
                    {
                        // Restore linear filtering
                        file.Position = 0x255E00;
                        file.WriteByte(0x02);
                        file.Position = 0x255E04;
                        file.WriteByte(0x02);
                    }

                    // Warning banner time and videos
                    if (skips.Checked && skips.Enabled)
                    {
                        file.Position = 0x8F07D;
                        file.WriteByte(0x20);
                        file.WriteByte(0x00);
                        file.WriteByte(0x40);

                        // Disable videos (Skip promo)
                        if (Directory.Exists(TazFolderPath + "\\!Videos") == false && Directory.Exists(TazFolderPath + "\\Videos") == true)
                            Directory.Move(TazFolderPath + "\\Videos", TazFolderPath + "\\!Videos");
                    }
                    else
                    {
                        // Restore warning banner time and videos
                        file.Position = 0x8F07D;
                        file.WriteByte(0xF4);
                        file.WriteByte(0x73);
                        file.WriteByte(0x5F);

                        // Restore videos
                        if (Directory.Exists(TazFolderPath + "\\Videos") == false && Directory.Exists(TazFolderPath + "\\!Videos") == true)
                            Directory.Move(TazFolderPath + "\\!Videos", TazFolderPath + "/Videos");
                    }

                    // Mod Loader
                    if (mods.Checked && mods.Enabled)
                    {
                        // Create mods directory
                        if (Directory.Exists(TazFolderPath + "\\Mods") == false)
                            Directory.CreateDirectory(TazFolderPath + "\\Mods");

                        // Patch search path (mods\)
                        file.Position = 0x2412C4;
                        byte[] searchpath = { 0x6D, 0x6F, 0x64, 0x73, 0x5C, 0x00, 0x00 };
                        file.Write(searchpath, 0, searchpath.Length);

                    }
                    else
                    {
                        // Patch search path (..\paks)
                        file.Position = 0x2412C4;
                        byte[] searchpath = { 0x2E, 0x2E, 0x5C, 0x70, 0x61, 0x6B, 0x73 };
                        file.Write(searchpath, 0, searchpath.Length);
                        /*
                        // Restore LoadGenericObjects
                        file.Position = 0xD3690;
                        byte[] ldgenobjjmp1 = { 0x8B, 0x44 };
                        file.Write(ldgenobjjmp1, 0, ldgenobjjmp1.Length);

                        file.Position = 0xD38F0;
                        byte[] ldgenobjjmp2 = { 0xC3, 0x6A };
                        file.Write(ldgenobjjmp2, 0, ldgenobjjmp2.Length);

                        file.Position = 0xD3962;
                        byte[] ldgenobjjmp3 = { 0xC3, 0x6A };
                        file.Write(ldgenobjjmp3, 0, ldgenobjjmp3.Length);

                        file.Position = 0xD39BF;
                        file.WriteByte(0xC3);

                        // LoadGenericObjects Pak names
                        file.Position = 0xD3940;
                        byte[] ghostoffset = { 0xCC, 0x70, 0x64, 0x00 };
                        file.Write(ghostoffset, 0, ghostoffset.Length);

                        file.Position = 0xD393E;
                        file.WriteByte(0x00);
                        */
                    }

                    // Fps cap
                    if (limitFPS.Checked && limitFPS.Enabled)
                    {
                        // FrameLimiter.CEA
                        file.Position = 0x1F6700;
                        byte[] bytes = { 0xE8, 0x0B, 0x9A, 0xE9, 0xFF, 0xE8, 0xE6, 0x1E, 0xF8, 0xFF, 0x52, 0x50, 0x8B, 0x15, 0x0C, 0x55, 0x65, 0x00, 0x8B, 0x05, 0x08, 0x55, 0x65, 0x00, 0x52, 0x50, 0xE8, 0xE1, 0x1F, 0xF8, 0xFF, 0x83, 0xC4, 0x10, 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x00, 0x52, 0x50, 0xE8, 0x7D, 0x1F, 0xF8, 0xFF, 0x83, 0xC4, 0x10, 0xD8, 0x1D, 0x04, 0x55, 0x65, 0x00, 0xDF, 0xE0, 0xF6, 0xC4, 0x01, 0x75, 0xC2, 0xE8, 0xA8, 0x1E, 0xF8, 0xFF, 0x89, 0x15, 0x0C, 0x55, 0x65, 0x00, 0xA3, 0x08, 0x55, 0x65, 0x00, 0xE9, 0x99, 0x10, 0xEB, 0xFF };
                        file.Write(bytes, 0, bytes.Length);

                        //jump to injection
                        file.Position = 0xA77EC;
                        byte[] bytes2 = { 0xE9, 0x0F, 0xEF, 0x14, 0x00 };
                        file.Write(bytes2, 0, bytes2.Length);

                        //fps value
                        float miliseconds = (1000 / (float)numericFpsCap.Value) / 1000;
                        file.Position = 0x255504;
                        byte[] bytes3 = BitConverter.GetBytes(miliseconds);
                        file.Write(bytes3, 0, bytes3.Length);

                        //fps patched
                        file.Position = 0x255500;
                        byte[] fpsPatch = { 0x01 };
                        file.Write(fpsPatch, 0, fpsPatch.Length);
                    }
                    else
                    {
                        //restore fps injeciton
                        file.Position = 0x1F6700;
                        byte[] bytes = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                        file.Write(bytes, 0, bytes.Length);

                        //restore jump to injection
                        file.Position = 0xA77EC;
                        byte[] bytes2 = { 0xE8, 0x1F, 0x89, 0xFE, 0xFF };
                        file.Write(bytes2, 0, bytes2.Length);

                        //restore fps value
                        file.Position = 0x255504;
                        byte[] bytes3 = { 0x00, 0x00, 0x00, 0x00 };
                        file.Write(bytes3, 0, bytes3.Length);

                        //fps unpatched
                        file.Position = 0x255500;
                        byte[] fpsPatch = { 0x00 };
                        file.Write(fpsPatch, 0, fpsPatch.Length);
                    }

                    // Fov
                    if (checkBoxFoV.Checked && checkBoxFoV.Enabled)
                    {
                        // FoV.CEA
                        file.Position = 0x1F6760;
                        byte[] bytes = { 0x8B, 0x05, 0x24, 0x55, 0x65, 0x00, 0x89, 0x45, 0x08, 0xD9, 0x45, 0x08, 0x8B, 0x4D, 0x0C, 0xE9, 0x18, 0x92, 0xE9, 0xFF };
                        file.Write(bytes, 0, bytes.Length);

                        // Jump to injection
                        file.Position = 0x8F986;
                        byte[] bytes2 = { 0xE9, 0xD5, 0x6D, 0x16, 0x00, 0x90 };
                        file.Write(bytes2, 0, bytes2.Length);

                        // Fov value
                        float fov = (float)(3.141592653589793 / 180) * (float)numericFoV.Value;
                        file.Position = 0x255524;
                        byte[] bytes3 = BitConverter.GetBytes(fov);
                        file.Write(bytes3, 0, bytes3.Length);

                        // Fov patched
                        file.Position = 0x255520;
                        byte[] fovPatch = { 0x01 };
                        file.Write(fovPatch, 0, fovPatch.Length);
                    }
                    else
                    {
                        //restore fov injeciton
                        file.Position = 0x1F6760;
                        byte[] bytes = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                        file.Write(bytes, 0, bytes.Length);

                        //restore jump to injection
                        file.Position = 0x8F986;
                        byte[] bytes2 = { 0xD9, 0x45, 0x08, 0x8B, 0x4D, 0x0C };
                        file.Write(bytes2, 0, bytes2.Length);

                        //restore fov value
                        file.Position = 0x255524;
                        byte[] bytes3 = { 0x00, 0x00, 0x00, 0x00 };
                        file.Write(bytes3, 0, bytes3.Length);

                        //fov unpatched
                        file.Position = 0x255520;
                        byte[] fovPatch = { 0x00 };
                        file.Write(fovPatch, 0, fovPatch.Length);
                    }

                    // Coop fix
                    if (coopFix.Checked && coopFix.Enabled) // unavailable with d3d8to9
                    {
                        // CoopPatch.CEA
                        file.Position = 0xD2553;
                        byte[] coop_hook = { 0xE9, 0xA8, 0x48, 0x12, 0x00 };
                        file.Write(coop_hook, 0, coop_hook.Length);

                        file.Position = 0x1F6E00;
                        byte[] coop_patch = { 0x50, 0x51, 0x80, 0xFB, 0x0C, 0x0F, 0x85, 0x12, 0x00, 0x00, 0x00, 0xA0, 0x57, 0x4A, 0x6F, 0x00, 0x3C, 0x01, 0x0F, 0x84, 0x3D, 0x00, 0x00, 0x00, 0xE9, 0x17, 0x00, 0x00, 0x00, 0x80, 0x3D, 0x54, 0x4A, 0x6F, 0x00, 0x01, 0x0F, 0x84, 0x21, 0x00, 0x00, 0x00, 0xC7, 0x05, 0x57, 0x4A, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x02, 0x00, 0x00, 0x00, 0xE8, 0x7D, 0x8C, 0xE9, 0xFF, 0x83, 0xC4, 0x08, 0xE9, 0x1C, 0x00, 0x00, 0x00, 0xC7, 0x05, 0x57, 0x4A, 0x6F, 0x00, 0x01, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x00, 0xE8, 0x5C, 0x8C, 0xE9, 0xFF, 0x83, 0xC4, 0x08, 0x59, 0x58, 0x8B, 0x4C, 0x24, 0x38, 0x5F, 0xE9, 0xE5, 0xB6, 0xED, 0xFF };
                        file.Write(coop_patch, 0, coop_patch.Length);
                    }
                    else
                    {
                        // Original code
                        file.Position = 0xD2553;
                        byte[] coop_hook = { 0x8B, 0x4C, 0x24, 0x38, 0x5F };
                        file.Write(coop_hook, 0, coop_hook.Length);

                        file.Position = 0x1F6E00;
                        byte[] coop_patch = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                        file.Write(coop_patch, 0, coop_patch.Length);
                    }

                    // Achievements
                    if ((achievements.Checked && achievements.Enabled) || (injections.Checked && injections.Enabled))
                    {
                        // Achievements.CEA
                        file.Position = 0x1D5CF8;
                        byte[] achievement_tracking = { 0xC6, 0x00, 0x01, 0xC3, 0x8B, 0x0D, 0x2C, 0x8E, 0x6C, 0x00, 0x8B, 0x05, 0xA8, 0x8B, 0x6C, 0x00, 0x69, 0xC9, 0xD4, 0x13, 0x00, 0x00, 0x69, 0xC0, 0xA8, 0x00, 0x00, 0x00, 0x01, 0xC8, 0x05, 0x00, 0x97, 0x6C, 0x00, 0xC3, 0x8B, 0x0D, 0x2C, 0x8E, 0x6C, 0x00, 0x69, 0xC9, 0xD4, 0x13, 0x00, 0x00, 0x81, 0xC1, 0x00, 0x97, 0x6C, 0x00, 0x81, 0xC1, 0xC0, 0x13, 0x00, 0x00, 0x8B, 0x01, 0xC3, 0x8B, 0x05, 0xA8, 0x8B, 0x6C, 0x00, 0xC3, 0x8B, 0x05, 0x04, 0xC6, 0x71, 0x00, 0xC3, 0x8B, 0x05, 0x84, 0x65, 0x73, 0x00, 0xC3, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xC8, 0x01, 0x00, 0x00, 0x8B, 0x81, 0x84, 0x01, 0x00, 0x00, 0xC3, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xC0, 0x8A, 0x81, 0x0C, 0x01, 0x00, 0x00, 0xC3, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xC8, 0x01, 0x00, 0x00, 0x8B, 0x81, 0xB0, 0x00, 0x00, 0x00, 0xC3, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x89, 0x05, 0xA8, 0x15, 0x73, 0x00, 0xC3, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x89, 0x05, 0xA0, 0x15, 0x73, 0x00, 0xC3, 0x31, 0xC0, 0x89, 0x05, 0xA0, 0x15, 0x73, 0x00, 0x89, 0x05, 0xA4, 0x15, 0x73, 0x00, 0x89, 0x05, 0xA8, 0x15, 0x73, 0x00, 0x89, 0x05, 0xAC, 0x15, 0x73, 0x00, 0x89, 0x05, 0xB0, 0x15, 0x73, 0x00, 0x89, 0x05, 0xB4, 0x15, 0x73, 0x00, 0x89, 0x05, 0xB8, 0x15, 0x73, 0x00, 0x89, 0x05, 0xBC, 0x15, 0x73, 0x00, 0xC3, 0x8B, 0x05, 0xA8, 0x15, 0x73, 0x00, 0xC3, 0x8B, 0x05, 0xA0, 0x15, 0x73, 0x00, 0xC3, 0x8B, 0x05, 0x20, 0x8E, 0x6C, 0x00, 0xC3, 0x8B, 0x05, 0xA4, 0x15, 0x73, 0x00, 0x40, 0x89, 0x05, 0xA4, 0x15, 0x73, 0x00, 0xC3, 0x50, 0x51, 0xE8, 0x00, 0xFF, 0xFF, 0xFF, 0x8B, 0x88, 0x8C, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x07, 0x0F, 0x85, 0xF2, 0x00, 0x00, 0x00, 0xE8, 0x27, 0xFF, 0xFF, 0xFF, 0x8B, 0xC8, 0x80, 0xF9, 0x05, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x02, 0x16, 0x73, 0x00, 0xE8, 0xD3, 0xFE, 0xFF, 0xFF, 0xE9, 0xD3, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x04, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x0D, 0x16, 0x73, 0x00, 0xE8, 0xBB, 0xFE, 0xFF, 0xFF, 0xE9, 0xBB, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x06, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x17, 0x16, 0x73, 0x00, 0xE8, 0xA3, 0xFE, 0xFF, 0xFF, 0xE9, 0xA3, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x0A, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x23, 0x16, 0x73, 0x00, 0xE8, 0x8B, 0xFE, 0xFF, 0xFF, 0xE9, 0x8B, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x09, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x2D, 0x16, 0x73, 0x00, 0xE8, 0x73, 0xFE, 0xFF, 0xFF, 0xE9, 0x73, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x0B, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x37, 0x16, 0x73, 0x00, 0xE8, 0x5B, 0xFE, 0xFF, 0xFF, 0xE9, 0x5B, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x10, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x43, 0x16, 0x73, 0x00, 0xE8, 0x43, 0xFE, 0xFF, 0xFF, 0xE9, 0x43, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x0F, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x4D, 0x16, 0x73, 0x00, 0xE8, 0x2B, 0xFE, 0xFF, 0xFF, 0xE9, 0x2B, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x0E, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x57, 0x16, 0x73, 0x00, 0xE8, 0x13, 0xFE, 0xFF, 0xFF, 0xE9, 0x13, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x12, 0x0F, 0x85, 0x0A, 0x00, 0x00, 0x00, 0xB8, 0x64, 0x16, 0x73, 0x00, 0xE8, 0xFB, 0xFD, 0xFF, 0xFF, 0xE8, 0x35, 0xFE, 0xFF, 0xFF, 0x8B, 0xC8, 0x80, 0xF9, 0x07, 0x0F, 0x85, 0x36, 0x00, 0x00, 0x00, 0xB8, 0x21, 0x16, 0x73, 0x00, 0xE8, 0xE1, 0xFD, 0xFF, 0xFF, 0xE8, 0xC4, 0xFE, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x20, 0x01, 0x00, 0x00, 0x8B, 0x05, 0x40, 0x5D, 0x73, 0x00, 0x83, 0xF8, 0x00, 0x0F, 0x85, 0x11, 0x01, 0x00, 0x00, 0xB8, 0x22, 0x16, 0x73, 0x00, 0xE8, 0xBA, 0xFD, 0xFF, 0xFF, 0xE9, 0x02, 0x01, 0x00, 0x00, 0x80, 0xF9, 0x0C, 0x0F, 0x85, 0x35, 0x00, 0x00, 0x00, 0xB8, 0x41, 0x16, 0x73, 0x00, 0xE8, 0xA2, 0xFD, 0xFF, 0xFF, 0xE8, 0x85, 0xFE, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0xE1, 0x00, 0x00, 0x00, 0xE8, 0x69, 0xFE, 0xFF, 0xFF, 0x83, 0xF8, 0x01, 0x0F, 0x84, 0xD3, 0x00, 0x00, 0x00, 0xB8, 0x42, 0x16, 0x73, 0x00, 0xE8, 0x7C, 0xFD, 0xFF, 0xFF, 0xE9, 0xC4, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x11, 0x0F, 0x85, 0x35, 0x00, 0x00, 0x00, 0xB8, 0x62, 0x16, 0x73, 0x00, 0xE8, 0x64, 0xFD, 0xFF, 0xFF, 0xE8, 0x39, 0xFE, 0xFF, 0xFF, 0x83, 0xF8, 0x01, 0x0F, 0x84, 0xA3, 0x00, 0x00, 0x00, 0xE8, 0x39, 0xFE, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x95, 0x00, 0x00, 0x00, 0xB8, 0x63, 0x16, 0x73, 0x00, 0xE8, 0x3E, 0xFD, 0xFF, 0xFF, 0xE9, 0x86, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x13, 0x0F, 0x85, 0x44, 0x00, 0x00, 0x00, 0xB8, 0x6C, 0x16, 0x73, 0x00, 0xE8, 0x26, 0xFD, 0xFF, 0xFF, 0xE8, 0xFB, 0xFD, 0xFF, 0xFF, 0x83, 0xF8, 0x01, 0x0F, 0x84, 0x65, 0x00, 0x00, 0x00, 0xE8, 0xFB, 0xFD, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x57, 0x00, 0x00, 0x00, 0x8B, 0x05, 0x18, 0x9A, 0x73, 0x00, 0x83, 0xF8, 0x00, 0x0F, 0x85, 0x48, 0x00, 0x00, 0x00, 0xB8, 0x6D, 0x16, 0x73, 0x00, 0xE8, 0xF1, 0xFC, 0xFF, 0xFF, 0xE9, 0x39, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x14, 0x0F, 0x85, 0x30, 0x00, 0x00, 0x00, 0xB8, 0x6E, 0x16, 0x73, 0x00, 0xE8, 0xD9, 0xFC, 0xFF, 0xFF, 0xE8, 0xAE, 0xFD, 0xFF, 0xFF, 0x83, 0xF8, 0x01, 0x0F, 0x84, 0x18, 0x00, 0x00, 0x00, 0xE8, 0xAE, 0xFD, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x0A, 0x00, 0x00, 0x00, 0xB8, 0x6F, 0x16, 0x73, 0x00, 0xE8, 0xB3, 0xFC, 0xFF, 0xFF, 0x80, 0xF9, 0x1D, 0x0F, 0x85, 0x29, 0x00, 0x00, 0x00, 0xB8, 0x0B, 0x16, 0x73, 0x00, 0xE8, 0xA0, 0xFC, 0xFF, 0xFF, 0xE8, 0xE1, 0xFC, 0xFF, 0xFF, 0x3D, 0x00, 0x00, 0x40, 0x41, 0x0F, 0x8C, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x0C, 0x16, 0x73, 0x00, 0xE8, 0x86, 0xFC, 0xFF, 0xFF, 0xE9, 0x85, 0x01, 0x00, 0x00, 0x80, 0xF9, 0x1B, 0x0F, 0x85, 0x29, 0x00, 0x00, 0x00, 0xB8, 0x15, 0x16, 0x73, 0x00, 0xE8, 0x6E, 0xFC, 0xFF, 0xFF, 0xE8, 0xAF, 0xFC, 0xFF, 0xFF, 0x3D, 0x00, 0x00, 0xA0, 0x41, 0x0F, 0x8C, 0x62, 0x01, 0x00, 0x00, 0xB8, 0x16, 0x16, 0x73, 0x00, 0xE8, 0x54, 0xFC, 0xFF, 0xFF, 0xE9, 0x53, 0x01, 0x00, 0x00, 0x80, 0xF9, 0x18, 0x0F, 0x85, 0x27, 0x00, 0x00, 0x00, 0xB8, 0x1F, 0x16, 0x73, 0x00, 0xE8, 0x3C, 0xFC, 0xFF, 0xFF, 0xE8, 0x8B, 0xFC, 0xFF, 0xFF, 0x83, 0xF8, 0x64, 0x0F, 0x8C, 0x32, 0x01, 0x00, 0x00, 0xB8, 0x20, 0x16, 0x73, 0x00, 0xE8, 0x24, 0xFC, 0xFF, 0xFF, 0xE9, 0x23, 0x01, 0x00, 0x00, 0x80, 0xF9, 0x15, 0x0F, 0x85, 0x29, 0x00, 0x00, 0x00, 0xB8, 0x2B, 0x16, 0x73, 0x00, 0xE8, 0x0C, 0xFC, 0xFF, 0xFF, 0xE8, 0x4D, 0xFC, 0xFF, 0xFF, 0x3D, 0x00, 0x00, 0xC8, 0x41, 0x0F, 0x8C, 0x00, 0x01, 0x00, 0x00, 0xB8, 0x2C, 0x16, 0x73, 0x00, 0xE8, 0xF2, 0xFB, 0xFF, 0xFF, 0xE9, 0xF1, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x17, 0x0F, 0x85, 0x29, 0x00, 0x00, 0x00, 0xB8, 0x35, 0x16, 0x73, 0x00, 0xE8, 0xDA, 0xFB, 0xFF, 0xFF, 0xE8, 0x1B, 0xFC, 0xFF, 0xFF, 0x3D, 0x00, 0x00, 0x70, 0x41, 0x0F, 0x8C, 0xCE, 0x00, 0x00, 0x00, 0xB8, 0x36, 0x16, 0x73, 0x00, 0xE8, 0xC0, 0xFB, 0xFF, 0xFF, 0xE9, 0xBF, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x19, 0x0F, 0x85, 0x27, 0x00, 0x00, 0x00, 0xB8, 0x3F, 0x16, 0x73, 0x00, 0xE8, 0xA8, 0xFB, 0xFF, 0xFF, 0xE8, 0xF7, 0xFB, 0xFF, 0xFF, 0x83, 0xF8, 0x4B, 0x0F, 0x8C, 0x9E, 0x00, 0x00, 0x00, 0xB8, 0x40, 0x16, 0x73, 0x00, 0xE8, 0x90, 0xFB, 0xFF, 0xFF, 0xE9, 0x8F, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x16, 0x0F, 0x85, 0x29, 0x00, 0x00, 0x00, 0xB8, 0x4B, 0x16, 0x73, 0x00, 0xE8, 0x78, 0xFB, 0xFF, 0xFF, 0xE8, 0xB9, 0xFB, 0xFF, 0xFF, 0x3D, 0x00, 0x00, 0x20, 0x41, 0x0F, 0x8C, 0x6C, 0x00, 0x00, 0x00, 0xB8, 0x4C, 0x16, 0x73, 0x00, 0xE8, 0x5E, 0xFB, 0xFF, 0xFF, 0xE9, 0x5D, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x1C, 0x0F, 0x85, 0x29, 0x00, 0x00, 0x00, 0xB8, 0x55, 0x16, 0x73, 0x00, 0xE8, 0x46, 0xFB, 0xFF, 0xFF, 0xE8, 0x87, 0xFB, 0xFF, 0xFF, 0x3D, 0x00, 0x00, 0xC8, 0x41, 0x0F, 0x8C, 0x3A, 0x00, 0x00, 0x00, 0xB8, 0x56, 0x16, 0x73, 0x00, 0xE8, 0x2C, 0xFB, 0xFF, 0xFF, 0xE9, 0x2B, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x1A, 0x0F, 0x85, 0x22, 0x00, 0x00, 0x00, 0xB8, 0x60, 0x16, 0x73, 0x00, 0xE8, 0x14, 0xFB, 0xFF, 0xFF, 0xE8, 0x63, 0xFB, 0xFF, 0xFF, 0x83, 0xF8, 0x64, 0x0F, 0x8C, 0x0A, 0x00, 0x00, 0x00, 0xB8, 0x61, 0x16, 0x73, 0x00, 0xE8, 0xFC, 0xFA, 0xFF, 0xFF, 0x59, 0x58, 0x8B, 0x05, 0x58, 0x8C, 0x70, 0x00, 0xE9, 0x2C, 0x76, 0xEF, 0xFF, 0x50, 0x51, 0xE8, 0x4F, 0xFB, 0xFF, 0xFF, 0x83, 0xF8, 0x0D, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x07, 0x16, 0x73, 0x00, 0xE8, 0xD5, 0xFA, 0xFF, 0xFF, 0xE9, 0xEB, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x0B, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x12, 0x16, 0x73, 0x00, 0xE8, 0xBD, 0xFA, 0xFF, 0xFF, 0xE9, 0xD3, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x05, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x1C, 0x16, 0x73, 0x00, 0xE8, 0xA5, 0xFA, 0xFF, 0xFF, 0xE9, 0xBB, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x00, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x28, 0x16, 0x73, 0x00, 0xE8, 0x8D, 0xFA, 0xFF, 0xFF, 0xE9, 0xA3, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x06, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x32, 0x16, 0x73, 0x00, 0xE8, 0x75, 0xFA, 0xFF, 0xFF, 0xE9, 0x8B, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x0C, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x3C, 0x16, 0x73, 0x00, 0xE8, 0x5D, 0xFA, 0xFF, 0xFF, 0xE9, 0x73, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x01, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x48, 0x16, 0x73, 0x00, 0xE8, 0x45, 0xFA, 0xFF, 0xFF, 0xE9, 0x5B, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x09, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x52, 0x16, 0x73, 0x00, 0xE8, 0x2D, 0xFA, 0xFF, 0xFF, 0xE9, 0x43, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x07, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x5C, 0x16, 0x73, 0x00, 0xE8, 0x15, 0xFA, 0xFF, 0xFF, 0xE9, 0x2B, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x0A, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x69, 0x16, 0x73, 0x00, 0xE8, 0xFD, 0xF9, 0xFF, 0xFF, 0xE9, 0x13, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x03, 0x0F, 0x85, 0x0A, 0x00, 0x00, 0x00, 0xB8, 0x00, 0x16, 0x73, 0x00, 0xE8, 0xE5, 0xF9, 0xFF, 0xFF, 0x59, 0x58, 0xB8, 0x01, 0x00, 0x00, 0x00, 0xE9, 0xCD, 0xAA, 0xE5, 0xFF, 0x50, 0x51, 0xE8, 0x4E, 0xFA, 0xFF, 0xFF, 0x83, 0xF8, 0x59, 0x0F, 0x85, 0x05, 0x00, 0x00, 0x00, 0xE8, 0x5F, 0xFA, 0xFF, 0xFF, 0xE8, 0xFE, 0xF9, 0xFF, 0xFF, 0x83, 0xF8, 0x0E, 0x0F, 0x84, 0x29, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x05, 0x0F, 0x84, 0x3D, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x13, 0x0F, 0x84, 0x50, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x14, 0x0F, 0x84, 0x5A, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x11, 0x0F, 0x84, 0x6D, 0x00, 0x00, 0x00, 0xE9, 0x85, 0x00, 0x00, 0x00, 0xE8, 0x04, 0xFA, 0xFF, 0xFF, 0x83, 0xF8, 0x52, 0x0F, 0x85, 0x77, 0x00, 0x00, 0x00, 0xB8, 0x5F, 0x16, 0x73, 0x00, 0xE8, 0x75, 0xF9, 0xFF, 0xFF, 0xE9, 0x68, 0x00, 0x00, 0x00, 0xE8, 0xE7, 0xF9, 0xFF, 0xFF, 0x83, 0xF8, 0x17, 0x0F, 0x84, 0x50, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x18, 0x0F, 0x84, 0x47, 0x00, 0x00, 0x00, 0xE9, 0x4C, 0x00, 0x00, 0x00, 0xE8, 0xCB, 0xF9, 0xFF, 0xFF, 0x83, 0xF8, 0x40, 0x0F, 0x84, 0x34, 0x00, 0x00, 0x00, 0xE9, 0x39, 0x00, 0x00, 0x00, 0xE8, 0xB8, 0xF9, 0xFF, 0xFF, 0x83, 0xF8, 0x22, 0x0F, 0x84, 0x21, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x40, 0x0F, 0x84, 0x18, 0x00, 0x00, 0x00, 0xE9, 0x1D, 0x00, 0x00, 0x00, 0xE8, 0x9C, 0xF9, 0xFF, 0xFF, 0x83, 0xF8, 0x15, 0x0F, 0x84, 0x05, 0x00, 0x00, 0x00, 0xE9, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x9C, 0xF9, 0xFF, 0xFF, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x59, 0x58, 0x5F, 0x5E, 0x5D, 0x5B, 0xC3, 0xE9, 0xC5, 0x35, 0xF0, 0xFF, 0x50, 0x51, 0xE8, 0x9C, 0xF9, 0xFF, 0xFF, 0x59, 0x58, 0x64, 0x89, 0x0D, 0x00, 0x00, 0x00, 0x00, 0xE9, 0x53, 0xC1, 0xEF, 0xFF, 0x50, 0x51, 0xE8, 0x2D, 0xF9, 0xFF, 0xFF, 0x3D, 0x00, 0x00, 0xF0, 0x41, 0x0F, 0x8C, 0x3E, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0xF0, 0x42, 0x0F, 0x83, 0x33, 0x00, 0x00, 0x00, 0x8B, 0x05, 0xC4, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xC8, 0x01, 0x00, 0x00, 0x8B, 0x81, 0xB8, 0x01, 0x00, 0x00, 0x88, 0xC2, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xC8, 0x01, 0x00, 0x00, 0x8B, 0x81, 0xB8, 0x01, 0x00, 0x00, 0x38, 0xC2, 0x0F, 0x8E, 0x05, 0x00, 0x00, 0x00, 0xE8, 0x26, 0xF9, 0xFF, 0xFF, 0x59, 0x58, 0x83, 0xC4, 0x24, 0xC3, 0xE9, 0x3B, 0x0E, 0xF4, 0xFF, 0x50, 0x51, 0x8B, 0x88, 0xB8, 0x00, 0x00, 0x00, 0x81, 0xF9, 0x00, 0x40, 0x1C, 0x45, 0x0F, 0x8C, 0x0A, 0x00, 0x00, 0x00, 0xB8, 0x70, 0x16, 0x73, 0x00, 0xE8, 0x6E, 0xF8, 0xFF, 0xFF, 0xE8, 0x58, 0xF9, 0xFF, 0xFF, 0x88, 0xC1, 0xE8, 0xA1, 0xF8, 0xFF, 0xFF, 0x83, 0xF8, 0x03, 0x0F, 0x84, 0x5F, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x05, 0x0F, 0x84, 0x6E, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x04, 0x0F, 0x84, 0xA3, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x06, 0x0F, 0x84, 0xD8, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x0A, 0x0F, 0x84, 0x0D, 0x01, 0x00, 0x00, 0x83, 0xF8, 0x09, 0x0F, 0x84, 0x42, 0x01, 0x00, 0x00, 0x83, 0xF8, 0x0B, 0x0F, 0x84, 0x77, 0x01, 0x00, 0x00, 0x83, 0xF8, 0x10, 0x0F, 0x84, 0xAC, 0x01, 0x00, 0x00, 0x83, 0xF8, 0x0F, 0x0F, 0x84, 0xE1, 0x01, 0x00, 0x00, 0x83, 0xF8, 0x0E, 0x0F, 0x84, 0x16, 0x02, 0x00, 0x00, 0x83, 0xF8, 0x12, 0x0F, 0x84, 0x4B, 0x02, 0x00, 0x00, 0xE9, 0x7F, 0x02, 0x00, 0x00, 0x80, 0xF9, 0x01, 0x0F, 0x8C, 0x76, 0x02, 0x00, 0x00, 0xB8, 0x01, 0x16, 0x73, 0x00, 0xE8, 0xE7, 0xF7, 0xFF, 0xFF, 0xE9, 0x67, 0x02, 0x00, 0x00, 0x80, 0xF9, 0x06, 0x0F, 0x8C, 0x5E, 0x02, 0x00, 0x00, 0xB8, 0x08, 0x16, 0x73, 0x00, 0xE8, 0xCF, 0xF7, 0xFF, 0xFF, 0xE8, 0xB2, 0xF8, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x46, 0x02, 0x00, 0x00, 0xE8, 0x9D, 0xF8, 0xFF, 0xFF, 0x83, 0xF8, 0x01, 0x0F, 0x84, 0x38, 0x02, 0x00, 0x00, 0xB8, 0x09, 0x16, 0x73, 0x00, 0xE8, 0xA9, 0xF7, 0xFF, 0xFF, 0xE9, 0x29, 0x02, 0x00, 0x00, 0x80, 0xF9, 0x06, 0x0F, 0x8C, 0x20, 0x02, 0x00, 0x00, 0xB8, 0x13, 0x16, 0x73, 0x00, 0xE8, 0x91, 0xF7, 0xFF, 0xFF, 0xE8, 0x74, 0xF8, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x08, 0x02, 0x00, 0x00, 0xE8, 0x5F, 0xF8, 0xFF, 0xFF, 0x83, 0xF8, 0x01, 0x0F, 0x84, 0xFA, 0x01, 0x00, 0x00, 0xB8, 0x14, 0x16, 0x73, 0x00, 0xE8, 0x6B, 0xF7, 0xFF, 0xFF, 0xE9, 0xEB, 0x01, 0x00, 0x00, 0x80, 0xF9, 0x04, 0x0F, 0x8C, 0xE2, 0x01, 0x00, 0x00, 0xB8, 0x1D, 0x16, 0x73, 0x00, 0xE8, 0x53, 0xF7, 0xFF, 0xFF, 0xE8, 0x36, 0xF8, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0xCA, 0x01, 0x00, 0x00, 0xE8, 0x21, 0xF8, 0xFF, 0xFF, 0x83, 0xF8, 0x01, 0x0F, 0x84, 0xBC, 0x01, 0x00, 0x00, 0xB8, 0x1E, 0x16, 0x73, 0x00, 0xE8, 0x2D, 0xF7, 0xFF, 0xFF, 0xE9, 0xAD, 0x01, 0x00, 0x00, 0x80, 0xF9, 0x01, 0x0F, 0x8C, 0xA4, 0x01, 0x00, 0x00, 0xB8, 0x29, 0x16, 0x73, 0x00, 0xE8, 0x15, 0xF7, 0xFF, 0xFF, 0xE8, 0xF8, 0xF7, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x8C, 0x01, 0x00, 0x00, 0xE8, 0xE3, 0xF7, 0xFF, 0xFF, 0x83, 0xF8, 0x01, 0x0F, 0x84, 0x7E, 0x01, 0x00, 0x00, 0xB8, 0x2A, 0x16, 0x73, 0x00, 0xE8, 0xEF, 0xF6, 0xFF, 0xFF, 0xE9, 0x6F, 0x01, 0x00, 0x00, 0x80, 0xF9, 0x04, 0x0F, 0x8C, 0x66, 0x01, 0x00, 0x00, 0xB8, 0x33, 0x16, 0x73, 0x00, 0xE8, 0xD7, 0xF6, 0xFF, 0xFF, 0xE8, 0xBA, 0xF7, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x4E, 0x01, 0x00, 0x00, 0xE8, 0xA5, 0xF7, 0xFF, 0xFF, 0x83, 0xF8, 0x01, 0x0F, 0x84, 0x40, 0x01, 0x00, 0x00, 0xB8, 0x34, 0x16, 0x73, 0x00, 0xE8, 0xB1, 0xF6, 0xFF, 0xFF, 0xE9, 0x31, 0x01, 0x00, 0x00, 0x80, 0xF9, 0x06, 0x0F, 0x8C, 0x28, 0x01, 0x00, 0x00, 0xB8, 0x3D, 0x16, 0x73, 0x00, 0xE8, 0x99, 0xF6, 0xFF, 0xFF, 0xE8, 0x7C, 0xF7, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x10, 0x01, 0x00, 0x00, 0xE8, 0x67, 0xF7, 0xFF, 0xFF, 0x83, 0xF8, 0x01, 0x0F, 0x84, 0x02, 0x01, 0x00, 0x00, 0xB8, 0x3E, 0x16, 0x73, 0x00, 0xE8, 0x73, 0xF6, 0xFF, 0xFF, 0xE9, 0xF3, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x04, 0x0F, 0x8C, 0xEA, 0x00, 0x00, 0x00, 0xB8, 0x49, 0x16, 0x73, 0x00, 0xE8, 0x5B, 0xF6, 0xFF, 0xFF, 0xE8, 0x3E, 0xF7, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0xD2, 0x00, 0x00, 0x00, 0xE8, 0x29, 0xF7, 0xFF, 0xFF, 0x83, 0xF8, 0x01, 0x0F, 0x84, 0xC4, 0x00, 0x00, 0x00, 0xB8, 0x4A, 0x16, 0x73, 0x00, 0xE8, 0x35, 0xF6, 0xFF, 0xFF, 0xE9, 0xB5, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x04, 0x0F, 0x8C, 0xAC, 0x00, 0x00, 0x00, 0xB8, 0x53, 0x16, 0x73, 0x00, 0xE8, 0x1D, 0xF6, 0xFF, 0xFF, 0xE8, 0x00, 0xF7, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x94, 0x00, 0x00, 0x00, 0xE8, 0xEB, 0xF6, 0xFF, 0xFF, 0x83, 0xF8, 0x01, 0x0F, 0x84, 0x86, 0x00, 0x00, 0x00, 0xB8, 0x54, 0x16, 0x73, 0x00, 0xE8, 0xF7, 0xF5, 0xFF, 0xFF, 0xE9, 0x77, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x04, 0x0F, 0x8C, 0x6E, 0x00, 0x00, 0x00, 0xB8, 0x5D, 0x16, 0x73, 0x00, 0xE8, 0xDF, 0xF5, 0xFF, 0xFF, 0xE8, 0xC2, 0xF6, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x56, 0x00, 0x00, 0x00, 0xE8, 0xAD, 0xF6, 0xFF, 0xFF, 0x83, 0xF8, 0x01, 0x0F, 0x84, 0x48, 0x00, 0x00, 0x00, 0xB8, 0x5E, 0x16, 0x73, 0x00, 0xE8, 0xB9, 0xF5, 0xFF, 0xFF, 0xE9, 0x39, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x05, 0x0F, 0x8C, 0x30, 0x00, 0x00, 0x00, 0xB8, 0x6A, 0x16, 0x73, 0x00, 0xE8, 0xA1, 0xF5, 0xFF, 0xFF, 0xE8, 0x84, 0xF6, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x18, 0x00, 0x00, 0x00, 0xE8, 0x6F, 0xF6, 0xFF, 0xFF, 0x83, 0xF8, 0x01, 0x0F, 0x84, 0x0A, 0x00, 0x00, 0x00, 0xB8, 0x6B, 0x16, 0x73, 0x00, 0xE8, 0x7B, 0xF5, 0xFF, 0xFF, 0x59, 0x58, 0x8B, 0x86, 0xC8, 0x01, 0x00, 0x00, 0xE9, 0x2D, 0x1C, 0xE4, 0xFF, 0x50, 0x51, 0xA0, 0xFD, 0x96, 0x6C, 0x00, 0x3C, 0x01, 0x0F, 0x85, 0x0A, 0x00, 0x00, 0x00, 0xB8, 0x71, 0x16, 0x73, 0x00, 0xE8, 0x55, 0xF5, 0xFF, 0xFF, 0x59, 0x58, 0x56, 0x8B, 0xF1, 0x8A, 0x06, 0xE9, 0x46, 0xBD, 0xEC, 0xFF, 0x50, 0x51, 0xE8, 0x2A, 0xF6, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x1A, 0x00, 0x00, 0x00, 0xE8, 0x58, 0xF5, 0xFF, 0xFF, 0x3D, 0x70, 0xF1, 0x2F, 0x00, 0x0F, 0x8C, 0x0A, 0x00, 0x00, 0x00, 0xB8, 0x72, 0x16, 0x73, 0x00, 0xE8, 0x1F, 0xF5, 0xFF, 0xFF, 0x59, 0x58, 0x68, 0x64, 0x00, 0x5F, 0x00, 0xE9, 0x72, 0xA3, 0xEB, 0xFF, 0x50, 0x51, 0x81, 0xFA, 0x64, 0x00, 0x00, 0x00, 0x0F, 0x8C, 0x00, 0x01, 0x00, 0x00, 0xE8, 0xE8, 0xF5, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0xF2, 0x00, 0x00, 0x00, 0xE8, 0x31, 0xF5, 0xFF, 0xFF, 0x8B, 0xC8, 0x80, 0xF9, 0x05, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x06, 0x16, 0x73, 0x00, 0xE8, 0xDD, 0xF4, 0xFF, 0xFF, 0xE9, 0xD3, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x04, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x11, 0x16, 0x73, 0x00, 0xE8, 0xC5, 0xF4, 0xFF, 0xFF, 0xE9, 0xBB, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x06, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x1B, 0x16, 0x73, 0x00, 0xE8, 0xAD, 0xF4, 0xFF, 0xFF, 0xE9, 0xA3, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x0A, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x27, 0x16, 0x73, 0x00, 0xE8, 0x95, 0xF4, 0xFF, 0xFF, 0xE9, 0x8B, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x09, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x31, 0x16, 0x73, 0x00, 0xE8, 0x7D, 0xF4, 0xFF, 0xFF, 0xE9, 0x73, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x0B, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x3B, 0x16, 0x73, 0x00, 0xE8, 0x65, 0xF4, 0xFF, 0xFF, 0xE9, 0x5B, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x10, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x47, 0x16, 0x73, 0x00, 0xE8, 0x4D, 0xF4, 0xFF, 0xFF, 0xE9, 0x43, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x0F, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x51, 0x16, 0x73, 0x00, 0xE8, 0x35, 0xF4, 0xFF, 0xFF, 0xE9, 0x2B, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x0E, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x5B, 0x16, 0x73, 0x00, 0xE8, 0x1D, 0xF4, 0xFF, 0xFF, 0xE9, 0x13, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x12, 0x0F, 0x85, 0x0A, 0x00, 0x00, 0x00, 0xB8, 0x68, 0x16, 0x73, 0x00, 0xE8, 0x05, 0xF4, 0xFF, 0xFF, 0x59, 0x58, 0x80, 0xFB, 0x12, 0x89, 0x10, 0xE9, 0xB7, 0x8D, 0xEA, 0xFF, 0x50, 0x51, 0xE8, 0x31, 0xF4, 0xFF, 0xFF, 0x8B, 0xC8, 0x80, 0xF9, 0x05, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x03, 0x16, 0x73, 0x00, 0xE8, 0xDD, 0xF3, 0xFF, 0xFF, 0xE9, 0xD3, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x04, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x0E, 0x16, 0x73, 0x00, 0xE8, 0xC5, 0xF3, 0xFF, 0xFF, 0xE9, 0xBB, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x06, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x18, 0x16, 0x73, 0x00, 0xE8, 0xAD, 0xF3, 0xFF, 0xFF, 0xE9, 0xA3, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x0A, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x24, 0x16, 0x73, 0x00, 0xE8, 0x95, 0xF3, 0xFF, 0xFF, 0xE9, 0x8B, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x09, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x2E, 0x16, 0x73, 0x00, 0xE8, 0x7D, 0xF3, 0xFF, 0xFF, 0xE9, 0x73, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x0B, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x38, 0x16, 0x73, 0x00, 0xE8, 0x65, 0xF3, 0xFF, 0xFF, 0xE9, 0x5B, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x10, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x44, 0x16, 0x73, 0x00, 0xE8, 0x4D, 0xF3, 0xFF, 0xFF, 0xE9, 0x43, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x0F, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x4E, 0x16, 0x73, 0x00, 0xE8, 0x35, 0xF3, 0xFF, 0xFF, 0xE9, 0x2B, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x0E, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x58, 0x16, 0x73, 0x00, 0xE8, 0x1D, 0xF3, 0xFF, 0xFF, 0xE9, 0x13, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x12, 0x0F, 0x85, 0x0A, 0x00, 0x00, 0x00, 0xB8, 0x65, 0x16, 0x73, 0x00, 0xE8, 0x05, 0xF3, 0xFF, 0xFF, 0x59, 0x58, 0xC6, 0x84, 0x90, 0xA1, 0x97, 0x6C, 0x00, 0x01, 0xE9, 0xFB, 0x8D, 0xEA, 0xFF, 0x50, 0x51, 0xE8, 0xF3, 0xF2, 0xFF, 0xFF, 0x8B, 0x88, 0xA2, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x01, 0x0F, 0x85, 0x00, 0x01, 0x00, 0x00, 0xE8, 0xC3, 0xF3, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0xF2, 0x00, 0x00, 0x00, 0xE8, 0x0C, 0xF3, 0xFF, 0xFF, 0x8B, 0xC8, 0x80, 0xF9, 0x05, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x04, 0x16, 0x73, 0x00, 0xE8, 0xB8, 0xF2, 0xFF, 0xFF, 0xE9, 0xD3, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x04, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x0F, 0x16, 0x73, 0x00, 0xE8, 0xA0, 0xF2, 0xFF, 0xFF, 0xE9, 0xBB, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x06, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x19, 0x16, 0x73, 0x00, 0xE8, 0x88, 0xF2, 0xFF, 0xFF, 0xE9, 0xA3, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x0A, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x25, 0x16, 0x73, 0x00, 0xE8, 0x70, 0xF2, 0xFF, 0xFF, 0xE9, 0x8B, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x09, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x2F, 0x16, 0x73, 0x00, 0xE8, 0x58, 0xF2, 0xFF, 0xFF, 0xE9, 0x73, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x0B, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x39, 0x16, 0x73, 0x00, 0xE8, 0x40, 0xF2, 0xFF, 0xFF, 0xE9, 0x5B, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x10, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x45, 0x16, 0x73, 0x00, 0xE8, 0x28, 0xF2, 0xFF, 0xFF, 0xE9, 0x43, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x0F, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x4F, 0x16, 0x73, 0x00, 0xE8, 0x10, 0xF2, 0xFF, 0xFF, 0xE9, 0x2B, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x0E, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xB8, 0x59, 0x16, 0x73, 0x00, 0xE8, 0xF8, 0xF1, 0xFF, 0xFF, 0xE9, 0x13, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x12, 0x0F, 0x85, 0x0A, 0x00, 0x00, 0x00, 0xB8, 0x66, 0x16, 0x73, 0x00, 0xE8, 0xE0, 0xF1, 0xFF, 0xFF, 0xE8, 0xC3, 0xF2, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x69, 0x01, 0x00, 0x00, 0xE8, 0xD1, 0xF1, 0xFF, 0xFF, 0x8B, 0x88, 0x94, 0x00, 0x00, 0x00, 0xE8, 0x01, 0xF2, 0xFF, 0xFF, 0x3C, 0x05, 0x0F, 0x85, 0x1B, 0x00, 0x00, 0x00, 0x81, 0xF9, 0x10, 0x27, 0x00, 0x00, 0x0F, 0x8C, 0x45, 0x01, 0x00, 0x00, 0xB8, 0x05, 0x16, 0x73, 0x00, 0xE8, 0xA4, 0xF1, 0xFF, 0xFF, 0xE9, 0x36, 0x01, 0x00, 0x00, 0x3C, 0x04, 0x0F, 0x85, 0x1B, 0x00, 0x00, 0x00, 0x81, 0xF9, 0x20, 0x4E, 0x00, 0x00, 0x0F, 0x8C, 0x22, 0x01, 0x00, 0x00, 0xB8, 0x10, 0x16, 0x73, 0x00, 0xE8, 0x81, 0xF1, 0xFF, 0xFF, 0xE9, 0x13, 0x01, 0x00, 0x00, 0x3C, 0x06, 0x0F, 0x85, 0x1B, 0x00, 0x00, 0x00, 0x81, 0xF9, 0x30, 0x75, 0x00, 0x00, 0x0F, 0x8C, 0xFF, 0x00, 0x00, 0x00, 0xB8, 0x1A, 0x16, 0x73, 0x00, 0xE8, 0x5E, 0xF1, 0xFF, 0xFF, 0xE9, 0xF0, 0x00, 0x00, 0x00, 0x3C, 0x0A, 0x0F, 0x85, 0x1B, 0x00, 0x00, 0x00, 0x81, 0xF9, 0xF8, 0x24, 0x01, 0x00, 0x0F, 0x8C, 0xDC, 0x00, 0x00, 0x00, 0xB8, 0x26, 0x16, 0x73, 0x00, 0xE8, 0x3B, 0xF1, 0xFF, 0xFF, 0xE9, 0xCD, 0x00, 0x00, 0x00, 0x3C, 0x09, 0x0F, 0x85, 0x1B, 0x00, 0x00, 0x00, 0x81, 0xF9, 0x50, 0xC3, 0x00, 0x00, 0x0F, 0x8C, 0xB9, 0x00, 0x00, 0x00, 0xB8, 0x30, 0x16, 0x73, 0x00, 0xE8, 0x18, 0xF1, 0xFF, 0xFF, 0xE9, 0xAA, 0x00, 0x00, 0x00, 0x3C, 0x0B, 0x0F, 0x85, 0x1B, 0x00, 0x00, 0x00, 0x81, 0xF9, 0xA0, 0x86, 0x01, 0x00, 0x0F, 0x8C, 0x96, 0x00, 0x00, 0x00, 0xB8, 0x3A, 0x16, 0x73, 0x00, 0xE8, 0xF5, 0xF0, 0xFF, 0xFF, 0xE9, 0x87, 0x00, 0x00, 0x00, 0x3C, 0x10, 0x0F, 0x85, 0x1B, 0x00, 0x00, 0x00, 0x81, 0xF9, 0x90, 0xD0, 0x03, 0x00, 0x0F, 0x8C, 0x73, 0x00, 0x00, 0x00, 0xB8, 0x46, 0x16, 0x73, 0x00, 0xE8, 0xD2, 0xF0, 0xFF, 0xFF, 0xE9, 0x64, 0x00, 0x00, 0x00, 0x3C, 0x0F, 0x0F, 0x85, 0x1B, 0x00, 0x00, 0x00, 0x81, 0xF9, 0x20, 0xA1, 0x07, 0x00, 0x0F, 0x8C, 0x50, 0x00, 0x00, 0x00, 0xB8, 0x50, 0x16, 0x73, 0x00, 0xE8, 0xAF, 0xF0, 0xFF, 0xFF, 0xE9, 0x41, 0x00, 0x00, 0x00, 0x3C, 0x0E, 0x0F, 0x85, 0x1B, 0x00, 0x00, 0x00, 0x81, 0xF9, 0xB0, 0x71, 0x0B, 0x00, 0x0F, 0x8C, 0x2D, 0x00, 0x00, 0x00, 0xB8, 0x5A, 0x16, 0x73, 0x00, 0xE8, 0x8C, 0xF0, 0xFF, 0xFF, 0xE9, 0x1E, 0x00, 0x00, 0x00, 0x3C, 0x12, 0x0F, 0x85, 0x16, 0x00, 0x00, 0x00, 0x81, 0xF9, 0x40, 0x42, 0x0F, 0x00, 0x0F, 0x8C, 0x0A, 0x00, 0x00, 0x00, 0xB8, 0x67, 0x16, 0x73, 0x00, 0xE8, 0x69, 0xF0, 0xFF, 0xFF, 0xE8, 0x3E, 0xF1, 0xFF, 0xFF, 0x83, 0xF8, 0x01, 0x0F, 0x84, 0x0A, 0x00, 0x00, 0x00, 0xB8, 0x0A, 0x16, 0x73, 0x00, 0xE8, 0x51, 0xF0, 0xFF, 0xFF, 0x59, 0x58, 0x5F, 0x5E, 0x83, 0xC4, 0x10, 0xE9, 0xA4, 0xE5, 0xE7, 0xFF };
                        file.Write(achievement_tracking, 0, achievement_tracking.Length);

                        file.Position = 0xCD830;
                        byte[] comp_hook = { 0xE9, 0xC0, 0x85, 0x10, 0x00 };
                        file.Write(comp_hook, 0, comp_hook.Length);

                        file.Position = 0x30DE7;
                        byte[] suit_hook = { 0xE9, 0x1D, 0x54, 0x1A, 0x00 };
                        file.Write(suit_hook, 0, suit_hook.Length);

                        file.Position = 0xD99BC;
                        byte[] state_hook = { 0xE9, 0x5E, 0xC9, 0x0F, 0x00 };
                        file.Write(state_hook, 0, state_hook.Length);

                        file.Position = 0xD255D;
                        byte[] lev_hook = { 0xE9, 0x9A, 0x3E, 0x10, 0x00, 0x90, 0x90 };
                        file.Write(lev_hook, 0, lev_hook.Length);

                        file.Position = 0x1172A2;
                        byte[] touch_hook = { 0xE9, 0x6A, 0xF1, 0x0B, 0x00 };
                        file.Write(touch_hook, 0, touch_hook.Length);

                        file.Position = 0x183B1;
                        byte[] kill_hook = { 0xE9, 0xB6, 0xE0, 0x1B, 0x00, 0x90 };
                        file.Write(kill_hook, 0, kill_hook.Length);

                        file.Position = 0xA24F0;
                        byte[] save_hook = { 0xE9, 0x95, 0x42, 0x13, 0x00 };
                        file.Write(save_hook, 0, save_hook.Length);

                        file.Position = 0x90B52;
                        byte[] end_hook = { 0xE9, 0x58, 0x5C, 0x14, 0x00 };
                        file.Write(end_hook, 0, end_hook.Length);

                        file.Position = 0x7F6B1;
                        byte[] sand_hook = { 0xE9, 0x2F, 0x71, 0x15, 0x00 };
                        file.Write(sand_hook, 0, sand_hook.Length);

                        file.Position = 0x7F7F5;
                        byte[] gold_hook = { 0xE9, 0x05, 0x71, 0x15, 0x00, 0x90, 0x90, 0x90 };
                        file.Write(gold_hook, 0, gold_hook.Length);

                        file.Position = 0x55252;
                        byte[] thwap_hook = { 0xE9, 0xAB, 0x17, 0x18, 0x00 };
                        file.Write(thwap_hook, 0, thwap_hook.Length);
                    }
                    else
                    {
                        // Restore original code for achievements
                        file.Position = 0x1D5CF8;
                        byte[] achievement_tracking = { 0x8B, 0x44, 0x24, 0x04, 0xB9, 0x54, 0x01, 0x76, 0x88, 0x3B, 0xC1, 0x0F, 0x8F, 0xEE, 0x11, 0x00, 0x00, 0x0F, 0x84, 0xDE, 0x11, 0x00, 0x00, 0xB9, 0x7E, 0x04, 0x07, 0x80, 0x3B, 0xC1, 0x0F, 0x8F, 0xD7, 0x07, 0x00, 0x00, 0x0F, 0x84, 0xC7, 0x07, 0x00, 0x00, 0xB9, 0x47, 0x02, 0x04, 0x80, 0x3B, 0xC1, 0x0F, 0x8F, 0xE2, 0x03, 0x00, 0x00, 0x0F, 0x84, 0xD2, 0x03, 0x00, 0x00, 0x83, 0xC1, 0xD3, 0x3B, 0xC1, 0x0F, 0x8F, 0x4A, 0x02, 0x00, 0x00, 0x0F, 0x84, 0x3A, 0x02, 0x00, 0x00, 0xB9, 0x07, 0x02, 0x04, 0x80, 0x3B, 0xC1, 0x0F, 0x8F, 0x64, 0x01, 0x00, 0x00, 0x0F, 0x84, 0x54, 0x01, 0x00, 0x00, 0x83, 0xC1, 0xE9, 0x3B, 0xC1, 0x0F, 0x8F, 0xB5, 0x00, 0x00, 0x00, 0x0F, 0x84, 0xA5, 0x00, 0x00, 0x00, 0xB9, 0x04, 0x40, 0x00, 0x80, 0x3B, 0xC1, 0x7F, 0x54, 0x74, 0x48, 0x3D, 0x0A, 0x00, 0x00, 0x80, 0x74, 0x37, 0x3D, 0x01, 0x40, 0x00, 0x80, 0x74, 0x26, 0x3D, 0x02, 0x40, 0x00, 0x80, 0x74, 0x15, 0x3D, 0x03, 0x40, 0x00, 0x80, 0x0F, 0x85, 0x95, 0x21, 0x00, 0x00, 0xB8, 0x18, 0x3E, 0x61, 0x00, 0xE9, 0xA5, 0x21, 0x00, 0x00, 0xB8, 0xE8, 0x3D, 0x61, 0x00, 0xE9, 0x9B, 0x21, 0x00, 0x00, 0xB8, 0xB4, 0x3D, 0x61, 0x00, 0xE9, 0x91, 0x21, 0x00, 0x00, 0xB8, 0x70, 0x3D, 0x61, 0x00, 0xE9, 0x87, 0x21, 0x00, 0x00, 0xB8, 0x5C, 0x3D, 0x61, 0x00, 0xE9, 0x7D, 0x21, 0x00, 0x00, 0x3D, 0x05, 0x40, 0x00, 0x80, 0x74, 0x37, 0x3D, 0xFF, 0xFF, 0x00, 0x80, 0x74, 0x26, 0x3D, 0x10, 0x01, 0x04, 0x80, 0x74, 0x15, 0x3D, 0x54, 0x01, 0x04, 0x80, 0x0F, 0x85, 0x43, 0x21, 0x00, 0x00, 0xB8, 0x44, 0x3D, 0x61, 0x00, 0xE9, 0x53, 0x21, 0x00, 0x00, 0xB8, 0x18, 0x3D, 0x61, 0x00, 0xE9, 0x49, 0x21, 0x00, 0x00, 0xB8, 0x00, 0x3D, 0x61, 0x00, 0xE9, 0x3F, 0x21, 0x00, 0x00, 0xB8, 0xE0, 0x3C, 0x61, 0x00, 0xE9, 0x35, 0x21, 0x00, 0x00, 0xB8, 0xBC, 0x3C, 0x61, 0x00, 0xE9, 0x2B, 0x21, 0x00, 0x00, 0xB9, 0x03, 0x02, 0x04, 0x80, 0x3B, 0xC1, 0x7F, 0x54, 0x74, 0x48, 0x3D, 0xF1, 0x01, 0x04, 0x80, 0x74, 0x37, 0x3D, 0x00, 0x02, 0x04, 0x80, 0x74, 0x26, 0x3D, 0x01, 0x02, 0x04, 0x80, 0x74, 0x15, 0x3D, 0x02, 0x02, 0x04, 0x80, 0x0F, 0x85, 0xE6, 0x20, 0x00, 0x00, 0xB8, 0x48, 0x3C, 0x61, 0x00, 0xE9, 0xF6, 0x20, 0x00, 0x00, 0xB8, 0x04, 0x3C, 0x61, 0x00, 0xE9, 0xEC, 0x20, 0x00, 0x00, 0xB8, 0x58, 0x3B, 0x61, 0x00, 0xE9, 0xE2, 0x20, 0x00, 0x00, 0xB8, 0x2C, 0x3B, 0x61, 0x00, 0xE9, 0xD8, 0x20, 0x00, 0x00, 0xB8, 0xE8, 0x3A, 0x61, 0x00, 0xE9, 0xCE, 0x20, 0x00, 0x00, 0x3D, 0x04, 0x02, 0x04, 0x80, 0x74, 0x26, 0x3D, 0x05, 0x02, 0x04, 0x80, 0x74, 0x15, 0x3D, 0x06, 0x02, 0x04, 0x80, 0x0F, 0x85, 0x9B, 0x20, 0x00, 0x00, 0xB8, 0xF8, 0x39, 0x61, 0x00, 0xE9, 0xAB, 0x20, 0x00, 0x00, 0xB8, 0x58, 0x39, 0x61, 0x00, 0xE9, 0xA1, 0x20, 0x00, 0x00, 0xB8, 0xB8, 0x38, 0x61, 0x00, 0xE9, 0x97, 0x20, 0x00, 0x00, 0xB8, 0x38, 0x38, 0x61, 0x00, 0xE9, 0x8D, 0x20, 0x00, 0x00, 0x05, 0xF8, 0xFD, 0xFB, 0x7F, 0x83, 0xF8, 0x11, 0x0F, 0x87, 0x65, 0x20, 0x00, 0x00, 0xFF, 0x24, 0x85, 0x47, 0x7F, 0x5D, 0x00, 0xB8, 0x50, 0x37, 0x61, 0x00, 0xE9, 0x6E, 0x20, 0x00, 0x00, 0xB8, 0xB8, 0x36, 0x61, 0x00, 0xE9, 0x64, 0x20, 0x00, 0x00, 0xB8, 0x80, 0x35, 0x61, 0x00, 0xE9, 0x5A, 0x20, 0x00, 0x00, 0xB8, 0x00, 0x35, 0x61, 0x00, 0xE9, 0x50, 0x20, 0x00, 0x00, 0xB8, 0xE0, 0x34, 0x61, 0x00, 0xE9, 0x46, 0x20, 0x00, 0x00, 0xB8, 0xC0, 0x34, 0x61, 0x00, 0xE9, 0x3C, 0x20, 0x00, 0x00, 0xB8, 0x9C, 0x34, 0x61, 0x00, 0xE9, 0x32, 0x20, 0x00, 0x00, 0xB8, 0x60, 0x34, 0x61, 0x00, 0xE9, 0x28, 0x20, 0x00, 0x00, 0xB8, 0x38, 0x34, 0x61, 0x00, 0xE9, 0x1E, 0x20, 0x00, 0x00, 0xB8, 0xFC, 0x33, 0x61, 0x00, 0xE9, 0x14, 0x20, 0x00, 0x00, 0xB8, 0xC4, 0x33, 0x61, 0x00, 0xE9, 0x0A, 0x20, 0x00, 0x00, 0xB8, 0x80, 0x33, 0x61, 0x00, 0xE9, 0x00, 0x20, 0x00, 0x00, 0xB8, 0x30, 0x33, 0x61, 0x00, 0xE9, 0xF6, 0x1F, 0x00, 0x00, 0xB8, 0xFC, 0x32, 0x61, 0x00, 0xE9, 0xEC, 0x1F, 0x00, 0x00, 0xB8, 0xD8, 0x32, 0x61, 0x00, 0xE9, 0xE2, 0x1F, 0x00, 0x00, 0xB8, 0x88, 0x32, 0x61, 0x00, 0xE9, 0xD8, 0x1F, 0x00, 0x00, 0xB8, 0x48, 0x32, 0x61, 0x00, 0xE9, 0xCE, 0x1F, 0x00, 0x00, 0xB8, 0x20, 0x32, 0x61, 0x00, 0xE9, 0xC4, 0x1F, 0x00, 0x00, 0xB8, 0x04, 0x32, 0x61, 0x00, 0xE9, 0xBA, 0x1F, 0x00, 0x00, 0x05, 0xE5, 0xFD, 0xFB, 0x7F, 0x83, 0xF8, 0x29, 0x0F, 0x87, 0x92, 0x1F, 0x00, 0x00, 0xFF, 0x24, 0x85, 0x8F, 0x7F, 0x5D, 0x00, 0xB8, 0xC8, 0x31, 0x61, 0x00, 0xE9, 0x9B, 0x1F, 0x00, 0x00, 0xB8, 0x88, 0x31, 0x61, 0x00, 0xE9, 0x91, 0x1F, 0x00, 0x00, 0xB8, 0x40, 0x31, 0x61, 0x00, 0xE9, 0x87, 0x1F, 0x00, 0x00, 0xB8, 0xF8, 0x30, 0x61, 0x00, 0xE9, 0x7D, 0x1F, 0x00, 0x00, 0xB8, 0xD0, 0x30, 0x61, 0x00, 0xE9, 0x73, 0x1F, 0x00, 0x00, 0xB8, 0xB4, 0x30, 0x61, 0x00, 0xE9, 0x69, 0x1F, 0x00, 0x00, 0xB8, 0x94, 0x30, 0x61, 0x00, 0xE9, 0x5F, 0x1F, 0x00, 0x00, 0xB8, 0x60, 0x30, 0x61, 0x00, 0xE9, 0x55, 0x1F, 0x00, 0x00, 0xB8, 0x28, 0x30, 0x61, 0x00, 0xE9, 0x4B, 0x1F, 0x00, 0x00, 0xB8, 0xE0, 0x2F, 0x61, 0x00, 0xE9, 0x41, 0x1F, 0x00, 0x00, 0xB8, 0x98, 0x2F, 0x61, 0x00, 0xE9, 0x37, 0x1F, 0x00, 0x00, 0xB8, 0x50, 0x2F, 0x61, 0x00, 0xE9, 0x2D, 0x1F, 0x00, 0x00, 0xB8, 0x00, 0x2F, 0x61, 0x00, 0xE9, 0x23, 0x1F, 0x00, 0x00, 0xB8, 0xCC, 0x2E, 0x61, 0x00, 0xE9, 0x19, 0x1F, 0x00, 0x00, 0xB8, 0xA8, 0x2E, 0x61, 0x00, 0xE9, 0x0F, 0x1F, 0x00, 0x00, 0xB8, 0x78, 0x2E, 0x61, 0x00, 0xE9, 0x05, 0x1F, 0x00, 0x00, 0xB8, 0x58, 0x2E, 0x61, 0x00, 0xE9, 0xFB, 0x1E, 0x00, 0x00, 0xB8, 0x08, 0x2E, 0x61, 0x00, 0xE9, 0xF1, 0x1E, 0x00, 0x00, 0xB8, 0xCC, 0x2D, 0x61, 0x00, 0xE9, 0xE7, 0x1E, 0x00, 0x00, 0xB8, 0xB4, 0x2D, 0x61, 0x00, 0xE9, 0xDD, 0x1E, 0x00, 0x00, 0xB8, 0x98, 0x2D, 0x61, 0x00, 0xE9, 0xD3, 0x1E, 0x00, 0x00, 0xB8, 0x70, 0x2D, 0x61, 0x00, 0xE9, 0xC9, 0x1E, 0x00, 0x00, 0xB8, 0x50, 0x2D, 0x61, 0x00, 0xE9, 0xBF, 0x1E, 0x00, 0x00, 0xB8, 0x28, 0x2D, 0x61, 0x00, 0xE9, 0xB5, 0x1E, 0x00, 0x00, 0xB8, 0xE8, 0x2C, 0x61, 0x00, 0xE9, 0xAB, 0x1E, 0x00, 0x00, 0xB8, 0xB8, 0x2C, 0x61, 0x00, 0xE9, 0xA1, 0x1E, 0x00, 0x00, 0xB8, 0x88, 0x2C, 0x61, 0x00, 0xE9, 0x97, 0x1E, 0x00, 0x00, 0xB8, 0x60, 0x2C, 0x61, 0x00, 0xE9, 0x8D, 0x1E, 0x00, 0x00, 0xB8, 0x3C, 0x2C, 0x61, 0x00, 0xE9, 0x83, 0x1E, 0x00, 0x00, 0xB8, 0xF8, 0x2B, 0x61, 0x00, 0xE9, 0x79, 0x1E, 0x00, 0x00, 0xB8, 0xCC, 0x2B, 0x61, 0x00, 0xE9, 0x6F, 0x1E, 0x00, 0x00, 0xB8, 0x90, 0x2B, 0x61, 0x00, 0xE9, 0x65, 0x1E, 0x00, 0x00, 0xB8, 0x60, 0x2B, 0x61, 0x00, 0xE9, 0x5B, 0x1E, 0x00, 0x00, 0xB8, 0x28, 0x2B, 0x61, 0x00, 0xE9, 0x51, 0x1E, 0x00, 0x00, 0xB8, 0x04, 0x2B, 0x61, 0x00, 0xE9, 0x47, 0x1E, 0x00, 0x00, 0xB8, 0xD8, 0x2A, 0x61, 0x00, 0xE9, 0x3D, 0x1E, 0x00, 0x00, 0xB8, 0x98, 0x2A, 0x61, 0x00, 0xE9, 0x33, 0x1E, 0x00, 0x00, 0xB9, 0x85, 0x02, 0x04, 0x80, 0x3B, 0xC1, 0x0F, 0x8F, 0x8A, 0x01, 0x00, 0x00, 0x0F, 0x84, 0x7A, 0x01, 0x00, 0x00, 0x05, 0xB8, 0xFD, 0xFB, 0x7F, 0x83, 0xF8, 0x3C, 0x0F, 0x87, 0xF8, 0x1D, 0x00, 0x00, 0x0F, 0xB6, 0x80, 0xCF, 0x80, 0x5D, 0x00, 0xFF, 0x24, 0x85, 0x37, 0x80, 0x5D, 0x00, 0xB8, 0x5C, 0x2A, 0x61, 0x00, 0xE9, 0xFA, 0x1D, 0x00, 0x00, 0xB8, 0x30, 0x2A, 0x61, 0x00, 0xE9, 0xF0, 0x1D, 0x00, 0x00, 0xB8, 0xFC, 0x29, 0x61, 0x00, 0xE9, 0xE6, 0x1D, 0x00, 0x00, 0xB8, 0xD4, 0x29, 0x61, 0x00, 0xE9, 0xDC, 0x1D, 0x00, 0x00, 0xB8, 0x98, 0x29, 0x61, 0x00, 0xE9, 0xD2, 0x1D, 0x00, 0x00, 0xB8, 0x30, 0x29, 0x61, 0x00, 0xE9, 0xC8, 0x1D, 0x00, 0x00, 0xB8, 0xF8, 0x28, 0x61, 0x00, 0xE9, 0xBE, 0x1D, 0x00, 0x00, 0xB8, 0xB0, 0x28, 0x61, 0x00, 0xE9, 0xB4, 0x1D, 0x00, 0x00, 0xB8, 0x68, 0x28, 0x61, 0x00, 0xE9, 0xAA, 0x1D, 0x00, 0x00, 0xB8, 0x08, 0x28, 0x61, 0x00, 0xE9, 0xA0, 0x1D, 0x00, 0x00, 0xB8, 0xB0, 0x27, 0x61, 0x00, 0xE9, 0x96, 0x1D, 0x00, 0x00, 0xB8, 0x40, 0x27, 0x61, 0x00, 0xE9, 0x8C, 0x1D, 0x00, 0x00, 0xB8, 0xE0, 0x26, 0x61, 0x00, 0xE9, 0x82, 0x1D, 0x00, 0x00, 0xB8, 0xBC, 0x26, 0x61, 0x00, 0xE9, 0x78, 0x1D, 0x00, 0x00, 0xB8, 0x80, 0x26, 0x61, 0x00, 0xE9, 0x6E, 0x1D, 0x00, 0x00, 0xB8, 0x40, 0x26, 0x61, 0x00, 0xE9, 0x64, 0x1D, 0x00, 0x00, 0xB8, 0xF0, 0x25, 0x61, 0x00, 0xE9, 0x5A, 0x1D, 0x00, 0x00, 0xB8, 0x78, 0x25, 0x61, 0x00, 0xE9, 0x50, 0x1D, 0x00, 0x00, 0xB8, 0x3C, 0x25, 0x61, 0x00, 0xE9, 0x46, 0x1D, 0x00, 0x00, 0xB8, 0xB0, 0x24, 0x61, 0x00, 0xE9, 0x3C, 0x1D, 0x00, 0x00, 0xB8, 0x68, 0x24, 0x61, 0x00, 0xE9, 0x32, 0x1D, 0x00, 0x00, 0xB8, 0x20, 0x24, 0x61, 0x00, 0xE9, 0x28, 0x1D, 0x00, 0x00, 0xB8, 0xE0, 0x23, 0x61, 0x00, 0xE9, 0x1E, 0x1D, 0x00, 0x00, 0xB8, 0xA8, 0x23, 0x61, 0x00, 0xE9, 0x14, 0x1D, 0x00, 0x00, 0xB8, 0x28, 0x23, 0x61, 0x00, 0xE9, 0x0A, 0x1D, 0x00, 0x00, 0xB8, 0xF0, 0x22, 0x61, 0x00, 0xE9, 0x00, 0x1D, 0x00, 0x00, 0xB8, 0xC4, 0x22, 0x61, 0x00, 0xE9, 0xF6, 0x1C, 0x00, 0x00, 0xB8, 0x78, 0x22, 0x61, 0x00, 0xE9, 0xEC, 0x1C, 0x00, 0x00, 0xB8, 0x20, 0x22, 0x61, 0x00, 0xE9, 0xE2, 0x1C, 0x00, 0x00, 0xB8, 0xB0, 0x21, 0x61, 0x00, 0xE9, 0xD8, 0x1C, 0x00, 0x00, 0xB8, 0x74, 0x21, 0x61, 0x00, 0xE9, 0xCE, 0x1C, 0x00, 0x00, 0xB8, 0x30, 0x21, 0x61, 0x00, 0xE9, 0xC4, 0x1C, 0x00, 0x00, 0xB8, 0x08, 0x21, 0x61, 0x00, 0xE9, 0xBA, 0x1C, 0x00, 0x00, 0xB8, 0xC8, 0x20, 0x61, 0x00, 0xE9, 0xB0, 0x1C, 0x00, 0x00, 0xB8, 0x94, 0x20, 0x61, 0x00, 0xE9, 0xA6, 0x1C, 0x00, 0x00, 0xB8, 0x78, 0x20, 0x61, 0x00, 0xE9, 0x9C, 0x1C, 0x00, 0x00, 0xB9, 0x00, 0x03, 0x04, 0x80, 0x3B, 0xC1, 0x0F, 0x8F, 0xB1, 0x00, 0x00, 0x00, 0x0F, 0x84, 0xA1, 0x00, 0x00, 0x00, 0x05, 0x7A, 0xFD, 0xFB, 0x7F, 0x83, 0xF8, 0x0F, 0x0F, 0x87, 0x61, 0x1C, 0x00, 0x00, 0xFF, 0x24, 0x85, 0x0C, 0x81, 0x5D, 0x00, 0xB8, 0x4C, 0x20, 0x61, 0x00, 0xE9, 0x6A, 0x1C, 0x00, 0x00, 0xB8, 0x14, 0x20, 0x61, 0x00, 0xE9, 0x60, 0x1C, 0x00, 0x00, 0xB8, 0xE0, 0x1F, 0x61, 0x00, 0xE9, 0x56, 0x1C, 0x00, 0x00, 0xB8, 0x98, 0x1F, 0x61, 0x00, 0xE9, 0x4C, 0x1C, 0x00, 0x00, 0xB8, 0x6C, 0x1F, 0x61, 0x00, 0xE9, 0x42, 0x1C, 0x00, 0x00, 0xB8, 0x40, 0x1F, 0x61, 0x00, 0xE9, 0x38, 0x1C, 0x00, 0x00, 0xB8, 0x0C, 0x1F, 0x61, 0x00, 0xE9, 0x2E, 0x1C, 0x00, 0x00, 0xB8, 0xD0, 0x1E, 0x61, 0x00, 0xE9, 0x24, 0x1C, 0x00, 0x00, 0xB8, 0x28, 0x1E, 0x61, 0x00, 0xE9, 0x1A, 0x1C, 0x00, 0x00, 0xB8, 0xF0, 0x1D, 0x61, 0x00, 0xE9, 0x10, 0x1C, 0x00, 0x00, 0xB8, 0xC4, 0x1D, 0x61, 0x00, 0xE9, 0x06, 0x1C, 0x00, 0x00, 0xB8, 0x58, 0x1D, 0x61, 0x00, 0xE9, 0xFC, 0x1B, 0x00, 0x00, 0xB8, 0xC8, 0x1C, 0x61, 0x00, 0xE9, 0xF2, 0x1B, 0x00, 0x00, 0xB8, 0x94, 0x1C, 0x61, 0x00, 0xE9, 0xE8, 0x1B, 0x00, 0x00, 0xB8, 0xD8, 0x1B, 0x61, 0x00, 0xE9, 0xDE, 0x1B, 0x00, 0x00, 0xB9, 0x02, 0x00, 0x07, 0x80, 0x3B, 0xC1, 0x0F, 0x8F, 0xC6, 0x00, 0x00, 0x00, 0x0F, 0x84, 0xB6, 0x00, 0x00, 0x00, 0xB9, 0xF2, 0x03, 0x04, 0x80, 0x3B, 0xC1, 0x7F, 0x65, 0x74, 0x59, 0x3D, 0x01, 0x03, 0x04, 0x80, 0x74, 0x48, 0x3D, 0x02, 0x03, 0x04, 0x80, 0x74, 0x37, 0x3D, 0x03, 0x03, 0x04, 0x80, 0x74, 0x26, 0x3D, 0x04, 0x03, 0x04, 0x80, 0x74, 0x15, 0x3D, 0x05, 0x03, 0x04, 0x80, 0x0F, 0x85, 0x7F, 0x1B, 0x00, 0x00, 0xB8, 0x70, 0x35, 0x60, 0x00, 0xE9, 0x8F, 0x1B, 0x00, 0x00, 0xB8, 0x5C, 0x35, 0x60, 0x00, 0xE9, 0x85, 0x1B, 0x00, 0x00, 0xB8, 0x48, 0x35, 0x60, 0x00, 0xE9, 0x7B, 0x1B, 0x00, 0x00, 0xB8, 0x34, 0x35, 0x60, 0x00, 0xE9, 0x71, 0x1B, 0x00, 0x00, 0xB8, 0x20, 0x35, 0x60, 0x00, 0xE9, 0x67, 0x1B, 0x00, 0x00, 0xB8, 0xB8, 0x1B, 0x61, 0x00, 0xE9, 0x5D, 0x1B, 0x00, 0x00, 0x3D, 0xFF, 0x03, 0x04, 0x80, 0x74, 0x37, 0x3D, 0x00, 0x04, 0x04, 0x80, 0x74, 0x26, 0x3D, 0x01, 0x04, 0x04, 0x80, 0x74, 0x15, 0x3D, 0x02, 0x04, 0x04, 0x80, 0x0F, 0x85, 0x23, 0x1B, 0x00, 0x00, 0xB8, 0x60, 0x1B, 0x61, 0x00, 0xE9, 0x33, 0x1B, 0x00, 0x00, 0xB8, 0x30, 0x1B, 0x61, 0x00, 0xE9, 0x29, 0x1B, 0x00, 0x00, 0xB8, 0xE0, 0x1A, 0x61, 0x00, 0xE9, 0x1F, 0x1B, 0x00, 0x00, 0xB8, 0xC0, 0x1A, 0x61, 0x00, 0xE9, 0x15, 0x1B, 0x00, 0x00, 0xB8, 0x98, 0x1A, 0x61, 0x00, 0xE9, 0x0B, 0x1B, 0x00, 0x00, 0xB9, 0x1E, 0x00, 0x07, 0x80, 0x3B, 0xC1, 0x7F, 0x5F, 0x74, 0x53, 0x3D, 0x05, 0x00, 0x07, 0x80, 0x74, 0x42, 0x3D, 0x06, 0x00, 0x07, 0x80, 0x0F, 0x84, 0xC5, 0x05, 0x00, 0x00, 0x3D, 0x0C, 0x00, 0x07, 0x80, 0x74, 0x26, 0x3D, 0x0E, 0x00, 0x07, 0x80, 0x74, 0x15, 0x3D, 0x15, 0x00, 0x07, 0x80, 0x0F, 0x85, 0xBB, 0x1A, 0x00, 0x00, 0xB8, 0x70, 0x1A, 0x61, 0x00, 0xE9, 0xCB, 0x1A, 0x00, 0x00, 0xB8, 0x5C, 0x1A, 0x61, 0x00, 0xE9, 0xC1, 0x1A, 0x00, 0x00, 0xB8, 0x18, 0x1A, 0x61, 0x00, 0xE9, 0xB7, 0x1A, 0x00, 0x00, 0xB8, 0x00, 0x1A, 0x61, 0x00, 0xE9, 0xAD, 0x1A, 0x00, 0x00, 0xB8, 0xC0, 0x19, 0x61, 0x00, 0xE9, 0xA3, 0x1A, 0x00, 0x00, 0x3D, 0x57, 0x00, 0x07, 0x80, 0x74, 0x37, 0x3D, 0x77, 0x00, 0x07, 0x80, 0x74, 0x26, 0x3D, 0xAA, 0x00, 0x07, 0x80, 0x74, 0x15, 0x3D, 0x03, 0x01, 0x07, 0x80, 0x0F, 0x85, 0x69, 0x1A, 0x00, 0x00, 0xB8, 0xB0, 0x19, 0x61, 0x00, 0xE9, 0x79, 0x1A, 0x00, 0x00, 0xB8, 0x70, 0x19, 0x61, 0x00, 0xE9, 0x6F, 0x1A, 0x00, 0x00, 0xB8, 0xF8, 0x18, 0x61, 0x00, 0xE9, 0x65, 0x1A, 0x00, 0x00, 0xB8, 0xBC, 0x18, 0x61, 0x00, 0xE9, 0x5B, 0x1A, 0x00, 0x00, 0xB8, 0x80, 0x18, 0x61, 0x00, 0xE9, 0x51, 0x1A, 0x00, 0x00, 0xB9, 0x80, 0x82, 0x15, 0x80, 0x3B, 0xC1, 0x0F, 0x8F, 0x5D, 0x04, 0x00, 0x00, 0x0F, 0x84, 0x4D, 0x04, 0x00, 0x00, 0xB9, 0x84, 0x01, 0x15, 0x80, 0x3B, 0xC1, 0x0F, 0x8F, 0xF3, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xE3, 0x01, 0x00, 0x00, 0x83, 0xC1, 0xEB, 0x3B, 0xC1, 0x0F, 0x8F, 0x2D, 0x01, 0x00, 0x00, 0x0F, 0x84, 0x1B, 0x06, 0x00, 0x00, 0xB9, 0x91, 0x00, 0x15, 0x80, 0x3B, 0xC1, 0x0F, 0x8F, 0x8C, 0x00, 0x00, 0x00, 0x0F, 0x84, 0xE8, 0x04, 0x00, 0x00, 0x83, 0xC1, 0x8D, 0x3B, 0xC1, 0x7F, 0x4E, 0x0F, 0x84, 0xD4, 0x02, 0x00, 0x00, 0x3D, 0x81, 0x04, 0x07, 0x80, 0x74, 0x37, 0x3D, 0x90, 0x04, 0x07, 0x80, 0x74, 0x26, 0x3D, 0x92, 0x04, 0x07, 0x80, 0x74, 0x15, 0x3D, 0xDF, 0x04, 0x07, 0x80, 0x0F, 0x85, 0xC0, 0x19, 0x00, 0x00, 0xB8, 0x5C, 0x18, 0x61, 0x00, 0xE9, 0xD0, 0x19, 0x00, 0x00, 0xB8, 0x2C, 0x18, 0x61, 0x00, 0xE9, 0xC6, 0x19, 0x00, 0x00, 0xB8, 0xE0, 0x17, 0x61, 0x00, 0xE9, 0xBC, 0x19, 0x00, 0x00, 0xB8, 0x88, 0x17, 0x61, 0x00, 0xE9, 0xB2, 0x19, 0x00, 0x00, 0x3D, 0x4A, 0x00, 0x15, 0x80, 0x74, 0x20, 0x3D, 0x78, 0x00, 0x15, 0x80, 0x0F, 0x84, 0x8B, 0x04, 0x00, 0x00, 0x3D, 0x82, 0x00, 0x15, 0x80, 0x0F, 0x84, 0xD3, 0x04, 0x00, 0x00, 0x3D, 0x87, 0x00, 0x15, 0x80, 0xE9, 0xAF, 0x04, 0x00, 0x00, 0xB8, 0x7C, 0x17, 0x61, 0x00, 0xE9, 0x81, 0x19, 0x00, 0x00, 0xB9, 0x69, 0x01, 0x15, 0x80, 0x3B, 0xC1, 0x7F, 0x4E, 0x74, 0x42, 0x3D, 0x96, 0x00, 0x15, 0x80, 0x0F, 0x84, 0x42, 0x04, 0x00, 0x00, 0x3D, 0x2C, 0x01, 0x15, 0x80, 0x74, 0x26, 0x3D, 0x2E, 0x01, 0x15, 0x80, 0x74, 0x15, 0x3D, 0x68, 0x01, 0x15, 0x80, 0x0F, 0x85, 0x38, 0x19, 0x00, 0x00, 0xB8, 0x6C, 0x17, 0x61, 0x00, 0xE9, 0x48, 0x19, 0x00, 0x00, 0xB8, 0x58, 0x17, 0x61, 0x00, 0xE9, 0x3E, 0x19, 0x00, 0x00, 0xB8, 0x48, 0x17, 0x61, 0x00, 0xE9, 0x34, 0x19, 0x00, 0x00, 0xB8, 0x38, 0x17, 0x61, 0x00, 0xE9, 0x2A, 0x19, 0x00, 0x00, 0x3D, 0x6A, 0x01, 0x15, 0x80, 0x74, 0x26, 0x3D, 0x6B, 0x01, 0x15, 0x80, 0x74, 0x15, 0x3D, 0x6E, 0x01, 0x15, 0x80, 0x0F, 0x85, 0xF7, 0x18, 0x00, 0x00, 0xB8, 0x24, 0x17, 0x61, 0x00, 0xE9, 0x07, 0x19, 0x00, 0x00, 0xB8, 0x14, 0x17, 0x61, 0x00, 0xE9, 0xFD, 0x18, 0x00, 0x00, 0xB8, 0x08, 0x17, 0x61, 0x00, 0xE9, 0xF3, 0x18, 0x00, 0x00, 0x05, 0x90, 0xFE, 0xEA, 0x7F, 0x83, 0xF8, 0x13, 0x0F, 0x87, 0xCB, 0x18, 0x00, 0x00, 0xFF, 0x24, 0x85, 0x4C, 0x81, 0x5D, 0x00, 0xB8, 0xF8, 0x16, 0x61, 0x00, 0xE9, 0xD4, 0x18, 0x00, 0x00, 0xB8, 0xE4, 0x16, 0x61, 0x00, 0xE9, 0xCA, 0x18, 0x00, 0x00, 0xB8, 0xC8, 0x16, 0x61, 0x00, 0xE9, 0xC0, 0x18, 0x00, 0x00, 0xB8, 0xB8, 0x16, 0x61, 0x00, 0xE9, 0xB6, 0x18, 0x00, 0x00, 0xB8, 0xA4, 0x16, 0x61, 0x00, 0xE9, 0xAC, 0x18, 0x00, 0x00, 0xB8, 0x98, 0x16, 0x61, 0x00, 0xE9, 0xA2, 0x18, 0x00, 0x00, 0xB8, 0x88, 0x16, 0x61, 0x00, 0xE9, 0x98, 0x18, 0x00, 0x00, 0xB8, 0x7C, 0x16, 0x61, 0x00, 0xE9, 0x8E, 0x18, 0x00, 0x00, 0xB8, 0x68, 0x16, 0x61, 0x00, 0xE9, 0x84, 0x18, 0x00, 0x00, 0xB8, 0x58, 0x16, 0x61, 0x00, 0xE9, 0x7A, 0x18, 0x00, 0x00, 0xB8, 0x4C, 0x16, 0x61, 0x00, 0xE9, 0x70, 0x18, 0x00, 0x00, 0xB8, 0x38, 0x16, 0x61, 0x00, 0xE9, 0x66, 0x18, 0x00, 0x00, 0xB8, 0x20, 0x16, 0x61, 0x00, 0xE9, 0x5C, 0x18, 0x00, 0x00, 0xB8, 0x14, 0x16, 0x61, 0x00, 0xE9, 0x52, 0x18, 0x00, 0x00, 0xB8, 0x08, 0x16, 0x61, 0x00, 0xE9, 0x48, 0x18, 0x00, 0x00, 0xB8, 0xF0, 0x15, 0x61, 0x00, 0xE9, 0x3E, 0x18, 0x00, 0x00, 0xB9, 0x30, 0x80, 0x15, 0x80, 0x3B, 0xC1, 0x0F, 0x8F, 0x85, 0x00, 0x00, 0x00, 0x74, 0x79, 0x05, 0x79, 0xFE, 0xEA, 0x7F, 0x83, 0xF8, 0x09, 0x0F, 0x87, 0x07, 0x18, 0x00, 0x00, 0xFF, 0x24, 0x85, 0x9C, 0x81, 0x5D, 0x00, 0xB8, 0xE4, 0x15, 0x61, 0x00, 0xE9, 0x10, 0x18, 0x00, 0x00, 0xB8, 0xD4, 0x15, 0x61, 0x00, 0xE9, 0x06, 0x18, 0x00, 0x00, 0xB8, 0xC8, 0x15, 0x61, 0x00, 0xE9, 0xFC, 0x17, 0x00, 0x00, 0xB8, 0xB4, 0x15, 0x61, 0x00, 0xE9, 0xF2, 0x17, 0x00, 0x00, 0xB8, 0x9C, 0x15, 0x61, 0x00, 0xE9, 0xE8, 0x17, 0x00, 0x00, 0xB8, 0x88, 0x15, 0x61, 0x00, 0xE9, 0xDE, 0x17, 0x00, 0x00, 0xB8, 0x7C, 0x15, 0x61, 0x00, 0xE9, 0xD4, 0x17, 0x00, 0x00, 0xB8, 0x64, 0x15, 0x61, 0x00, 0xE9, 0xCA, 0x17, 0x00, 0x00, 0xB8, 0x54, 0x15, 0x61, 0x00, 0xE9, 0xC0, 0x17, 0x00, 0x00, 0xB8, 0x44, 0x15, 0x61, 0x00, 0xE9, 0xB6, 0x17, 0x00, 0x00, 0xB8, 0x3C, 0x15, 0x61, 0x00, 0xE9, 0xAC, 0x17, 0x00, 0x00, 0xB9, 0x60, 0x81, 0x15, 0x80, 0x3B, 0xC1, 0x0F, 0x8F, 0xDC, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x47, 0xFE, 0xFF, 0xFF, 0x83, 0xC1, 0xA0, 0x3B, 0xC1, 0x7F, 0x76, 0x74, 0x6A, 0x3D, 0x40, 0x80, 0x15, 0x80, 0x74, 0x59, 0x3D, 0x50, 0x80, 0x15, 0x80, 0x74, 0x48, 0x3D, 0x60, 0x80, 0x15, 0x80, 0x74, 0x37, 0x3D, 0x70, 0x80, 0x15, 0x80, 0x74, 0x26, 0x3D, 0x80, 0x80, 0x15, 0x80, 0x74, 0x15, 0x3D, 0x90, 0x80, 0x15, 0x80, 0x0F, 0x85, 0x48, 0x17, 0x00, 0x00, 0xB8, 0x28, 0x15, 0x61, 0x00, 0xE9, 0x58, 0x17, 0x00, 0x00, 0xB8, 0x14, 0x15, 0x61, 0x00, 0xE9, 0x4E, 0x17, 0x00, 0x00, 0xB8, 0xFC, 0x14, 0x61, 0x00, 0xE9, 0x44, 0x17, 0x00, 0x00, 0xB8, 0xE8, 0x14, 0x61, 0x00, 0xE9, 0x3A, 0x17, 0x00, 0x00, 0xB8, 0xD8, 0x14, 0x61, 0x00, 0xE9, 0x30, 0x17, 0x00, 0x00, 0xB8, 0xCC, 0x14, 0x61, 0x00, 0xE9, 0x26, 0x17, 0x00, 0x00, 0xB8, 0xB8, 0x14, 0x61, 0x00, 0xE9, 0x1C, 0x17, 0x00, 0x00, 0x3D, 0x10, 0x81, 0x15, 0x80, 0x74, 0x48, 0x3D, 0x20, 0x81, 0x15, 0x80, 0x74, 0x37, 0x3D, 0x30, 0x81, 0x15, 0x80, 0x74, 0x26, 0x3D, 0x40, 0x81, 0x15, 0x80, 0x74, 0x15, 0x3D, 0x50, 0x81, 0x15, 0x80, 0x0F, 0x85, 0xDB, 0x16, 0x00, 0x00, 0xB8, 0xAC, 0x14, 0x61, 0x00, 0xE9, 0xEB, 0x16, 0x00, 0x00, 0xB8, 0x94, 0x14, 0x61, 0x00, 0xE9, 0xE1, 0x16, 0x00, 0x00, 0xB8, 0x80, 0x14, 0x61, 0x00, 0xE9, 0xD7, 0x16, 0x00, 0x00, 0xB8, 0x6C, 0x14, 0x61, 0x00, 0xE9, 0xCD, 0x16, 0x00, 0x00, 0xB8, 0x5C, 0x14, 0x61, 0x00, 0xE9, 0xC3, 0x16, 0x00, 0x00, 0xB9, 0x20, 0x82, 0x15, 0x80, 0x3B, 0xC1, 0x7F, 0x76, 0x74, 0x6A, 0x3D, 0x70, 0x81, 0x15, 0x80, 0x74, 0x59, 0x3D, 0x75, 0x81, 0x15, 0x80, 0x74, 0x48, 0x3D, 0x80, 0x81, 0x15, 0x80, 0x74, 0x37, 0x3D, 0x90, 0x81, 0x15, 0x80, 0x74, 0x26, 0x3D, 0x00, 0x82, 0x15, 0x80, 0x74, 0x15, 0x3D, 0x10, 0x82, 0x15, 0x80, 0x0F, 0x85, 0x70, 0x16, 0x00, 0x00, 0xB8, 0x44, 0x14, 0x61, 0x00, 0xE9, 0x80, 0x16, 0x00, 0x00, 0xB8, 0x2C, 0x14, 0x61, 0x00, 0xE9, 0x76, 0x16, 0x00, 0x00, 0xB8, 0x18, 0x14, 0x61, 0x00, 0xE9, 0x6C, 0x16, 0x00, 0x00, 0xB8, 0x08, 0x14, 0x61, 0x00, 0xE9, 0x62, 0x16, 0x00, 0x00, 0xB8, 0xF8, 0x13, 0x61, 0x00, 0xE9, 0x58, 0x16, 0x00, 0x00, 0xB8, 0xEC, 0x13, 0x61, 0x00, 0xE9, 0x4E, 0x16, 0x00, 0x00, 0xB8, 0xD4, 0x13, 0x61, 0x00, 0xE9, 0x44, 0x16, 0x00, 0x00, 0x3D, 0x30, 0x82, 0x15, 0x80, 0x0F, 0x84, 0xAE, 0xFC, 0xFF, 0xFF, 0x3D, 0x40, 0x82, 0x15, 0x80, 0x74, 0x37, 0x3D, 0x50, 0x82, 0x15, 0x80, 0x74, 0x26, 0x3D, 0x60, 0x82, 0x15, 0x80, 0x74, 0x15, 0x3D, 0x70, 0x82, 0x15, 0x80, 0x0F, 0x85, 0xFF, 0x15, 0x00, 0x00, 0xB8, 0xBC, 0x13, 0x61, 0x00, 0xE9, 0x0F, 0x16, 0x00, 0x00, 0xB8, 0xA0, 0x13, 0x61, 0x00, 0xE9, 0x05, 0x16, 0x00, 0x00, 0xB8, 0x98, 0x13, 0x61, 0x00, 0xE9, 0xFB, 0x15, 0x00, 0x00, 0xB8, 0x88, 0x13, 0x61, 0x00, 0xE9, 0xF1, 0x15, 0x00, 0x00, 0xB8, 0x74, 0x13, 0x61, 0x00, 0xE9, 0xE7, 0x15, 0x00, 0x00, 0xB9, 0x14, 0x00, 0x76, 0x88, 0x3B, 0xC1, 0x0F, 0x8F, 0xCF, 0x02, 0x00, 0x00, 0x0F, 0x84, 0xBF, 0x02, 0x00, 0x00, 0xB9, 0x70, 0x84, 0x15, 0x80, 0x3B, 0xC1, 0x0F, 0x8F, 0x64, 0x01, 0x00, 0x00, 0x0F, 0x84, 0x54, 0x01, 0x00, 0x00, 0xB9, 0x80, 0x83, 0x15, 0x80, 0x3B, 0xC1, 0x0F, 0x8F, 0xB3, 0x00, 0x00, 0x00, 0x0F, 0x84, 0xA3, 0x00, 0x00, 0x00, 0x83, 0xC1, 0xB0, 0x3B, 0xC1, 0x7F, 0x54, 0x74, 0x48, 0x3D, 0x90, 0x82, 0x15, 0x80, 0x74, 0x37, 0x3D, 0x00, 0x83, 0x15, 0x80, 0x74, 0x26, 0x3D, 0x10, 0x83, 0x15, 0x80, 0x74, 0x15, 0x3D, 0x20, 0x83, 0x15, 0x80, 0x0F, 0x85, 0x6B, 0x15, 0x00, 0x00, 0xB8, 0x5C, 0x13, 0x61, 0x00, 0xE9, 0x7B, 0x15, 0x00, 0x00, 0xB8, 0x4C, 0x13, 0x61, 0x00, 0xE9, 0x71, 0x15, 0x00, 0x00, 0xB8, 0x38, 0x13, 0x61, 0x00, 0xE9, 0x67, 0x15, 0x00, 0x00, 0xB8, 0x20, 0x13, 0x61, 0x00, 0xE9, 0x5D, 0x15, 0x00, 0x00, 0xB8, 0x0C, 0x13, 0x61, 0x00, 0xE9, 0x53, 0x15, 0x00, 0x00, 0x3D, 0x40, 0x83, 0x15, 0x80, 0x74, 0x37, 0x3D, 0x50, 0x83, 0x15, 0x80, 0x74, 0x26, 0x3D, 0x60, 0x83, 0x15, 0x80, 0x74, 0x15, 0x3D, 0x70, 0x83, 0x15, 0x80, 0x0F, 0x85, 0x19, 0x15, 0x00, 0x00, 0xB8, 0xF4, 0x12, 0x61, 0x00, 0xE9, 0x29, 0x15, 0x00, 0x00, 0xB8, 0xE4, 0x12, 0x61, 0x00, 0xE9, 0x1F, 0x15, 0x00, 0x00, 0xB8, 0xD4, 0x12, 0x61, 0x00, 0xE9, 0x15, 0x15, 0x00, 0x00, 0xB8, 0xC4, 0x12, 0x61, 0x00, 0xE9, 0x0B, 0x15, 0x00, 0x00, 0xB8, 0xB0, 0x12, 0x61, 0x00, 0xE9, 0x01, 0x15, 0x00, 0x00, 0xB9, 0x30, 0x84, 0x15, 0x80, 0x3B, 0xC1, 0x7F, 0x54, 0x74, 0x48, 0x3D, 0x90, 0x83, 0x15, 0x80, 0x74, 0x37, 0x3D, 0x00, 0x84, 0x15, 0x80, 0x74, 0x26, 0x3D, 0x10, 0x84, 0x15, 0x80, 0x74, 0x15, 0x3D, 0x20, 0x84, 0x15, 0x80, 0x0F, 0x85, 0xBC, 0x14, 0x00, 0x00, 0xB8, 0xA0, 0x12, 0x61, 0x00, 0xE9, 0xCC, 0x14, 0x00, 0x00, 0xB8, 0x8C, 0x12, 0x61, 0x00, 0xE9, 0xC2, 0x14, 0x00, 0x00, 0xB8, 0x7C, 0x12, 0x61, 0x00, 0xE9, 0xB8, 0x14, 0x00, 0x00, 0xB8, 0x68, 0x12, 0x61, 0x00, 0xE9, 0xAE, 0x14, 0x00, 0x00, 0xB8, 0x54, 0x12, 0x61, 0x00, 0xE9, 0xA4, 0x14, 0x00, 0x00, 0x3D, 0x40, 0x84, 0x15, 0x80, 0x74, 0x26, 0x3D, 0x50, 0x84, 0x15, 0x80, 0x74, 0x15, 0x3D, 0x60, 0x84, 0x15, 0x80, 0x0F, 0x85, 0x71, 0x14, 0x00, 0x00, 0xB8, 0x44, 0x12, 0x61, 0x00, 0xE9, 0x81, 0x14, 0x00, 0x00, 0xB8, 0x38, 0x12, 0x61, 0x00, 0xE9, 0x77, 0x14, 0x00, 0x00, 0xB8, 0x28, 0x12, 0x61, 0x00, 0xE9, 0x6D, 0x14, 0x00, 0x00, 0xB8, 0x20, 0x12, 0x61, 0x00, 0xE9, 0x63, 0x14, 0x00, 0x00, 0xB9, 0x90, 0x85, 0x15, 0x80, 0x3B, 0xC1, 0x0F, 0x8F, 0xB3, 0x00, 0x00, 0x00, 0x0F, 0x84, 0xA3, 0x00, 0x00, 0x00, 0x83, 0xC1, 0x90, 0x3B, 0xC1, 0x7F, 0x54, 0x74, 0x48, 0x3D, 0x80, 0x84, 0x15, 0x80, 0x74, 0x37, 0x3D, 0x90, 0x84, 0x15, 0x80, 0x74, 0x26, 0x3D, 0x00, 0x85, 0x15, 0x80, 0x74, 0x15, 0x3D, 0x10, 0x85, 0x15, 0x80, 0x0F, 0x85, 0x0D, 0x14, 0x00, 0x00, 0xB8, 0x14, 0x12, 0x61, 0x00, 0xE9, 0x1D, 0x14, 0x00, 0x00, 0xB8, 0xF8, 0x11, 0x61, 0x00, 0xE9, 0x13, 0x14, 0x00, 0x00, 0xB8, 0xE8, 0x11, 0x61, 0x00, 0xE9, 0x09, 0x14, 0x00, 0x00, 0xB8, 0xD8, 0x11, 0x61, 0x00, 0xE9, 0xFF, 0x13, 0x00, 0x00, 0xB8, 0xCC, 0x11, 0x61, 0x00, 0xE9, 0xF5, 0x13, 0x00, 0x00, 0x3D, 0x30, 0x85, 0x15, 0x80, 0x74, 0x37, 0x3D, 0x40, 0x85, 0x15, 0x80, 0x74, 0x26, 0x3D, 0x50, 0x85, 0x15, 0x80, 0x74, 0x15, 0x3D, 0x70, 0x85, 0x15, 0x80, 0x0F, 0x85, 0xBB, 0x13, 0x00, 0x00, 0xB8, 0xC0, 0x11, 0x61, 0x00, 0xE9, 0xCB, 0x13, 0x00, 0x00, 0xB8, 0xB0, 0x11, 0x61, 0x00, 0xE9, 0xC1, 0x13, 0x00, 0x00, 0xB8, 0xA4, 0x11, 0x61, 0x00, 0xE9, 0xB7, 0x13, 0x00, 0x00, 0xB8, 0x98, 0x11, 0x61, 0x00, 0xE9, 0xAD, 0x13, 0x00, 0x00, 0xB8, 0x80, 0x11, 0x61, 0x00, 0xE9, 0xA3, 0x13, 0x00, 0x00, 0xB9, 0x40, 0x86, 0x15, 0x80, 0x3B, 0xC1, 0x7F, 0x54, 0x74, 0x48, 0x3D, 0x00, 0x86, 0x15, 0x80, 0x74, 0x37, 0x3D, 0x10, 0x86, 0x15, 0x80, 0x74, 0x26, 0x3D, 0x20, 0x86, 0x15, 0x80, 0x74, 0x15, 0x3D, 0x30, 0x86, 0x15, 0x80, 0x0F, 0x85, 0x5E, 0x13, 0x00, 0x00, 0xB8, 0x74, 0x11, 0x61, 0x00, 0xE9, 0x6E, 0x13, 0x00, 0x00, 0xB8, 0x68, 0x11, 0x61, 0x00, 0xE9, 0x64, 0x13, 0x00, 0x00, 0xB8, 0x58, 0x11, 0x61, 0x00, 0xE9, 0x5A, 0x13, 0x00, 0x00, 0xB8, 0x48, 0x11, 0x61, 0x00, 0xE9, 0x50, 0x13, 0x00, 0x00, 0xB8, 0x38, 0x11, 0x61, 0x00, 0xE9, 0x46, 0x13, 0x00, 0x00, 0x3D, 0x50, 0x86, 0x15, 0x80, 0x74, 0x20, 0x3D, 0x05, 0x00, 0x76, 0x88, 0x0F, 0x84, 0x5A, 0xF9, 0xFF, 0xFF, 0x3D, 0x0A, 0x00, 0x76, 0x88, 0x0F, 0x85, 0x0F, 0x13, 0x00, 0x00, 0xB8, 0xFC, 0x10, 0x61, 0x00, 0xE9, 0x1F, 0x13, 0x00, 0x00, 0xB8, 0xF0, 0x10, 0x61, 0x00, 0xE9, 0x15, 0x13, 0x00, 0x00, 0xB8, 0xB0, 0x10, 0x61, 0x00, 0xE9, 0x0B, 0x13, 0x00, 0x00, 0xB9, 0xD7, 0x00, 0x76, 0x88, 0x3B, 0xC1, 0x0F, 0x8F, 0x64, 0x01, 0x00, 0x00, 0x0F, 0x84, 0x54, 0x01, 0x00, 0x00, 0x83, 0xC1, 0xBF, 0x3B, 0xC1, 0x0F, 0x8F, 0xB5, 0x00, 0x00, 0x00, 0x0F, 0x84, 0xA5, 0x00, 0x00, 0x00, 0xB9, 0x64, 0x00, 0x76, 0x88, 0x3B, 0xC1, 0x7F, 0x54, 0x74, 0x48, 0x3D, 0x28, 0x00, 0x76, 0x88, 0x74, 0x37, 0x3D, 0x37, 0x00, 0x76, 0x88, 0x74, 0x26, 0x3D, 0x5A, 0x00, 0x76, 0x88, 0x74, 0x15, 0x3D, 0x5F, 0x00, 0x76, 0x88, 0x0F, 0x85, 0xA2, 0x12, 0x00, 0x00, 0xB8, 0x60, 0x10, 0x61, 0x00, 0xE9, 0xB2, 0x12, 0x00, 0x00, 0xB8, 0x18, 0x10, 0x61, 0x00, 0xE9, 0xA8, 0x12, 0x00, 0x00, 0xB8, 0xD0, 0x0F, 0x61, 0x00, 0xE9, 0x9E, 0x12, 0x00, 0x00, 0xB8, 0xAC, 0x0F, 0x61, 0x00, 0xE9, 0x94, 0x12, 0x00, 0x00, 0xB8, 0x68, 0x0F };
                        file.Write(achievement_tracking, 0, achievement_tracking.Length);

                        file.Position = 0xCD830;
                        byte[] comp_hook = { 0xA1, 0x58, 0x8C, 0x70, 0x00 };
                        file.Write(comp_hook, 0, comp_hook.Length);

                        file.Position = 0x30DE7;
                        byte[] suit_hook = { 0xB8, 0x01, 0x00, 0x00, 0x00 };
                        file.Write(suit_hook, 0, suit_hook.Length);

                        file.Position = 0xD99BC;
                        byte[] state_hook = { 0x5F, 0x5E, 0x5D, 0x5B, 0xC3 };
                        file.Write(state_hook, 0, state_hook.Length);

                        file.Position = 0xD255D;
                        byte[] lev_hook = { 0x64, 0x89, 0x0D, 0x00, 0x00, 0x00, 0x00 };
                        file.Write(lev_hook, 0, lev_hook.Length);

                        file.Position = 0x1172A2;
                        byte[] touch_hook = { 0x83, 0xC4, 0x24, 0xC3, 0x90 };
                        file.Write(touch_hook, 0, touch_hook.Length);

                        file.Position = 0x183B1;
                        byte[] kill_hook = { 0x8B, 0x86, 0xC8, 0x01, 0x00, 0x00 };
                        file.Write(kill_hook, 0, kill_hook.Length);

                        file.Position = 0xA24F0;
                        byte[] save_hook = { 0x56, 0x8B, 0xF1, 0x8A, 0x06 };
                        file.Write(save_hook, 0, save_hook.Length);

                        file.Position = 0x90B52;
                        byte[] end_hook = { 0x68, 0x64, 0x00, 0x5F, 0x00 };
                        file.Write(end_hook, 0, end_hook.Length);

                        file.Position = 0x7F6B1;
                        byte[] sand_hook = { 0x80, 0xFB, 0x12, 0x89, 0x10 };
                        file.Write(sand_hook, 0, sand_hook.Length);

                        file.Position = 0x7F7F5;
                        byte[] gold_hook = { 0xC6, 0x84, 0x90, 0xA1, 0x97, 0x6C, 0x00, 0x01 };
                        file.Write(gold_hook, 0, gold_hook.Length);

                        file.Position = 0x55252;
                        byte[] thwap_hook = { 0x5F, 0x5E, 0x83, 0xC4, 0x10 };
                        file.Write(thwap_hook, 0, thwap_hook.Length);
                    }

                    // Dev injections
                    if (injections.Checked && injections.Enabled)
                    {
                        // InjectionPost.CEA
                        file.Position = 0x1F6880;
                        byte[] injectionPost = { 0x8B, 0x05, 0x10, 0x55, 0x65, 0x00, 0x83, 0xF8, 0x01, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xE8, 0x6C, 0x00, 0x00, 0x00, 0xC7, 0x05, 0x10, 0x55, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xB8, 0xA0, 0x6F, 0x00, 0xE9, 0x3C, 0x0F, 0xEB, 0xFF };
                        file.Write(injectionPost, 0, injectionPost.Length);

                        //jump to injection
                        file.Position = 0xA77DF;
                        byte[] injectionPostJmp = { 0xE9, 0x9C, 0xF0, 0x14, 0x00 };
                        file.Write(injectionPostJmp, 0, injectionPostJmp.Length);

                        // InjectionPre.CEA
                        file.Position = 0x1F6C00;
                        byte[] injectionPre = { 0x8B, 0x05, 0x10, 0x55, 0x65, 0x00, 0x83, 0xF8, 0x02, 0x0F, 0x85, 0x0F, 0x00, 0x00, 0x00, 0xE8, 0x6C, 0x00, 0x00, 0x00, 0xC7, 0x05, 0x10, 0x55, 0x65, 0x00, 0x01, 0x00, 0x00, 0x00, 0x8B, 0x15, 0xBC, 0x83, 0x6C, 0x00, 0xE9, 0xCE, 0x0B, 0xEB, 0xFF };
                        file.Write(injectionPre, 0, injectionPre.Length);
                        //jump to injection
                        file.Position = 0xA77F1;
                        byte[] injectionPreJmp = { 0xE9, 0x0A, 0xF4, 0x14, 0x00 };
                        file.Write(injectionPreJmp, 0, injectionPreJmp.Length);
                    }
                    else
                    {
                        // restore injection
                        file.Position = 0x1F6880;
                        byte[] injectionPost = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                        file.Write(injectionPost, 0, injectionPost.Length);
                        // restore jump to injection
                        file.Position = 0xA77DF;
                        byte[] injectionPostJmp = { 0x68, 0xB8, 0xA0, 0x6F, 0x00 };
                        file.Write(injectionPostJmp, 0, injectionPostJmp.Length);

                        // restore injection
                        file.Position = 0x1F6C00;
                        byte[] injectionPre = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                        file.Write(injectionPre, 0, injectionPre.Length);
                        // restore jump to injection
                        file.Position = 0xA77F1;
                        byte[] injectionPreJmp = { 0x8B, 0x15, 0xBC, 0x83, 0x6C };
                        file.Write(injectionPreJmp, 0, injectionPreJmp.Length);
                    }

                    // Daffy-culty
                    if (daffycultyComboBox.SelectedIndex != 0 && daffyculty.Enabled)
                    {
                        // Init for daffyculty
                        file.Position = 0xA2351;
                        byte[] daffyculty = { 0x1C, 0xB0, 0x00, 0x88, 0x46, 0x10, 0xE8, 0x04, 0x00, 0x00, 0x00, 0x89, 0xF0, 0x5E, 0xC3 };
                        daffyculty[2] = (byte)daffycultyComboBox.SelectedIndex;
                        file.Write(daffyculty, 0, daffyculty.Length);
                    }
                    else
                    {
                        // Restore daffyculty (0)
                        file.Position = 0xA2351;
                        byte[] daffyculty = { 0x10, 0x88, 0x46, 0x1C, 0xE8, 0x06, 0x00, 0x00, 0x00, 0x8B, 0xC6, 0x5E, 0xC3, 0x90, 0x90 };
                        file.Write(daffyculty, 0, daffyculty.Length);
                    }

                    // Start level
                    if (levelComboBox.SelectedIndex != 0 && levelComboBox.Enabled)
                    {
                        byte index = (byte)this.levelComboBox.SelectedIndex;

                        if (index == this.levelComboBox.Items.Count - 1)
                        {
                            // Get random playable level index
                            Random rnd = new Random();
                            byte[] levels = { 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 18 };
                            index = levels[rnd.Next(levels.Length)];
                        }
                        else if (index == this.levelComboBox.Items.Count - 2)
                        {
                            // Get random boss level index
                            Random rnd = new Random();
                            byte[] levels = { 7, 12, 17, 19, 20 };
                            index = levels[rnd.Next(levels.Length)];
                        }
                        else if (index == this.levelComboBox.Items.Count - 3)
                        {
                            // Get random bonus level index
                            Random rnd = new Random();
                            byte[] levels = { 21, 22, 23, 24, 25, 26, 27, 28, 29 };
                            index = levels[rnd.Next(levels.Length)];
                        }
                        else if (index > 1)
                        {
                            // Increment index (skipped playpen)
                            index++;
                        }

                        // Change start level
                        file.Position = 0xA94C9;
                        file.WriteByte(0xB0);
                        file.WriteByte(index);

                        // Start position fix
                        file.Position = 0xB1FF8;
                        byte[] fix = { 0xB8, 0x00, 0x00, 0x00, 0x00 };
                        file.Write(fix, 0, fix.Length);
                    }
                    else
                    {
                        // Restore level
                        file.Position = 0xA94C9;
                        file.WriteByte(0x75);
                        file.WriteByte(0x58);

                        // Start position fix restore
                        file.Position = 0xB1FF8;
                        byte[] fix = { 0xA1, 0x28, 0x4C, 0x70, 0x00 };
                        file.Write(fix, 0, fix.Length);
                    }

                    // Advanced cheats
                    if (extraDebug.Checked && extraDebug.Enabled)
                    {
                        // Check cheats.pc
                        if (File.Exists(TazFolderPath + "\\Paks\\cheats.pc") == true)
                        {
                            if (new FileInfo(TazFolderPath + "\\Paks\\cheats.pc").Length != 3994384)
                                File.WriteAllBytes(TazFolderPath + "\\Paks\\cheats.pc", Properties.Resources.cheats);
                        }
                        else
                        {
                            File.WriteAllBytes(TazFolderPath + "\\Paks\\cheats.pc", Properties.Resources.cheats);
                        }

                        // Check cheatssounds.pc
                        if (File.Exists(TazFolderPath + "\\Paks\\cheatssounds.pc") == true)
                        {
                            if (new FileInfo(TazFolderPath + "\\Paks\\cheatssounds.pc").Length != 429680)
                                File.WriteAllBytes(TazFolderPath + "\\Paks\\cheatssounds.pc", Properties.Resources.cheatssounds);
                        }
                        else
                        {
                            File.WriteAllBytes(TazFolderPath + "\\Paks\\cheatssounds.pc", Properties.Resources.cheatssounds);
                        }

                        // Patch for advanced cheats
                        // Extra Debug Menu Cheats
                        // Set item flag
                        byte[] addeax = new byte[] { 0xB8, 0x00, 0x00, 0x00, 0x00, 0x90 };
                        file.Position = 0xA2F81;
                        file.Write(addeax, 0, addeax.Length);

                        // Set last id
                        byte[] lastid = new byte[] { 0x80, 0x56, 0x00, 0x00 };
                        file.Position = 0xA2FA0;
                        file.Write(lastid, 0, lastid.Length);

                        // Set callback id
                        byte[] callid = new byte[] { 0xE6 };
                        file.Position = 0xA37A2;
                        file.Write(callid, 0, callid.Length);

                        // Set callback check id
                        byte[] callcheckid = new byte[] { 0xE6 };
                        file.Position = 0xA3BB3;
                        file.Write(callcheckid, 0, callcheckid.Length);

                        // Deactivate max id
                        byte[] demaxid = new byte[] { 0x1E };
                        file.Position = 0x7BE4D;
                        file.Write(demaxid, 0, demaxid.Length);

                        // Deactivate all max id
                        byte[] deallmaxid = new byte[] { 0x1E };
                        file.Position = 0x7C3E2;
                        file.Write(deallmaxid, 0, deallmaxid.Length);

                        // First dbg activate id
                        byte[] firstdbg = new byte[] { 0x1F };
                        file.Position = 0xA5B57;
                        file.Write(firstdbg, 0, firstdbg.Length);

                        // First dbg deactivate id
                        byte[] defirstdbg = new byte[] { 0x1F };
                        file.Position = 0xA5B97;
                        file.Write(defirstdbg, 0, defirstdbg.Length);

                        // Activate cheat switch case
                        byte[] actcase = new byte[] { 0x00, 0x12, 0x12, 0x12, 0x01, 0x02, 0x03, 0x04, 0x12, 0x12, 0x05, 0x06, 0x12, 0x07, 0x12, 0x08, 0x12, 0x12, 0x12, 0x09, 0x0A, 0x12, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x11 };
                        file.Position = 0x7C160;
                        file.Write(actcase, 0, actcase.Length);

                        // Deactivate cheat switch case
                        byte[] deactcase = new byte[] { 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x01, 0x01, 0x0C, 0x02, 0x0C, 0x03, 0x0C, 0x0C, 0x0C, 0x04, 0x0C, 0x05, 0x06, 0x07, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x00 };
                        file.Position = 0x7C344;
                        file.Write(deactcase, 0, deactcase.Length);

                        // Load Fixes
                        // Force rapper attack init
                        byte[] rappa = new byte[] { 0xEB, 0x0A };
                        file.Position = 0x787BD;
                        file.Write(rappa, 0, rappa.Length);

                        // Force ball activate
                        byte[] ballact = new byte[] { 0xEB, 0x0B };
                        file.Position = 0x7C077;
                        file.Write(ballact, 0, ballact.Length);

                        // Force ball deactivate
                        byte[] balldeact = new byte[] { 0xEB, 0x07 };
                        file.Position = 0x7C29C;
                        file.Write(balldeact, 0, balldeact.Length);

                        // Agent and helmet costumes data
                        byte[] ahdata = Encoding.ASCII.GetBytes("cheats\0costume\\agenthat.obe\0costume\\agentshades.obe\0costume\\agentwatch.obe\0costume\\crashhelmet.obe\0costume\\elbowpadl.obe\0costume\\elbowpadr.obe\0");
                        file.Position = 0x1F6A50;
                        file.Write(ahdata, 0, ahdata.Length);

                        // Agent and helmet costumes code (AgentHelmet.CEA)
                        byte[] ahcode = new byte[] { 0x83, 0xF8, 0x0F, 0x0F, 0x85, 0x63, 0x00, 0x00, 0x00, 0x6A, 0x03, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x68, 0xE8, 0x0F, 0x63, 0x00, 0x68, 0x57, 0x6A, 0x5F, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x50, 0xE8, 0x59, 0x0D, 0xE8, 0xFF, 0x83, 0xC4, 0x1C, 0x6A, 0x03, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x68, 0xE8, 0x0F, 0x63, 0x00, 0x68, 0x6C, 0x6A, 0x5F, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x50, 0xE8, 0x38, 0x0D, 0xE8, 0xFF, 0x83, 0xC4, 0x1C, 0x6A, 0x07, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x68, 0x54, 0x9C, 0x63, 0x00, 0x68, 0x84, 0x6A, 0x5F, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x50, 0xE8, 0x17, 0x0D, 0xE8, 0xFF, 0x83, 0xC4, 0x1C, 0x83, 0xF8, 0x10, 0x0F, 0x85, 0x63, 0x00, 0x00, 0x00, 0x6A, 0x03, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x68, 0xE8, 0x0F, 0x63, 0x00, 0x68, 0x9B, 0x6A, 0x5F, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x50, 0xE8, 0xED, 0x0C, 0xE8, 0xFF, 0x83, 0xC4, 0x1C, 0x6A, 0x03, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x68, 0x54, 0x9C, 0x63, 0x00, 0x68, 0xB3, 0x6A, 0x5F, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x50, 0xE8, 0xCC, 0x0C, 0xE8, 0xFF, 0x83, 0xC4, 0x1C, 0x6A, 0x03, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x68, 0x44, 0x9C, 0x63, 0x00, 0x68, 0xC9, 0x6A, 0x5F, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x50, 0xE8, 0xAB, 0x0C, 0xE8, 0xFF, 0x83, 0xC4, 0x1C, 0xF6, 0x05, 0x28, 0x8E, 0x6C, 0x00, 0x08, 0xE9, 0xBB, 0xA1, 0xE3, 0xFF };
                        file.Position = 0x1F6B00;
                        file.Write(ahcode, 0, ahcode.Length);

                        // Agent and helmet costumes injection
                        byte[] ahinj = new byte[] { 0xE9, 0x63, 0x5D, 0x1C, 0x00, 0x66, 0x90 };
                        file.Position = 0x30D98;
                        file.Write(ahinj, 0, ahinj.Length);
                    }
                    else
                    {
                        // Restore
                        // Restore item flag
                        byte[] addeax = new byte[] { 0x83, 0xE0, 0xFE, 0x83, 0xC0, 0x02 };
                        file.Position = 0xA2F81;
                        file.Write(addeax, 0, addeax.Length);

                        // Restore last id
                        byte[] lastid = new byte[] { 0xE0, 0x55, 0x00, 0x00 };
                        file.Position = 0xA2FA0;
                        file.Write(lastid, 0, lastid.Length);

                        // Restore callback id
                        byte[] callid = new byte[] { 0xDE };
                        file.Position = 0xA37A2;
                        file.Write(callid, 0, callid.Length);

                        // Restore callback check id
                        byte[] callcheckid = new byte[] { 0xDD };
                        file.Position = 0xA3BB3;
                        file.Write(callcheckid, 0, callcheckid.Length);

                        // Restore deactivate max id
                        byte[] demaxid = new byte[] { 0x14 };
                        file.Position = 0x7BE4D;
                        file.Write(demaxid, 0, demaxid.Length);

                        // Restore deactivate all max id
                        byte[] deallmaxid = new byte[] { 0x14 };
                        file.Position = 0x7C3E2;
                        file.Write(deallmaxid, 0, deallmaxid.Length);

                        // Restore first dbg activate id
                        byte[] firstdbg = new byte[] { 0x15 };
                        file.Position = 0xA5B57;
                        file.Write(firstdbg, 0, firstdbg.Length);

                        // Restore first dbg deactivate id
                        byte[] defirstdbg = new byte[] { 0x15 };
                        file.Position = 0xA5B97;
                        file.Write(defirstdbg, 0, defirstdbg.Length);

                        // Restore activate cheat switch case
                        byte[] actcase = new byte[] { 0x00, 0x12, 0x12, 0x12, 0x01, 0x02, 0x03, 0x04, 0x12, 0x12, 0x05, 0x06, 0x12, 0x07, 0x12, 0x08, 0x12, 0x12, 0x12, 0x09, 0x12, 0x0A, 0x12, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11 };
                        file.Position = 0x7C160;
                        file.Write(actcase, 0, actcase.Length);

                        // Restore deactivate cheat switch case
                        byte[] deactcase = new byte[] { 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x01, 0x01, 0x0C, 0x02, 0x0C, 0x03, 0x0C, 0x0C, 0x0C, 0x04, 0x0C, 0x05, 0x06, 0x07, 0x07, 0x07, 0x08, 0x09, 0x0A, 0x0B };
                        file.Position = 0x7C344;
                        file.Write(deactcase, 0, deactcase.Length);

                        // Restore rapper attack init
                        byte[] rappa = new byte[] { 0x3C, 0x09 };
                        file.Position = 0x787BD;
                        file.Write(rappa, 0, rappa.Length);

                        // Restore ball activate
                        byte[] ballact = new byte[] { 0xA0, 0x30 };
                        file.Position = 0x7C077;
                        file.Write(ballact, 0, ballact.Length);

                        // Restore ball deactivate
                        byte[] balldeact = new byte[] { 0x80, 0x3D };
                        file.Position = 0x7C29C;
                        file.Write(balldeact, 0, balldeact.Length);

                        // Restore costumes data
                        byte[] ahdata = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                        file.Position = 0x1F6A50;
                        file.Write(ahdata, 0, ahdata.Length);

                        // Restore costumes code
                        byte[] ahcode = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                        file.Position = 0x1F6B00;
                        file.Write(ahcode, 0, ahcode.Length);

                        // Restore costumes injection
                        byte[] ahinj = new byte[] { 0xF6, 0x05, 0x28, 0x8E, 0x6C, 0x00, 0x08 };
                        file.Position = 0x30D98;
                        file.Write(ahinj, 0, ahinj.Length);
                    }

                    // Api
                    // d3d8to9
                    if (apiComboBox.SelectedIndex == 1 || apiComboBox.SelectedIndex == 3)
                    {
                        string d3d9Folder = Path.Combine(TazFolderPath, "Wrappers", "d3d8to9");
                        string d3d9File = Path.Combine(d3d9Folder, "d3d8.dll");
                        // Check downloaded files
                        if (File.Exists(d3d9File) == false)
                        {
                            DownloadD3D8to9();
                        }
                        // Replace dll
                        File.Copy(d3d9File, Path.Combine(TazFolderPath, "d3d8.dll"), true);
                        // Remove Vulkan's wrapper
                        if (File.Exists(Path.Combine(TazFolderPath, "d3d9.dll")) && apiComboBox.SelectedIndex != 3)
                            File.Delete(Path.Combine(TazFolderPath, "d3d9.dll"));
                    }
                    // dgVoodoo2
                    else if (apiComboBox.SelectedIndex == 2)
                    {
                        string d3d11Folder = Path.Combine(TazFolderPath, "Wrappers", "dgVoodoo2");
                        string d3d11File = Path.Combine(d3d11Folder, "d3d8.dll");
                        string d3d11Zip = Path.Combine(d3d11Folder, "dgVoodoo2.zip");
                        // Check downloaded files
                        if (File.Exists(d3d11File) == false)
                        {
                            DownloadDgVoodoo2();
                        }
                        // Replace dll
                        File.Copy(d3d11File, Path.Combine(TazFolderPath, "d3d8.dll"), true);
                        // Remove Vulkan's wrapper
                        if (File.Exists(Path.Combine(TazFolderPath, "d3d9.dll")))
                            File.Delete(Path.Combine(TazFolderPath, "d3d9.dll"));
                    }
                    // Vanilla
                    else
                    {
                        // Remove d3d8 wrapper
                        if (File.Exists(Path.Combine(TazFolderPath, "d3d8.dll")))
                            File.Delete(Path.Combine(TazFolderPath, "d3d8.dll"));
                        // Remove Vulkan's wrapper
                        if (File.Exists(Path.Combine(TazFolderPath, "d3d9.dll")))
                            File.Delete(Path.Combine(TazFolderPath, "d3d9.dll"));
                    }

                    // Dxvk
                    if (apiComboBox.SelectedIndex == 3)
                    {
                        string VulkanFolder = Path.Combine(TazFolderPath, "Wrappers", "dxvk");
                        string VulkanFile = Path.Combine(VulkanFolder, "d3d9.dll");
                        string VulkanTar = Path.Combine(VulkanFolder, "dxvk.tar.gz");
                        // Check downloaded files
                        if (File.Exists(VulkanFile) == false)
                        {
                            DownloadDxVk();
                        }
                        // Replace dll
                        File.Copy(VulkanFile, Path.Combine(TazFolderPath, "d3d9.dll"), true);
                    }

                    // Exe patches end
                    file.Close();
                }

                // taz.dat patches
                using (var filedat = new FileStream(TazFolderPath + "\\taz.dat", FileMode.Open, FileAccess.ReadWrite))
                {
                    // Lighting
                    if (lighting.Checked)
                    {
                        // Cartoon lighting on
                        filedat.Position = 0x38;
                        filedat.WriteByte(0x01);
                    }
                    else
                    {
                        // Cartoon lighting off
                        filedat.Position = 0x38;
                        filedat.WriteByte(0x00);
                    }

                    // Outlines
                    if (outlines.Checked)
                    {
                        // Cartoon outlines on
                        filedat.Position = 0x3C;
                        filedat.WriteByte(0x01);
                    }
                    else
                    {
                        // Cartoon outlines off
                        filedat.Position = 0x3C;
                        filedat.WriteByte(0x00);
                    }

                    // Voodoo
                    if (voodoo.Checked)
                    {
                        // Voodoo on
                        filedat.Position = 0x40;
                        filedat.WriteByte(0x01);
                    }
                    else
                    {
                        // Voodoo off
                        filedat.Position = 0x40;
                        filedat.WriteByte(0x00);
                    }

                    if (!windowed.Checked || !windowed.Enabled)
                    {
                        //fullscreen
                        filedat.Position = 0x34;
                        filedat.WriteByte(0x00);
                    }
                    else
                    {
                        //windowed
                        filedat.Position = 0x34;
                        filedat.WriteByte(0x01);
                    }

                    byte[] width = BitConverter.GetBytes(UInt32.Parse(this.width.Text));
                    byte[] height = BitConverter.GetBytes(UInt32.Parse(this.height.Text));

                    if (changeResolution.Checked)
                    {
                        // Width
                        filedat.Position = 0x24;
                        filedat.WriteByte(width[0]);
                        filedat.WriteByte(width[1]);
                        filedat.WriteByte(width[2]);
                        filedat.WriteByte(width[3]);
                        // Height
                        filedat.Position = 0x28;
                        filedat.WriteByte(height[0]);
                        filedat.WriteByte(height[1]);
                        filedat.WriteByte(height[2]);
                        filedat.WriteByte(height[3]);
                        // 32 bits on color
                        filedat.Position = 0x30;
                        filedat.WriteByte(0x20);
                    }
                    else
                    {
                        // Width
                        filedat.Position = 0x24;
                        filedat.WriteByte(0x00);
                        filedat.WriteByte(0x04);
                        filedat.WriteByte(0x00);
                        filedat.WriteByte(0x00);
                        // Height
                        filedat.Position = 0x28;
                        filedat.WriteByte(0x00);
                        filedat.WriteByte(0x03);
                        filedat.WriteByte(0x00);
                        filedat.WriteByte(0x00);
                        // 32 bits on color
                        filedat.Position = 0x30;
                        filedat.WriteByte(0x20);
                        // Fullscreen
                        filedat.Position = 0x34;
                        filedat.WriteByte(0x00);
                    }

                    // Draw distance
                    if (disableDrawDistance.Checked && disableDrawDistance.Enabled)
                    {
                        // Max distance
                        filedat.Position = 0x44;
                        filedat.WriteByte(0xFF);
                        filedat.WriteByte(0xFF);
                    }
                    else
                    {
                        // Default distance
                        filedat.Position = 0x44;
                        filedat.WriteByte(0x30);
                        filedat.WriteByte(0x02);
                    }

                    // Layout
                    // Vanilla = 0 (Do Nothing)
                    // XInput
                    if (layoutComboBox.SelectedIndex == 1 && layoutComboBox.Enabled)
                    {
                        byte[] xinput = new byte[] { 0x21, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                        // Player 1
                        filedat.Position = 0x98;
                        filedat.Write(xinput, 0, xinput.Length);
                        // Player 2
                        filedat.Position = 0x128;
                        filedat.Write(xinput, 0, xinput.Length);
                    }
                    // DualShock 4
                    else if (layoutComboBox.SelectedIndex == 2 && layoutComboBox.Enabled)
                    {
                        byte[] ds4 = new byte[] { 0x21, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                        // Player 1
                        filedat.Position = 0x98;
                        filedat.Write(ds4, 0, ds4.Length);
                        // Player 2
                        filedat.Position = 0x128;
                        filedat.Write(ds4, 0, ds4.Length);
                    }

                    // Language
                    filedat.Position = 0x168;
                    if (langComboBox.Enabled)
                        filedat.WriteByte((Byte)langComboBox.SelectedIndex);
                    else
                        filedat.WriteByte((Byte)0);

                    // Dat patches end
                    filedat.Close();
                }




                // Patches end
                this.toolStripStatusLabel.Text = "Patched successfully (" + TazFolderPath + ")";
                if (backuped == true)
                {
                    this.toolStripStatusLabel.Text += " + created backup";
                }
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
            }
        }


        private void restore_Click(object sender, EventArgs e)
        {
            try
            {
                var result = MessageBox.Show("This will restore all game options to default and terminate running game. Continue?", "Are you sure?", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (result == DialogResult.Yes)
                {
                    //Kill process
                    if (checkProcess())
                        killProcess();

                    //Check backup
                    if (File.Exists(TazFolderPath + "\\Taz.exe.backup") == true)
                    {
                        //Replace
                        File.Delete(TazFolderPath + "\\Taz.exe");
                        File.Copy(TazFolderPath + "\\Taz.exe.backup", TazFolderPath + "\\Taz.exe", true);
                    }
                    else
                    {
                        this.toolStripStatusLabel.Text = "Taz.exe.backup not found!";
                        this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                    }

                    //Remove advanced cheats
                    if (File.Exists(TazFolderPath + "\\Paks\\cheats.pc") == true)
                    {
                        File.Delete(TazFolderPath + "\\Paks\\cheats.pc");
                    }
                    if (File.Exists(TazFolderPath + "\\Paks\\cheatssounds.pc") == true)
                    {
                        File.Delete(TazFolderPath + "\\Paks\\cheatssounds.pc");
                    }

                    //Check and restore taz.dat backup
                    if (File.Exists(TazFolderPath + "\\taz.dat.backup") == true)
                    {
                        //Replace
                        File.Delete(TazFolderPath + "\\taz.dat");
                        File.Copy(TazFolderPath + "\\taz.dat.backup", TazFolderPath + "\\taz.dat", true);
                    }
                    else
                    {
                        this.toolStripStatusLabel.Text = "taz.dat.backup not found!";
                        this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                    }
                    //Check and restore wrappers
                    // Remove d3d8 wrapper
                    if (File.Exists(Path.Combine(TazFolderPath, "d3d8.dll")))
                        File.Delete(Path.Combine(TazFolderPath, "d3d8.dll"));
                    // Remove Vulkan's wrapper
                    if (File.Exists(Path.Combine(TazFolderPath, "d3d9.dll")))
                        File.Delete(Path.Combine(TazFolderPath, "d3d9.dll"));
                    //restore videos
                    if (Directory.Exists(TazFolderPath + "\\Videos") == false && Directory.Exists(TazFolderPath + "\\!Videos") == true)
                        Directory.Move(TazFolderPath + "\\!Videos", TazFolderPath + "/Videos");
                    //restore end
                    this.toolStripStatusLabel.Text = "Restored successfully (" + TazFolderPath + ")";
                    this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;
                }
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
            }
        }

        //#######################################################################################################################
        //GUI

        private void aspectRatio_CheckedChanged(object sender, EventArgs e)
        {
            if (this.aspectRatio.Checked == true)
            {
                this.aspect1.Enabled = true;
                this.pointsLabel.Enabled = true;
                this.aspect2.Enabled = true;
            }
            else
            {
                this.aspect1.Enabled = false;
                this.pointsLabel.Enabled = false;
                this.aspect2.Enabled = false;
            }
        }

        private void changeResolution_CheckedChanged(object sender, EventArgs e)
        {
            if (this.changeResolution.Checked == true)
            {
                this.windowed.Enabled = true;
                this.height.Enabled = true;
                this.xLabel.Enabled = true;
                this.width.Enabled = true;
                this.aspectRatio.Checked = true;
            }
            else
            {
                this.windowed.Enabled = false;
                this.windowed.Checked = false;
                this.height.Enabled = false;
                this.xLabel.Enabled = false;
                this.width.Enabled = false;
                this.aspectRatio.Checked = false;
            }
        }

        private void windowed_CheckedChanged(object sender, EventArgs e)
        {
            if (this.windowed.Checked == false)
            {
                autoFillVideo(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height);
                this.voodoo.Enabled = true;
            }
            else
            {
                this.voodoo.Enabled = false;
                this.voodoo.Checked = false;
            }
        }

        private void launcher_Click(object sender, EventArgs e)
        {
            try
            {
                if (radioTrainer.Checked == false)
                {
                    MessageBox.Show("This shortcut only available with Trainer mode. Use Patch & Play button.", "Safe mode", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                string TazExecPath = '"' + TazFolderPath + "\\TazLauncher.exe" + '"';
                Process.Start(TazExecPath, "Forced");
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
            }
        }

        private void video_Click(object sender, EventArgs e)
        {
            try
            {
                string TazConfigPath = TazFolderPath + "\\config.exe";
                Process.Start(TazConfigPath, "graphics " + "0");
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
            }
        }

        private void audio_Click(object sender, EventArgs e)
        {
            try
            {
                string TazControlsPath = TazFolderPath + "\\config.exe";
                Process.Start(TazControlsPath, "sound " + "0");
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
            }
        }

        private void controls_Click(object sender, EventArgs e)
        {
            try
            {
                string TazControlsPath = TazFolderPath + "\\config.exe";
                Process.Start(TazControlsPath, "control " + "0");
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
            }
        }

        private void gameFolder_Click(object sender, EventArgs e)
        {
            try
            {
                Process.Start("explorer.exe", TazFolderPath);
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
            }
        }

        private void executable_Click(object sender, EventArgs e)
        {
            if (radioTrainer.Checked == false)
            {
                MessageBox.Show("This shortcut only available with Trainer mode. Use Patch & Play button.", "Safe mode", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            startGame();
        }

        private void play_Click(object sender, EventArgs e)
        {
            try
            {
                patch_Click(sender, e);
                if (toolStripStatusLabel.Text.Contains("taz.dat") == false)
                    startGame();
                else
                    MessageBox.Show("Game config file not found. Launch game via native launcher (Settings -> Shortcuts -> Launcher) to create config, then restart game via patcher.", "File taz.dat not found", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
            }
        }

        private void tabs_DrawItem(object sender, DrawItemEventArgs e)
        {
            TabPage page = tabs.TabPages[e.Index];
            e.Graphics.FillRectangle(new SolidBrush(page.BackColor), e.Bounds);

            Rectangle paddedBounds = e.Bounds;
            int yOffset = (e.State == DrawItemState.Selected) ? -2 : 1;
            paddedBounds.Offset(1, yOffset);
            TextRenderer.DrawText(e.Graphics, page.Text, Font, paddedBounds, page.ForeColor);
        }

        private void applyRegistry_Click(object sender, EventArgs e)
        {
            try
            {
                // Check path attributes
                FileAttributes attr = File.GetAttributes(textBoxRegistry.Text);

                // If its a file, remove last filename
                if (!attr.HasFlag(FileAttributes.Directory))
                    textBoxRegistry.Text = Path.GetDirectoryName(textBoxRegistry.Text);

                // Clear slash at the end
                while (textBoxRegistry.Text.EndsWith("\\"))
                    textBoxRegistry.Text = textBoxRegistry.Text.Remove(textBoxRegistry.Text.Length - 1, 1);

                // Check path
                Path.GetFullPath(textBoxRegistry.Text);

                // Checks ok
                TazFolderPath = textBoxRegistry.Text;

                // Set registry value for x64 (needs admin privilegies)
                Registry.SetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Infogrames Interactive\TazWanted\Release", "Location", TazFolderPath);
                // Set registry value for x86 (needs admin privilegies)
                Registry.SetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Infogrames Interactive\TazWanted\Release", "Location", TazFolderPath);

                this.toolStripStatusLabel.Text = "Registry game path successfully set to: " + TazFolderPath;
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                if (ex.TargetSite.MetadataToken == 100663603)
                    MessageBox.Show("This operation needs Administrative Mode. Try relaunch app as administrator.", "No permissions", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
        }

        private void browseGame_Click(object sender, EventArgs e)
        {
            try
            {
                if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
                {
                    textBoxRegistry.Text = folderBrowserDialog.SelectedPath;
                    applyRegistry.PerformClick();
                }
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                return;
            }
        }

        private void githubLink_Click(object sender, EventArgs e)
        {
            Process.Start("https://github.com/MuxaJlbl4/Taz_Wanted_trainer_and_patcher");
        }
        private void gamebananaLink_Click(object sender, EventArgs e)
        {
            Process.Start("https://gamebanana.com/mods/games/21253");
        }
        private void discordLink_Click(object sender, EventArgs e)
        {
            Process.Start("https://discord.gg/m4PUvmpFWv");
        }
        private void cheatLink_Click(object sender, EventArgs e)
        {
            Process.Start("https://github.com/MuxaJlbl4/Game-Data-Mining/blob/main/Taz%20Wanted/Cheat%20Codes.md");
        }
        private void hpLink_Click(object sender, EventArgs e)
        {
            Process.Start("https://hiddenpalace.org/Category:Taz:_Wanted_prototypes");
        }
        private void raLink_Click(object sender, EventArgs e)
        {
            Process.Start("https://retroachievements.org/game/19917");
        }
        private void speedrunLink_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.speedrun.com/taz_wanted");
        }
        private void tcrfLink_Click(object sender, EventArgs e)
        {
            Process.Start("https://tcrf.net/Taz:_Wanted");
        }

        private void savePatcherSettings_Click(object sender, EventArgs e)
        {
            try
            {
                // Prepare additional data
                Dictionary<string, object> additionalData = new Dictionary<string, object>();
                additionalData["achievementsStateTrainer"] = achievementsStateTrainer;

                FormSerialisor.Serialise(this, TazFolderPath + @"\Patcher.xml", additionalData);
                this.toolStripStatusLabel.Text = "App settings successfully saved to: " + TazFolderPath + @"\Patcher.xml";
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
            }
        }

        private void UnpackPak(String fileName, String OutputPath)
        {
            // Create New Folder
            OutputPath = Path.Combine(OutputPath, Path.GetFileNameWithoutExtension(fileName));
            Directory.CreateDirectory(OutputPath);
            // Open file
            byte[] pakFile = File.ReadAllBytes(fileName);
            //Parse Header
            //Int32 TimeStamp =       BitConverter.ToInt32(pakFile, 0x00);
            Int32 PakAlign = BitConverter.ToInt32(pakFile, 0x04);
            //Int32 Sound =          BitConverter.ToInt32(pakFile, 0x08);
            Int32 FilesCount = BitConverter.ToInt32(pakFile, 0x0C);
            Int32 InfoOffset = BitConverter.ToInt32(pakFile, 0x10) * PakAlign;
            //Int32 TagOffset =       BitConverter.ToInt32(pakFile, 0x14) * PakAlign;
            //Int32 Zero0 =           BitConverter.ToInt32(pakFile, 0x18);
            //Int32 TagCount =          BitConverter.ToInt32(pakFile, 0x1C);
            //Int32 FootOffset =      BitConverter.ToInt32(pakFile, 0x20) * PakAlign;
            //Int32 Dummy =          BitConverter.ToInt32(pakFile, 0x24);
            Int32 NamesOffset = BitConverter.ToInt32(pakFile, 0x28) * PakAlign;
            Int32 NamesSize = BitConverter.ToInt32(pakFile, 0x2C);
            //Int32 InfoSize =        BitConverter.ToInt32(pakFile, 0x30);
            //Int32 Zero1 =            BitConverter.ToInt32(pakFile, 0x34);
            //Int32 SixtyFour =       BitConverter.ToInt32(pakFile, 0x38);

            //Parse Files
            for (Int32 i = 0; i < FilesCount; i++)
            {
                Int32 Base = (i * 32) + InfoOffset;
                // Parse File Info
                Int32 Offset = BitConverter.ToInt32(pakFile, Base + 0x00) * PakAlign;
                //Int32 Hash32 =      BitConverter.ToInt32(pakFile, Base + 0x04);
                Int32 Size = BitConverter.ToInt32(pakFile, Base + 0x08);
                Int32 NameOffset = BitConverter.ToInt32(pakFile, Base + 0x0C);
                Int32 IsFile = BitConverter.ToInt32(pakFile, Base + 0x10);
                //Int32 Zero =        BitConverter.ToInt32(pakFile, Base + 0x14);
                //Int64 Hash64 =      BitConverter.ToInt64(pakFile, Base + 0x18);

                // Is it file
                if (IsFile == 0 && Size == NamesSize)
                    continue;

                // Get Name
                string FileName = "";
                Int32 StrOffset = NamesOffset + NameOffset;
                Int32 StrLen = Array.IndexOf(pakFile, (byte)0, StrOffset) - StrOffset;
                ASCIIEncoding ascii = new ASCIIEncoding();
                FileName = ascii.GetString(pakFile, StrOffset, StrLen);

                // Check Subfolders
                string FilePath = Path.Combine(OutputPath, Path.GetDirectoryName(FileName));
                if (!Directory.Exists(FilePath))
                    Directory.CreateDirectory(FilePath);

                // Get Content
                byte[] Content = new byte[Size];
                Content = pakFile.Skip(Offset).Take(Size).ToArray();
                // Unpack to File
                File.WriteAllBytes(Path.Combine(FilePath, Path.GetFileName(FileName)), Content);
            }
        }

        private void PackPak(String DirName, String OutputName)
        {
            // Init
            byte[] Header = { };
            byte[] Contents = { };
            byte[] FileNames = { };
            byte[] FileInfos = { };
            byte[] Footer = { };
            Dictionary<string, Int32> FileContentLocalOffsets = new Dictionary<string, Int32>();
            Dictionary<string, Int32> FileNameLocalOffsets = new Dictionary<string, Int32>();
            int HiddenFileHash = 881391266;
            int FileLocalOffset = 0;
            int NameLocalOffset = 0;
            int TagLocalOffset = 0;
            int TagCount = 0;
            int Remainder = 0;
            int FileSize = 0;
            int NamesSize = 0;
            int NamesRealSize = 0;
            int HiddenFileInfoLocalIndex = 0;
            int HeaderSize = 2048;
            int FooterSize = 32;

            string[] Files = Directory.GetFiles(DirName, "*", SearchOption.AllDirectories).ToArray();

            // Append Hidden File
            Files = Files.Append("").ToArray();
            // Sort by Hashes
            UInt32[] UsedHashes = { };
            foreach (string FullName in Files)
            {
                string ShortName = FullName.Replace(DirName + "\\", "");
                NamesSize += ShortName.Length + 1;
                if (ShortName == "")
                    // Append Hidden File Hash (Without Name)
                    UsedHashes = UsedHashes.Append((UInt32)HiddenFileHash).ToArray();
                else
                    UsedHashes = UsedHashes.Append(CRC32.Crc32(Encoding.ASCII.GetBytes(ShortName.ToLower()))).ToArray();
            }


            Array.Sort(UsedHashes, Files);


            // Content + Names + Infos
            foreach (string FilePath in Files)
            {
                // Get Short Name
                string ShortName = FilePath.Replace(DirName + "\\", "");

                // Is Hidden
                if (ShortName == "")
                {
                    HiddenFileInfoLocalIndex = FileInfos.Length;
                    // Allocate Hidden FileNames File Info
                    Array.Resize<byte>(ref FileInfos, FileInfos.Length + 32);
                    continue;
                }

                // RawContent
                byte[] FileContent = File.ReadAllBytes(FilePath);
                FileSize = FileContent.Length;
                // + Alignment
                Remainder = FileContent.Length % 16;
                if (Remainder > 0) for (int i = 0; i < 16 - Remainder; i++) FileContent = FileContent.Append((byte)0).ToArray();
                // Append Content
                Contents = Contents.Concat(FileContent).ToArray();


                // FileNames
                FileNames = FileNames.Concat(Encoding.ASCII.GetBytes(ShortName)).ToArray();
                FileNames = FileNames.Append((byte)0).ToArray();


                // FileInfos
                // Global File Offset (\16)
                FileInfos = FileInfos.Concat(BitConverter.GetBytes((HeaderSize + FileLocalOffset) / 16)).ToArray();
                // Hash32
                FileInfos = FileInfos.Concat(BitConverter.GetBytes(CRC32.Crc32(Encoding.ASCII.GetBytes(ShortName.ToLower())))).ToArray();
                // Size
                FileInfos = FileInfos.Concat(BitConverter.GetBytes(FileSize)).ToArray();
                // Local Name Offset
                FileInfos = FileInfos.Concat(BitConverter.GetBytes(NameLocalOffset)).ToArray();
                // Is File + Some Tag Info
                if (ShortName == "TagTable.pak.sys")
                {
                    FileInfos = FileInfos.Concat(BitConverter.GetBytes((Int32)0)).ToArray();
                    TagLocalOffset = FileLocalOffset;
                    TagCount = FileSize / 4;
                }
                else
                    FileInfos = FileInfos.Concat(BitConverter.GetBytes((Int32)1)).ToArray();
                // Zeroes
                FileInfos = FileInfos.Concat(BitConverter.GetBytes((Int32)0)).ToArray();
                FileInfos = FileInfos.Concat(BitConverter.GetBytes((Int64)0)).ToArray();


                // Next Local Offsets
                FileLocalOffset += FileContent.Length;
                NameLocalOffset += ShortName.Length + 1;
            }


            // + Alignment for FileNames
            NamesRealSize = NameLocalOffset;
            Remainder = NameLocalOffset % 16;
            if (Remainder > 0) for (int i = 0; i < 16 - Remainder; i++) FileNames = FileNames.Append((byte)0).ToArray();


            // Add Hidden FileNames File Info
            byte[] HiddenFileInfos = { };
            HiddenFileInfos = HiddenFileInfos.Concat(BitConverter.GetBytes((HeaderSize + Contents.Length) / 16)).ToArray(); // FileInfo
            HiddenFileInfos = HiddenFileInfos.Concat(BitConverter.GetBytes(HiddenFileHash)).ToArray(); // Hash32
            HiddenFileInfos = HiddenFileInfos.Concat(BitConverter.GetBytes(NameLocalOffset)).ToArray(); // Size
            HiddenFileInfos = HiddenFileInfos.Concat(BitConverter.GetBytes(NameLocalOffset)).ToArray(); // Local Name Offset
            HiddenFileInfos = HiddenFileInfos.Concat(BitConverter.GetBytes((Int32)0)).ToArray(); // Is File
            HiddenFileInfos = HiddenFileInfos.Concat(BitConverter.GetBytes((Int32)0)).ToArray(); // Zeroes
            HiddenFileInfos = HiddenFileInfos.Concat(BitConverter.GetBytes((Int64)0)).ToArray(); // Zeroes
            Array.Copy(HiddenFileInfos, 0, FileInfos, HiddenFileInfoLocalIndex, HiddenFileInfos.Length);


            // Footer
            // Offset
            Footer = Footer.Concat(BitConverter.GetBytes((Int32)0)).ToArray();
            // PakSize (\16)
            Footer = Footer.Concat(BitConverter.GetBytes((HeaderSize + Contents.Length + FileNames.Length + FileInfos.Length + FooterSize) / 16)).ToArray();
            // One
            Footer = Footer.Concat(BitConverter.GetBytes((Int32)1)).ToArray();
            // Zeroes
            Footer = Footer.Concat(BitConverter.GetBytes((Int32)0)).ToArray();
            Footer = Footer.Concat(BitConverter.GetBytes((Int64)0)).ToArray();
            Footer = Footer.Concat(BitConverter.GetBytes((Int64)0)).ToArray();

            // Header
            // TimeStamp
            Header = Header.Concat(BitConverter.GetBytes((Int32)0)).ToArray();
            // Align
            Header = Header.Concat(BitConverter.GetBytes((Int32)16)).ToArray();
            // Sound
            if (Path.GetDirectoryName(DirName).Contains("sound") || Path.GetDirectoryName(DirName).Contains("Sound"))
                Header = Header.Concat(BitConverter.GetBytes((Int32)1)).ToArray();
            else
                Header = Header.Concat(BitConverter.GetBytes((Int32)0)).ToArray();
            // Files Count (+1 Hidden)
            Header = Header.Concat(BitConverter.GetBytes(Files.Length)).ToArray();
            // Info Offset (/16)
            Header = Header.Concat(BitConverter.GetBytes((HeaderSize + Contents.Length + FileNames.Length) / 16)).ToArray();
            // Tag Offset (/16)
            Header = Header.Concat(BitConverter.GetBytes((HeaderSize + TagLocalOffset) / 16)).ToArray();
            // Zero0
            Header = Header.Concat(BitConverter.GetBytes((Int32)0)).ToArray();
            // TagCount
            Header = Header.Concat(BitConverter.GetBytes(TagCount)).ToArray();
            // FootOffset (/16)
            Header = Header.Concat(BitConverter.GetBytes((HeaderSize + Contents.Length + FileNames.Length + FileInfos.Length) / 16)).ToArray();
            // Dummy
            Header = Header.Concat(BitConverter.GetBytes((Int32)1)).ToArray();
            // Names Offset (/16)
            Header = Header.Concat(BitConverter.GetBytes((HeaderSize + Contents.Length) / 16)).ToArray();
            // Names Size
            Header = Header.Concat(BitConverter.GetBytes(NamesRealSize)).ToArray();
            // Info Size
            Header = Header.Concat(BitConverter.GetBytes(FileInfos.Length)).ToArray();
            // Zero1
            Header = Header.Concat(BitConverter.GetBytes((Int32)0)).ToArray();
            // 64
            Header = Header.Concat(BitConverter.GetBytes((Int32)64)).ToArray();
            // Zeroes
            Array.Resize<byte>(ref Header, 2048);


            // Final Concat
            byte[] RepackedFile = { };
            RepackedFile = RepackedFile.Concat(Header).ToArray();
            RepackedFile = RepackedFile.Concat(Contents).ToArray();
            RepackedFile = RepackedFile.Concat(FileNames).ToArray();
            RepackedFile = RepackedFile.Concat(FileInfos).ToArray();
            RepackedFile = RepackedFile.Concat(Footer).ToArray();

            // WriteOut
            Directory.CreateDirectory(Path.GetDirectoryName(OutputName));
            File.WriteAllBytes(OutputName, RepackedFile);


        }

        public static class CRC32
        {
            private static readonly uint[] crc_table =
                {
            0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9, 0x130476dc, 0x17c56b6b, 0x1a864db2, 0x1e475005,
            0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61, 0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd,
            0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9, 0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,
            0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011, 0x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd,
            0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039, 0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5,
            0xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81, 0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,
            0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49, 0xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95,
            0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1, 0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d,
            0x34867077, 0x30476dc0, 0x3d044b19, 0x39c556ae, 0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,
            0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16, 0x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca,
            0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde, 0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02,
            0x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066, 0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,
            0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e, 0xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692,
            0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6, 0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a,
            0xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e, 0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,
            0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686, 0xd5b88683, 0xd1799b34, 0xdc3abded, 0xd8fba05a,
            0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637, 0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb,
            0x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f, 0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,
            0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47, 0x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b,
            0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff, 0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623,
            0xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7, 0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,
            0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f, 0xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3,
            0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7, 0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b,
            0x9b3660c6, 0x9ff77d71, 0x92b45ba8, 0x9675461f, 0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,
            0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640, 0x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c,
            0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8, 0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24,
            0x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30, 0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,
            0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088, 0x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654,
            0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0, 0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c,
            0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18, 0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,
            0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0, 0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,
            0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668, 0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
        };
            public static uint Crc32(byte[] data)
            {
                uint crc = 0x00000000;

                for (int i = 0; i < data.Length; i++)
                    crc = (crc << 8) ^ crc_table[((crc >> 24) ^ data[i]) & 0xff];

                return crc;
            }
        }

        private void unpack_Click(object sender, EventArgs e)
        {
            try
            {
                if (openPakFileDialog.ShowDialog() == DialogResult.OK && saveUnpackedFilesDialog.ShowDialog() == DialogResult.OK)
                {
                    this.toolStripStatusLabel.Text = "Unpacking started and can take much time. It's Ok if app looks like not responding";
                    this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;
                    progressBar.Value = 0;
                    progressBar.Maximum = openPakFileDialog.FileNames.Length;
                    foreach (String fileName in openPakFileDialog.FileNames)
                    {
                        UnpackPak(fileName, Path.GetDirectoryName(saveUnpackedFilesDialog.FileName));
                        progressBar.Value += 1;
                        this.toolStripStatusLabel.Text = fileName + " unpacked ( " + progressBar.Value.ToString() + " / " + progressBar.Maximum.ToString() + " )";
                        this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;
                    }
                    this.toolStripStatusLabel.Text = "Unpacking finished";
                    this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;
                }
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                return;
            }
        }

        private void pack_Click(object sender, EventArgs e)
        {
            try
            {
                // Choose Dir
                if (folderResourceBrowserDialog.ShowDialog() == DialogResult.OK)
                {

                    saveRepackedFileDialog.FileName = Path.GetFileName(folderResourceBrowserDialog.SelectedPath) + ".pc";

                    if (saveRepackedFileDialog.ShowDialog() == DialogResult.OK)
                    {
                        string Output = saveRepackedFileDialog.FileName;

                        this.toolStripStatusLabel.Text = "Repacking started and can take much time. It's Ok if app looks like not responding";
                        this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;

                        PackPak(folderResourceBrowserDialog.SelectedPath, Output);

                        this.toolStripStatusLabel.Text = "Repacking Finished. Created file: " + Output;
                        this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;
                    }
                }
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                return;
            }
        }

        private void kill_Click(object sender, EventArgs e)
        {
            killProcess();
        }

        private void deleteSav_Click(object sender, EventArgs e)
        {
            try
            {
                DialogResult dialogResult = MessageBox.Show("TazWanted.sav will be deleted. Continue?", "Delete Savegame", MessageBoxButtons.YesNo);
                if (dialogResult == DialogResult.Yes)
                    File.Delete(Path.Combine(TazFolderPath, "TazWanted.sav"));
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                return;
            }
        }

        private void maxSpeed_TextChanged(object sender, EventArgs e)
        {
            try
            {
                maxSpd = Single.Parse(maxSpeed.Text.Replace(",", "."), NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture);
                this.toolStripStatusLabel.Text = "Max Speed changed to " + maxSpd.ToString() + ". Update with -/= keys in game.";
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                return;
            }
        }

        private void cameraSpd_TextChanged(object sender, EventArgs e)
        {
            try
            {
                camSpd = Single.Parse(cameraSpd.Text.Replace(",", "."), NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture);
                this.toolStripStatusLabel.Text = "Camera Speed changed to " + camSpd.ToString() + ". Re-apply Photo Mode to update.";
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                return;
            }
        }

        private void flyModeStep_TextChanged(object sender, EventArgs e)
        {
            try
            {
                flyStep = Single.Parse(flyModeStep.Text.Replace(",", "."), NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture);
                this.toolStripStatusLabel.Text = "Fly Mode Step changed to " + flyStep.ToString() + ".";
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                return;
            }
        }

        private void savedCoordX_TextChanged(object sender, EventArgs e)
        {
            try
            {
                Xcoord = Single.Parse(savedCoordX.Text.Replace(",", "."), NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture);
                this.toolStripStatusLabel.Text = "Saved X coord changed to " + Xcoord.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                return;
            }
        }
        private void savedCoordY_TextChanged(object sender, EventArgs e)
        {
            try
            {
                Ycoord = Single.Parse(savedCoordY.Text.Replace(",", "."), NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture);
                this.toolStripStatusLabel.Text = "Saved Y coord changed to " + Ycoord.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                return;
            }
        }
        private void savedCoordZ_TextChanged(object sender, EventArgs e)
        {
            try
            {
                Zcoord = Single.Parse(savedCoordZ.Text.Replace(",", "."), NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture);
                this.toolStripStatusLabel.Text = "Saved Z coord changed to " + Zcoord.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                return;
            }
        }

        private void resetSettings_Click(object sender, EventArgs e)
        {
            if (File.Exists(TazFolderPath + @"\Patcher.xml"))
            {
                var result = MessageBox.Show("This will reset all achievements and application settings. Game process will be terminated. Continue?", "Reset application settings", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (result == DialogResult.No)
                    return;

                try
                {
                    trainerAutoSave.Checked = false;
                    // Delete xml
                    File.Delete(TazFolderPath + @"\Patcher.xml");
                }
                catch (Exception ex)
                {
                    this.toolStripStatusLabel.Text = ex.Message.ToString();
                    this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                }
            }
            // Kill process
            if (checkProcess())
                killProcess();

            // Restart application
            Program.Restart();
        }

        private void trainerAutoSave_CheckedChanged(object sender, EventArgs e)
        {
            // Save AutoSave State
            savePatcherSettings_Click(sender, e);
        }

        private void form_FormClosed(object sender, FormClosedEventArgs e)
        {
            if (trainerAutoSave.Checked == true)
            {
                savePatcherSettings_Click(sender, e);
            }
        }

        private void updateWrappers_Click(object sender, EventArgs e)
        {
            try
            {
                string d3d9ver = "???";
                string d3d11ver = "???";
                string VulkanVer = "???";

                this.toolStripStatusLabel.Text = "Downloading Wrappers - Please Wait";
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;

                d3d9ver = DownloadD3D8to9();
                d3d11ver = DownloadDgVoodoo2();
                VulkanVer = DownloadDxVk();

                this.toolStripStatusLabel.Text = "Wrappers Downloaded.    d3d8to9: " + d3d9ver + "    dgVoodoo: " + d3d11ver + "    dxvk: " + VulkanVer;
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkGreen;
            }
            catch (Exception ex)
            {
                // Anyway it's cannot be seen
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
            }
        }

        // GetWebResponse
        class MyWebClient : WebClient
        {
            Uri _responseUri;

            public Uri ResponseUri
            {
                get { return _responseUri; }
            }

            protected override WebResponse GetWebResponse(WebRequest request)
            {
                WebResponse response = base.GetWebResponse(request);
                _responseUri = response.ResponseUri;
                return response;
            }
        }

        private String DownloadD3D8to9()
        {
            try
            {
                string d3d9Folder = Path.Combine(TazFolderPath, "Wrappers", "d3d8to9");
                string d3d9File = Path.Combine(d3d9Folder, "d3d8.dll");
                // Create folders
                if (!Directory.Exists(d3d9Folder))
                    Directory.CreateDirectory(d3d9Folder);

                // Download d3d8to9
                using (MyWebClient web1 = new MyWebClient())
                {
                    // Get latest release
                    ServicePointManager.Expect100Continue = true; // For XP/7 compatibility (Thanks MilkGames)
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12; // For XP/7 compatibility (Thanks MilkGames)
                    string data0 = web1.DownloadString("https://github.com/crosire/d3d8to9/releases/latest");
                    string Latest = web1.ResponseUri.ToString();
                    // Get latest assets
                    string data = web1.DownloadString(Latest.Replace("/tag/", "/expanded_assets/"));
                    string dll9Url = gihubUrl + Regex.Match(data, "/crosire/d3d8to9/releases/download/.*/d3d8.dll").ToString();
                    // Downloading
                    web1.DownloadFile(dll9Url, d3d9File);
                    return Regex.Match(dll9Url, "v\\d.*(?=/)").ToString();
                }
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                return "???";
            }
        }

        private String DownloadDgVoodoo2()
        {
            try
            {
                string d3d11Folder = Path.Combine(TazFolderPath, "Wrappers", "dgVoodoo2");
                string d3d11File = Path.Combine(d3d11Folder, "d3d8.dll");
                string d3d11Zip = Path.Combine(d3d11Folder, "dgVoodoo2.zip");
                string d3d11ver = "???";
                // Create folders
                if (!Directory.Exists(d3d11Folder))
                    Directory.CreateDirectory(d3d11Folder);
                // Download dgVoodoo2
                using (MyWebClient web1 = new MyWebClient())
                {
                    // Get latest release
                    ServicePointManager.Expect100Continue = true; // For XP/7 compatibility (Thanks MilkGames)
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12; // For XP/7 compatibility (Thanks MilkGames)
                    string data0 = web1.DownloadString("https://github.com/dege-diosg/dgVoodoo2/releases/latest");
                    string Latest = web1.ResponseUri.ToString();
                    // Get latest assets
                    string data = web1.DownloadString(Latest.Replace("/tag/", "/expanded_assets/"));
                    string zip11Url = gihubUrl + Regex.Match(data, "/dege-diosg/dgVoodoo2/releases/download/.*.zip").ToString();
                    // Downloading
                    web1.DownloadFile(zip11Url, d3d11Zip);
                    d3d11ver = Regex.Match(zip11Url, "v\\d.*(?=/)").ToString();
                }
                // Unpack
                using (ZipArchive archive = ZipFile.OpenRead(d3d11Zip))
                {
                    foreach (ZipArchiveEntry entry in archive.Entries)
                    {
                        if (entry.FullName == "MS/x86/D3D8.dll" || entry.FullName == "dgVoodooCpl.exe")
                            entry.ExtractToFile(Path.Combine(d3d11Folder, entry.Name), true);
                    }
                }
                File.Delete(d3d11Zip);
                return d3d11ver;
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                return "???";
            }
        }

        private String DownloadDxVk()
        {
            try
            {
                string VulkanFolder = Path.Combine(TazFolderPath, "Wrappers", "dxvk");
                string VulkanFile = Path.Combine(VulkanFolder, "d3d9.dll");
                string VulkanTar = Path.Combine(VulkanFolder, "dxvk.tar.gz");
                string VulkanVer = "???";
                // Create folders
                if (!Directory.Exists(VulkanFolder))
                    Directory.CreateDirectory(VulkanFolder);
                // Download Vulkan
                using (MyWebClient web1 = new MyWebClient())
                {
                    // Get latest release
                    ServicePointManager.Expect100Continue = true; // For XP/7 compatibility (Thanks MilkGames)
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12; // For XP/7 compatibility (Thanks MilkGames)
                    string data0 = web1.DownloadString("https://github.com/doitsujin/dxvk/releases/latest");
                    string Latest = web1.ResponseUri.ToString();
                    // Get latest assets
                    string data = web1.DownloadString(Latest.Replace("/tag/", "/expanded_assets/"));
                    string targzVulkanUrl = gihubUrl + Regex.Match(data, "/doitsujin/dxvk/releases/download/.*.tar.gz").ToString();
                    // Downloading
                    web1.DownloadFile(targzVulkanUrl, Path.Combine(VulkanFolder, "dxvk.tar.gz"));
                    VulkanVer = Regex.Match(targzVulkanUrl, "v\\d.*(?=/)").ToString();
                }
                // Unpack
                TarExample.Tar.ExtractTarGz(Path.Combine(VulkanFolder, "dxvk.tar.gz"), Path.Combine(VulkanFolder, "dxvk"));
                foreach (string file in Directory.GetFiles(Path.Combine(VulkanFolder, "dxvk"), "*.dll*", SearchOption.AllDirectories))
                {
                    if (file.Contains("x32\\d3d9.dll"))
                        File.Copy(file, VulkanFile, true);
                }
                Directory.Delete(Path.Combine(VulkanFolder, "dxvk"), true);
                File.Delete(Path.Combine(VulkanFolder, "dxvk.tar.gz"));
                return VulkanVer;
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
                return "???";
            }
        }
        private void CheckTrainerUpdate(string version)
        {
            try
            {
                // Download d3d8to9
                using (MyWebClient web1 = new MyWebClient())
                {
                    // Get latest release
                    ServicePointManager.Expect100Continue = true; // For XP/7 compatibility (Thanks MilkGames)
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12; // For XP/7 compatibility (Thanks MilkGames)
                    string data0 = web1.DownloadString("https://github.com/MuxaJlbl4/Taz_Wanted_trainer_and_patcher/releases/latest");
                    string Latest = web1.ResponseUri.ToString();

                    // If version is not latest
                    if (!Latest.Contains(version))
                    {
                        var result = MessageBox.Show("New version of Taz Wanted Trainer & Patcher is available. Open the release page?", "New version available", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                        if (result == DialogResult.Yes)
                        {
                            Process.Start("https://github.com/MuxaJlbl4/Taz_Wanted_trainer_and_patcher/releases/latest");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                this.toolStripStatusLabel.Text = ex.Message.ToString();
                this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkRed;
            }
        }

        private void listViewActors_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listViewActors.SelectedItems.Count > 0)
            {
                labelSelection.Text = listViewActors.SelectedItems[0].Text;
                AdvancedActorCheat(true);
            }
        }

        private void buttonPrev_Click(object sender, EventArgs e)
        {
            if (ballMode.Checked == false)
                ballMode.Checked = true;

            if (listViewActors.SelectedItems.Count > 0)
            {
                int i = listViewActors.SelectedItems[0].Index;
                listViewActors.SelectedItems.Clear();
                if (i - 1 >= 0)
                    listViewActors.Items[i - 1].Selected = true;
                else
                    listViewActors.Items[listViewActors.Items.Count - 1].Selected = true;
            }
            else
                listViewActors.Items[listViewActors.Items.Count - 1].Selected = true;

            // Change trainer button state with no event
            if (ballMode.Checked == false)
            {
                ballMode.CheckedChanged -= ballMode_CheckedChanged;
                ballMode.Checked = true;
                ballMode.CheckedChanged += ballMode_CheckedChanged;
            }
        }

        private void buttonNext_Click(object sender, EventArgs e)
        {
            if (listViewActors.SelectedItems.Count > 0)
            {
                int i = listViewActors.SelectedItems[0].Index;
                listViewActors.SelectedItems.Clear();
                if (i + 1 < listViewActors.Items.Count)
                    listViewActors.Items[i+1].Selected = true;
                else
                    listViewActors.Items[0].Selected = true;
            }
            else
                listViewActors.Items[1].Selected = true;

            // Change trainer button state with no event
            if (ballMode.Checked == false)
            {
                ballMode.CheckedChanged -= ballMode_CheckedChanged;
                ballMode.Checked = true;
                ballMode.CheckedChanged += ballMode_CheckedChanged;
            }
        }

        private void AdvancedActorCheat(bool state)
        {
            // Check patches
            byte[] check = { 0x00 };
            check = checkAndRead((IntPtr)0x005F6A50, check, check.Length, new IntPtr());
            if (check[0] == 0)
            {
                message("Advanced Cheats patch required");
                return;
            }

            SingleCallInitialise();

            string actor = "";

            // Toggle cheat on/off
            if (state)
                actor = labelSelection.Text;
            else
                actor = "Taz";

            // ResetTaz.CEA (InjectionPre)
            byte[] tazdata = { 0x74, 0x61, 0x7A, 0x00, 0x74, 0x61, 0x7A, 0x64, 0x65, 0x76, 0x69, 0x6C, 0x2E, 0x6F, 0x62, 0x65, 0x00 };
            checkAndWrite((IntPtr)0x00731500, tazdata, tazdata.Length, new IntPtr());
            byte[] tazcode = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x00, 0x15, 0x73, 0x00, 0xE8, 0x71, 0x9A, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x15, 0x73, 0x00, 0x68, 0x04, 0x15, 0x73, 0x00, 0xE8, 0x0A, 0xBD, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0x04, 0x15, 0x73, 0x00, 0xE8, 0x8E, 0xC1, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0x5E, 0xEC, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x50, 0xE8, 0x4F, 0xA1, 0xE3, 0xFF, 0x83, 0xC4, 0x04, 0xE8, 0x07, 0x36, 0xEE, 0xFF, 0xB8, 0x00, 0x00, 0xFA, 0x43, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x68, 0x1B, 0x00, 0x00, 0x00, 0xE8, 0x83, 0x54, 0xE8, 0xFF, 0x83, 0xC4, 0x04, 0x81, 0x25, 0x28, 0x8E, 0x6C, 0x00, 0xF7, 0xF7, 0xFF, 0xFB, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0x04, 0x15, 0x73, 0x00, 0x50, 0xE8, 0xB0, 0x04, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xC8, 0x01, 0x00, 0x00, 0x8B, 0x81, 0xB0, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x51, 0x0F, 0x85, 0x0A, 0x00, 0x00, 0x00, 0xC7, 0x81, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3 };
            checkAndWrite((IntPtr)0x005F6C80, tazcode, tazcode.Length, new IntPtr());

            float CameraDistance = 500;

            if (actor == "Agent")
            {
                // CostumeAgent.CEA
                byte[] data = { 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x61, 0x67, 0x65, 0x6E, 0x74, 0x68, 0x61, 0x74, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x61, 0x67, 0x65, 0x6E, 0x74, 0x73, 0x68, 0x61, 0x64, 0x65, 0x73, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x61, 0x67, 0x65, 0x6E, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2E, 0x6F, 0x62, 0x65, 0x00 };
                checkAndWrite((IntPtr)0x00731380, data, data.Length, new IntPtr());
                byte[] code = { 0x6A, 0x01, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF4, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0x90, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x9C, 0x13, 0x73, 0x00, 0xE8, 0x7C, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xB4, 0x13, 0x73, 0x00, 0xE8, 0x68, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xD2, 0x8A, 0x91, 0x0C, 0x01, 0x00, 0x00, 0x6A, 0x0F, 0x50, 0xE8, 0x99, 0x99, 0xE3, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Bandit")
            {
                // CostumeBandit.CEA
                byte[] data = { 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x00, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x74, 0x61, 0x7A, 0x73, 0x74, 0x75, 0x62, 0x62, 0x6C, 0x65, 0x63, 0x6F, 0x77, 0x62, 0x6F, 0x79, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x63, 0x6F, 0x77, 0x62, 0x6F, 0x79, 0x62, 0x65, 0x6C, 0x74, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x63, 0x6F, 0x77, 0x62, 0x6F, 0x79, 0x68, 0x61, 0x74, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x63, 0x6F, 0x77, 0x62, 0x6F, 0x79, 0x6D, 0x61, 0x73, 0x6B, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x63, 0x6F, 0x77, 0x62, 0x6F, 0x79, 0x6D, 0x6F, 0x75, 0x73, 0x74, 0x61, 0x63, 0x68, 0x65, 0x2E, 0x6F, 0x62, 0x65, 0x00 };
                checkAndWrite((IntPtr)0x00731380, data, data.Length, new IntPtr());
                byte[] code = { 0x6A, 0x01, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xF4, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xB5, 0xD7, 0xED, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x01, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xD6, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x94, 0x13, 0x73, 0x00, 0xE8, 0x72, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xB1, 0x13, 0x73, 0x00, 0xE8, 0x5E, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xC8, 0x13, 0x73, 0x00, 0xE8, 0x4A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xDE, 0x13, 0x73, 0x00, 0xE8, 0x36, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xF5, 0x13, 0x73, 0x00, 0xE8, 0x22, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xD2, 0x8A, 0x91, 0x0C, 0x01, 0x00, 0x00, 0x6A, 0x01, 0x50, 0xE8, 0x53, 0x99, 0xE3, 0xFF, 0x83, 0xC4, 0x08, 0xE8, 0x3B, 0x39, 0xEE, 0xFF, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Construction Worker")
            {
                // CostumeConstruction.CEA
                byte[] data = { 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x68, 0x61, 0x74, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x62, 0x65, 0x6C, 0x74, 0x2E, 0x6F, 0x62, 0x65, 0x00 };
                checkAndWrite((IntPtr)0x00731380, data, data.Length, new IntPtr());
                byte[] code = { 0x6A, 0x01, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF4, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0x90, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA3, 0x13, 0x73, 0x00, 0xE8, 0x7C, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xD2, 0x8A, 0x91, 0x0C, 0x01, 0x00, 0x00, 0x6A, 0x02, 0x50, 0xE8, 0xAD, 0x99, 0xE3, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Explorer")
            {
                // CostumeExplorer.CEA
                byte[] data = { 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x65, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x65, 0x72, 0x68, 0x61, 0x74, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x65, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x65, 0x72, 0x6D, 0x6F, 0x6E, 0x61, 0x63, 0x6C, 0x65, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x65, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x65, 0x72, 0x74, 0x61, 0x7A, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x65, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x65, 0x72, 0x6D, 0x61, 0x63, 0x68, 0x65, 0x74, 0x65, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x65, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x65, 0x72, 0x62, 0x61, 0x63, 0x6B, 0x70, 0x61, 0x63, 0x6B, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x65, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x65, 0x72, 0x62, 0x65, 0x6C, 0x74, 0x2E, 0x6F, 0x62, 0x65, 0x00 };
                checkAndWrite((IntPtr)0x00731380, data, data.Length, new IntPtr());
                byte[] code = { 0x6A, 0x01, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF4, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0x90, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x9F, 0x13, 0x73, 0x00, 0xE8, 0x7C, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xBB, 0x13, 0x73, 0x00, 0xE8, 0x68, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xD3, 0x13, 0x73, 0x00, 0xE8, 0x54, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x0C, 0x14, 0x73, 0x00, 0xE8, 0x40, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xD2, 0x8A, 0x91, 0x0C, 0x01, 0x00, 0x00, 0x6A, 0x04, 0x50, 0xE8, 0x71, 0x99, 0xE3, 0xFF, 0x83, 0xC4, 0x08, 0xE8, 0x59, 0x39, 0xEE, 0xFF, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Indy")
            {
                // CostumeIndy.CEA
                byte[] data = { 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x00, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x69, 0x6E, 0x64, 0x79, 0x68, 0x61, 0x74, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x69, 0x6E, 0x64, 0x79, 0x77, 0x68, 0x69, 0x70, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x69, 0x6E, 0x64, 0x79, 0x5F, 0x66, 0x6C, 0x79, 0x69, 0x6E, 0x67, 0x68, 0x61, 0x74, 0x6F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x2E, 0x6F, 0x62, 0x65, 0x00 };
                checkAndWrite((IntPtr)0x00731380, data, data.Length, new IntPtr());
                byte[] code = { 0x6A, 0x01, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xF4, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xB5, 0xD7, 0xED, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x01, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xD6, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x94, 0x13, 0x73, 0x00, 0xE8, 0x72, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA8, 0x13, 0x73, 0x00, 0xE8, 0x5E, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xBD, 0x13, 0x73, 0x00, 0xE8, 0x4A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xD2, 0x8A, 0x91, 0x0C, 0x01, 0x00, 0x00, 0x6A, 0x09, 0x50, 0xE8, 0x7B, 0x99, 0xE3, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Miner")
            {
                // CostumeMiner.CEA
                byte[] data = { 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x6D, 0x69, 0x6E, 0x65, 0x72, 0x70, 0x69, 0x63, 0x6B, 0x61, 0x78, 0x65, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x6D, 0x69, 0x6E, 0x65, 0x72, 0x62, 0x65, 0x6C, 0x74, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x6D, 0x69, 0x6E, 0x65, 0x72, 0x68, 0x65, 0x6C, 0x6D, 0x65, 0x74, 0x2E, 0x6F, 0x62, 0x65, 0x00 };
                checkAndWrite((IntPtr)0x00731380, data, data.Length, new IntPtr());
                byte[] code = { 0x6A, 0x01, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF4, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0x90, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x7C, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xB6, 0x13, 0x73, 0x00, 0xE8, 0x68, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xD2, 0x8A, 0x91, 0x0C, 0x01, 0x00, 0x00, 0x6A, 0x08, 0x50, 0xE8, 0x99, 0x99, 0xE3, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Ninja")
            {
                // CostumeNinja.CEA
                byte[] data = { 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x00, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x62, 0x61, 0x6E, 0x64, 0x61, 0x6E, 0x61, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x6E, 0x69, 0x6E, 0x6A, 0x61, 0x62, 0x65, 0x6C, 0x74, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x6E, 0x69, 0x6E, 0x6A, 0x61, 0x6B, 0x61, 0x74, 0x61, 0x6E, 0x61, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x74, 0x61, 0x7A, 0x6E, 0x69, 0x6E, 0x6A, 0x61, 0x2E, 0x6F, 0x62, 0x65, 0x00 };
                checkAndWrite((IntPtr)0x00731380, data, data.Length, new IntPtr());
                byte[] code = { 0x6A, 0x01, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xF4, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xB5, 0xD7, 0xED, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x01, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xD6, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x94, 0x13, 0x73, 0x00, 0xE8, 0x72, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA8, 0x13, 0x73, 0x00, 0xE8, 0x5E, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xBE, 0x13, 0x73, 0x00, 0xE8, 0x4A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xD6, 0x13, 0x73, 0x00, 0xE8, 0x36, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xD2, 0x8A, 0x91, 0x0C, 0x01, 0x00, 0x00, 0x6A, 0x00, 0x50, 0xE8, 0x67, 0x99, 0xE3, 0xFF, 0x83, 0xC4, 0x08, 0xE8, 0x4F, 0x39, 0xEE, 0xFF, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Rappa")
            {
                // CostumeRappa.CEA
                byte[] data = { 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x00, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x74, 0x61, 0x7A, 0x72, 0x61, 0x70, 0x70, 0x61, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x62, 0x61, 0x73, 0x65, 0x62, 0x61, 0x6C, 0x6C, 0x63, 0x61, 0x70, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x64, 0x65, 0x78, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x5C, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x62, 0x6C, 0x61, 0x73, 0x74, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x62, 0x65, 0x61, 0x74, 0x62, 0x6F, 0x78, 0x65, 0x71, 0x75, 0x61, 0x6C, 0x2E, 0x67, 0x69, 0x66, 0x00, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x5C, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x62, 0x6C, 0x61, 0x73, 0x74, 0x61, 0x6C, 0x70, 0x68, 0x61, 0x2E, 0x74, 0x67, 0x61, 0x00 };
                checkAndWrite((IntPtr)0x00731380, data, data.Length, new IntPtr());
                byte[] code = { 0x6A, 0x01, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xF4, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xB5, 0xD7, 0xED, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x01, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xD6, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x93, 0x13, 0x73, 0x00, 0xE8, 0x72, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA8, 0x13, 0x73, 0x00, 0xE8, 0x5E, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xC0, 0x13, 0x73, 0x00, 0xE8, 0x4A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xD0, 0x13, 0x73, 0x00, 0xE8, 0x36, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xD2, 0x8A, 0x91, 0x0C, 0x01, 0x00, 0x00, 0x6A, 0x06, 0x50, 0xE8, 0x67, 0x99, 0xE3, 0xFF, 0x83, 0xC4, 0x08, 0xE8, 0x4F, 0x39, 0xEE, 0xFF, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Reindeer")
            {
                // CostumeReindeer.CEA
                byte[] data = { 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x69, 0x63, 0x65, 0x61, 0x6E, 0x74, 0x6C, 0x65, 0x72, 0x73, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x69, 0x63, 0x65, 0x72, 0x65, 0x64, 0x6E, 0x6F, 0x73, 0x65, 0x2E, 0x6F, 0x62, 0x65, 0x00 };
                checkAndWrite((IntPtr)0x00731380, data, data.Length, new IntPtr());
                byte[] code = { 0x6A, 0x01, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF4, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0x90, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x9E, 0x13, 0x73, 0x00, 0xE8, 0x7C, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xD2, 0x8A, 0x91, 0x0C, 0x01, 0x00, 0x00, 0x6A, 0x03, 0x50, 0xE8, 0xAD, 0x99, 0xE3, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Skater")
            {
                // CostumeSkater.CEA
                byte[] data = { 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x00, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x74, 0x61, 0x7A, 0x73, 0x6B, 0x61, 0x74, 0x65, 0x72, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x73, 0x6B, 0x61, 0x74, 0x65, 0x72, 0x65, 0x6C, 0x62, 0x6F, 0x77, 0x70, 0x61, 0x64, 0x6C, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x73, 0x6B, 0x61, 0x74, 0x65, 0x72, 0x65, 0x6C, 0x62, 0x6F, 0x77, 0x70, 0x61, 0x64, 0x72, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x73, 0x6B, 0x61, 0x74, 0x65, 0x72, 0x73, 0x6B, 0x61, 0x74, 0x65, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x73, 0x6B, 0x61, 0x74, 0x65, 0x72, 0x62, 0x61, 0x73, 0x65, 0x62, 0x61, 0x6C, 0x6C, 0x63, 0x61, 0x70, 0x2E, 0x6F, 0x62, 0x65, 0x00 };
                checkAndWrite((IntPtr)0x00731380, data, data.Length, new IntPtr());
                byte[] code = { 0x6A, 0x01, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xF4, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xB5, 0xD7, 0xED, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x01, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xD6, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x94, 0x13, 0x73, 0x00, 0xE8, 0x72, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xAA, 0x13, 0x73, 0x00, 0xE8, 0x5E, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xC6, 0x13, 0x73, 0x00, 0xE8, 0x4A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xE2, 0x13, 0x73, 0x00, 0xE8, 0x36, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xFF, 0x13, 0x73, 0x00, 0xE8, 0x22, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xD2, 0x8A, 0x91, 0x0C, 0x01, 0x00, 0x00, 0x6A, 0x0D, 0x50, 0xE8, 0x53, 0x99, 0xE3, 0xFF, 0x83, 0xC4, 0x08, 0xE8, 0x3B, 0x39, 0xEE, 0xFF, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Snowboarder")
            {
                // CostumeSnowboarder.CEA
                byte[] data = { 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x00, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x74, 0x61, 0x7A, 0x73, 0x6E, 0x6F, 0x77, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x73, 0x6E, 0x6F, 0x77, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x68, 0x61, 0x74, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x73, 0x6E, 0x6F, 0x77, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x67, 0x6F, 0x67, 0x67, 0x6C, 0x65, 0x73, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x73, 0x6E, 0x6F, 0x77, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x73, 0x6E, 0x6F, 0x77, 0x62, 0x61, 0x6C, 0x6C, 0x2E, 0x6F, 0x62, 0x65, 0x00 };
                checkAndWrite((IntPtr)0x00731380, data, data.Length, new IntPtr());
                byte[] code = { 0x6A, 0x01, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xF4, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xB5, 0xD7, 0xED, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x01, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xD6, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x94, 0x13, 0x73, 0x00, 0xE8, 0x72, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xAF, 0x13, 0x73, 0x00, 0xE8, 0x5E, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xC8, 0x13, 0x73, 0x00, 0xE8, 0x4A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xE5, 0x13, 0x73, 0x00, 0xE8, 0x36, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xFB, 0x13, 0x73, 0x00, 0xE8, 0x22, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xD2, 0x8A, 0x91, 0x0C, 0x01, 0x00, 0x00, 0x6A, 0x0B, 0x50, 0xE8, 0x53, 0x99, 0xE3, 0xFF, 0x83, 0xC4, 0x08, 0xE8, 0x3B, 0x39, 0xEE, 0xFF, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Stuntman")
            {
                // CostumeCrashHelmet.CEA
                byte[] data = { 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x63, 0x72, 0x61, 0x73, 0x68, 0x68, 0x65, 0x6C, 0x6D, 0x65, 0x74, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x65, 0x6C, 0x62, 0x6F, 0x77, 0x70, 0x61, 0x64, 0x6C, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x65, 0x6C, 0x62, 0x6F, 0x77, 0x70, 0x61, 0x64, 0x72, 0x2E, 0x6F, 0x62, 0x65, 0x00 };
                checkAndWrite((IntPtr)0x00731380, data, data.Length, new IntPtr());
                byte[] code = { 0x6A, 0x01, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF4, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x9F, 0x13, 0x73, 0x00, 0xE8, 0x90, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xB5, 0x13, 0x73, 0x00, 0xE8, 0x7C, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0x68, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xD2, 0x8A, 0x91, 0x0C, 0x01, 0x00, 0x00, 0x6A, 0x10, 0x50, 0xE8, 0x99, 0x99, 0xE3, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Surfer")
            {
                // CostumeSurfer.CEA
                byte[] data = { 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x00, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x74, 0x61, 0x7A, 0x61, 0x71, 0x75, 0x61, 0x73, 0x75, 0x72, 0x66, 0x65, 0x72, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x61, 0x71, 0x75, 0x61, 0x73, 0x68, 0x61, 0x64, 0x65, 0x73, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x61, 0x71, 0x75, 0x61, 0x73, 0x75, 0x72, 0x66, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x2E, 0x6F, 0x62, 0x65, 0x00 };
                checkAndWrite((IntPtr)0x00731380, data, data.Length, new IntPtr());
                byte[] code = { 0x6A, 0x01, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xF4, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xB5, 0xD7, 0xED, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x01, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xD6, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x94, 0x13, 0x73, 0x00, 0xE8, 0x72, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xAE, 0x13, 0x73, 0x00, 0xE8, 0x5E, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xC5, 0x13, 0x73, 0x00, 0xE8, 0x4A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xD2, 0x8A, 0x91, 0x0C, 0x01, 0x00, 0x00, 0x6A, 0x05, 0x50, 0xE8, 0x7B, 0x99, 0xE3, 0xFF, 0x83, 0xC4, 0x08, 0xE8, 0x63, 0x39, 0xEE, 0xFF, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "SWAT")
            {
                // CostumeSwat.CEA
                byte[] data = { 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x00, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x73, 0x77, 0x61, 0x74, 0x74, 0x61, 0x7A, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x73, 0x77, 0x61, 0x74, 0x63, 0x61, 0x70, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x73, 0x77, 0x61, 0x74, 0x62, 0x61, 0x63, 0x6B, 0x70, 0x61, 0x63, 0x6B, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x73, 0x77, 0x61, 0x74, 0x73, 0x68, 0x61, 0x64, 0x65, 0x73, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x73, 0x77, 0x61, 0x74, 0x65, 0x6C, 0x62, 0x6F, 0x77, 0x70, 0x61, 0x64, 0x6C, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x73, 0x77, 0x61, 0x74, 0x65, 0x6C, 0x62, 0x6F, 0x77, 0x70, 0x61, 0x64, 0x72, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x73, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x65, 0x73, 0x65, 0x67, 0x75, 0x6E, 0x2E, 0x6F, 0x62, 0x65, 0x00 };
                checkAndWrite((IntPtr)0x00731380, data, data.Length, new IntPtr());
                byte[] code = { 0x6A, 0x01, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xF4, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xB5, 0xD7, 0xED, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x01, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xD6, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x94, 0x13, 0x73, 0x00, 0xE8, 0x72, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA8, 0x13, 0x73, 0x00, 0xE8, 0x5E, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xBC, 0x13, 0x73, 0x00, 0xE8, 0x4A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xD5, 0x13, 0x73, 0x00, 0xE8, 0x36, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xEC, 0x13, 0x73, 0x00, 0xE8, 0x22, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x06, 0x14, 0x73, 0x00, 0xE8, 0x0E, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x20, 0x14, 0x73, 0x00, 0xE8, 0xFA, 0xBF, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xD2, 0x8A, 0x91, 0x0C, 0x01, 0x00, 0x00, 0x6A, 0x0C, 0x50, 0xE8, 0x2B, 0x99, 0xE3, 0xFF, 0x83, 0xC4, 0x08, 0xE8, 0x13, 0x39, 0xEE, 0xFF, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Tarzan")
            {
                // CostumeTarzan.CEA
                byte[] data = { 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x00, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x74, 0x61, 0x7A, 0x74, 0x61, 0x72, 0x7A, 0x61, 0x6E, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x65, 0x6C, 0x65, 0x70, 0x68, 0x61, 0x6E, 0x74, 0x2E, 0x6F, 0x62, 0x65, 0x00 };
                checkAndWrite((IntPtr)0x00731380, data, data.Length, new IntPtr());
                byte[] code = { 0x6A, 0x01, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xF4, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xB5, 0xD7, 0xED, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x01, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xD6, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x94, 0x13, 0x73, 0x00, 0xE8, 0x72, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xAA, 0x13, 0x73, 0x00, 0xE8, 0x5E, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xD2, 0x8A, 0x91, 0x0C, 0x01, 0x00, 0x00, 0x6A, 0x0A, 0x50, 0xE8, 0x8F, 0x99, 0xE3, 0xFF, 0x83, 0xC4, 0x08, 0xE8, 0x77, 0x39, 0xEE, 0xFF, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Trippy")
            {
                // CostumeTrippy.CEA
                byte[] data = { 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x74, 0x61, 0x7A, 0x74, 0x72, 0x69, 0x70, 0x70, 0x79, 0x2E, 0x6F, 0x62, 0x65, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x74, 0x72, 0x69, 0x70, 0x70, 0x79, 0x73, 0x68, 0x61, 0x64, 0x65, 0x73, 0x2E, 0x6F, 0x62, 0x65, 0x00 };
                checkAndWrite((IntPtr)0x00731380, data, data.Length, new IntPtr());
                byte[] code = { 0x6A, 0x01, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF4, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0x90, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x9D, 0x13, 0x73, 0x00, 0xE8, 0x7C, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xD2, 0x8A, 0x91, 0x0C, 0x01, 0x00, 0x00, 0x6A, 0x0E, 0x50, 0xE8, 0xAD, 0x99, 0xE3, 0xFF, 0x83, 0xC4, 0x08, 0xE8, 0x95, 0x39, 0xEE, 0xFF, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Werewolf")
            {
                // CostumeWerewolf.CEA
                byte[] data = { 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x00, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x00, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x5C, 0x74, 0x61, 0x7A, 0x77, 0x65, 0x72, 0x65, 0x77, 0x6F, 0x6C, 0x66, 0x2E, 0x6F, 0x62, 0x65, 0x00 };
                checkAndWrite((IntPtr)0x00731380, data, data.Length, new IntPtr());
                byte[] code = { 0x6A, 0x01, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xF4, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0xB5, 0xD7, 0xED, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x01, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xD6, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x6A, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x94, 0x13, 0x73, 0x00, 0xE8, 0x72, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xCC, 0x01, 0x00, 0x00, 0x31, 0xD2, 0x8A, 0x91, 0x0C, 0x01, 0x00, 0x00, 0x6A, 0x07, 0x50, 0xE8, 0xA3, 0x99, 0xE3, 0xFF, 0x83, 0xC4, 0x08, 0xE8, 0x8B, 0x39, 0xEE, 0xFF, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Alligator")
            {
                byte[] pak = Encoding.ASCII.GetBytes("alligator\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("alligator.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Ape Pirate")
            {
                byte[] pak = Encoding.ASCII.GetBytes("pirateape\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("pirateape.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Bandit Cowboy")
            {
                byte[] pak = Encoding.ASCII.GetBytes("bjshellac\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("bjshellac.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Bandit Miner")
            {
                byte[] pak = Encoding.ASCII.GetBytes("bjscargill\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("bjscargill.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Beaky Buzzard")
            {
                byte[] pak = Encoding.ASCII.GetBytes("beaky\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("beaky.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Beaky Parrot")
            {
                byte[] pak = Encoding.ASCII.GetBytes("parrot\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("parrot.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Bear Brown")
            {
                byte[] pak = Encoding.ASCII.GetBytes("browbear\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("browbear.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Bear Polar")
            {
                byte[] pak = Encoding.ASCII.GetBytes("polarbear\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("polarbear.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Bot Builder")
            {
                byte[] pak = Encoding.ASCII.GetBytes("construction bot\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("construction bot.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Bot Miner")
            {
                byte[] pak = Encoding.ASCII.GetBytes("Minerbot\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("minerbot.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Bot Security")
            {
                byte[] pak = Encoding.ASCII.GetBytes("security bot\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("security bot.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Builder")
            {
                byte[] pak = Encoding.ASCII.GetBytes("construction worker\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("construction worker.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Catcher")
            {
                byte[] pak = Encoding.ASCII.GetBytes("keeper\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("keeper.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Daffy Duck")
            {
                byte[] pak = Encoding.ASCII.GetBytes("daft\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("daft.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Dog Monster")
            {
                byte[] pak = Encoding.ASCII.GetBytes("demondog\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("demondog.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Dog Security")
            {
                byte[] pak = Encoding.ASCII.GetBytes("doggy\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("doggy.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Elephant")
            {
                byte[] pak = Encoding.ASCII.GetBytes("elephant\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("elephant.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 2000;
            }
            else if (actor == "Elmer Fudd")
            {
                byte[] pak = Encoding.ASCII.GetBytes("mrfudd\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("mrfudd.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Glover Ball")
            {
                byte[] pak = Encoding.ASCII.GetBytes("cheats\0extras\\ball.obe\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                // Ball.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x87, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x1B, 0x00, 0x00, 0x00, 0xE8, 0x4D, 0x58, 0xE8, 0xFF, 0x83, 0xC4, 0x04, 0x68, 0x1B, 0x00, 0x00, 0x00, 0xE8, 0xB0, 0x54, 0xE8, 0xFF, 0x83, 0xC4, 0x04, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Gossamer")
            {
                byte[] pak = Encoding.ASCII.GetBytes("gossamer\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("gossamer.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Guard Green")
            {
                byte[] pak = Encoding.ASCII.GetBytes("greenguard\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("greenguard.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Guard Red")
            {
                byte[] pak = Encoding.ASCII.GetBytes("guard\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("guard.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Monkey")
            {
                byte[] pak = Encoding.ASCII.GetBytes("irrepresible\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("irrepresible.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Mouse")
            {
                byte[] pak = Encoding.ASCII.GetBytes("cheats\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("extras\\mouse.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Mouse.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x8B, 0x88, 0xC8, 0x01, 0x00, 0x00, 0xC7, 0x81, 0xB0, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Nasty Canasta")
            {
                byte[] pak = Encoding.ASCII.GetBytes("nastycan\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("nastycan.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Shark")
            {
                byte[] pak = Encoding.ASCII.GetBytes("shark\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("shark.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Shedevil")
            {
                byte[] pak = Encoding.ASCII.GetBytes("shedevil\0shedevil.obe\0shedevilbowtie.obe\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                // Shedevil.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x89, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0x96, 0x13, 0x73, 0x00, 0xE8, 0x73, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0x89, 0x13, 0x73, 0x00, 0xE8, 0xF7, 0xC4, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xC7, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0x6A, 0x03, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x68, 0xE8, 0x0F, 0x63, 0x00, 0x68, 0x96, 0x13, 0x73, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x50, 0xE8, 0xF6, 0x0E, 0xE8, 0xFF, 0x83, 0xC4, 0x1C, 0xE8, 0x5E, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0x89, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x28, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Sylvester the Cat")
            {
                byte[] pak = Encoding.ASCII.GetBytes("sylvester\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("sylvester.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Taz")
            {
                byte[] pak = Encoding.ASCII.GetBytes("taz\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("tazdevil.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Tribal Chief")
            {
                byte[] pak = Encoding.ASCII.GetBytes("tribalchief\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("tribalchief.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Tweety")
            {
                byte[] pak = Encoding.ASCII.GetBytes("tweety\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("tweety.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Tweety Mecha")
            {
                byte[] pak = Encoding.ASCII.GetBytes("mechatweety\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("mechatweety.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
                CameraDistance = 1000;
            }
            else if (actor == "Wile E. Coyote")
            {
                byte[] pak = Encoding.ASCII.GetBytes("coyote\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("coyote.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Whack-in-a-Box")
            {
                byte[] pak = Encoding.ASCII.GetBytes("resobjs\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("secbox.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Yosemite Sam")
            {
                byte[] pak = Encoding.ASCII.GetBytes("yosemite\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("yosemite.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else if (actor == "Yosemite Sam Tycoon")
            {
                byte[] pak = Encoding.ASCII.GetBytes("tycoon\0");
                checkAndWrite((IntPtr)0x00731380, pak, pak.Length, new IntPtr());
                byte[] obe = Encoding.ASCII.GetBytes("tycoon.obe\0");
                checkAndWrite((IntPtr)0x007313A0, obe, obe.Length, new IntPtr());
                // Actor.CEA
                byte[] code = { 0x68, 0x01, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0xE8, 0xF1, 0x9D, 0xEA, 0xFF, 0x83, 0xC4, 0x08, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x80, 0x13, 0x73, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x8A, 0xC0, 0xE7, 0xFF, 0x83, 0xC4, 0x0C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0xE8, 0x0E, 0xC5, 0xE7, 0xFF, 0x8B, 0x15, 0xC0, 0x8B, 0x6C, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x52, 0xE8, 0xDE, 0xEF, 0xE7, 0xFF, 0x83, 0xC4, 0x14, 0xE8, 0x96, 0x39, 0xEE, 0xFF, 0x8B, 0x05, 0x30, 0x55, 0x65, 0x00, 0xA3, 0x58, 0x9B, 0x64, 0x00, 0x8B, 0x05, 0xC0, 0x8B, 0x6C, 0x00, 0x05, 0xA0, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x13, 0x73, 0x00, 0x50, 0xE8, 0x55, 0x08, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }
            else
            {
                // Return
                byte[] code = { 0xC3 };
                checkAndWrite((IntPtr)0x005F6900, code, code.Length, new IntPtr());
            }

            // Update Camera Distance
            byte[] dist = BitConverter.GetBytes(CameraDistance);
            checkAndWrite((IntPtr)0x00655530, dist, dist.Length, new IntPtr());
            
            // InjectionPre + InjectionPost
            byte[] injectionflag = { 0x02 };
            checkAndWrite((IntPtr)0x00655510, injectionflag, injectionflag.Length, new IntPtr());

            message(actor);
        }

        private void pictureTaz_Click(object sender, EventArgs e)
        {
#if DEBUG
            injections.Visible = !injections.Visible;
#endif
        }
        private void InitModeOptions()
        {
            if (radioAchievements.Checked)
                AchLockOptions();
            else if (radioSpeedrun.Checked)
                SpdLockOptions();
            else if (radioTrainer.Checked)
            {
                SpdUnlockOptions(true);
                AchUnlockOptions();
            }
        }
        private void SpdLockOptions()
        {
            // Locking options
            mods.Enabled = false;
            cutsceneSubtitles.Enabled = false;
            extraDebug.Enabled = false;
            coopFix.Enabled = false;
            injections.Enabled = false;
            achievements.Enabled = true;
            level.Enabled = false;
            levelComboBox.Enabled = false;
            daffyculty.Enabled = false;
            daffycultyComboBox.Enabled = false;

            windowed.Enabled = false;
            aspectRatio.Enabled = false;
            aspectSwap.Visible = true;

            windowed.Enabled = false;
            limitFPS.Enabled = false;
            numericFpsCap.Enabled = false;
            checkBoxFoV.Enabled = false;
            numericFoV.Enabled = false;
            disableDrawDistance.Enabled = false;
            fog.Enabled = false;
            fogComboBox.Enabled = false;

            trainerTab.Enabled = false;

            advancedTab.Enabled = false;

            // API
            int ind = apiComboBox.SelectedIndex;
            apiComboBox.Items.Clear();
            apiComboBox.Items.Add("d3d8 · vanilla");
            apiComboBox.Items.Add("d3d9 · d3d8to9");
            if (ind >= 1)
                apiComboBox.SelectedIndex = 1;
            else
                apiComboBox.SelectedIndex = 0;

            // Aspect
            aspectRatio.Checked = true;
            aspect1.ReadOnly = true;
            aspect2.ReadOnly = true;
            if (!(aspect1.Text == "16" && aspect2.Text == "9"))
            {
                aspect1.Text = "4";
                aspect2.Text = "3";
            }


            // Change options
            /*
            mods.Checked = false;
            cutsceneSubtitles.Checked = false;
            extraDebug.Checked = false;
            coopFix.Checked = false;
            injections.Checked = false;
            levelComboBox.SelectedIndex = 0;
            daffycultyComboBox.SelectedIndex = 0;
            windowed.Checked = false;
            limitFPS.Checked = false;
            checkBoxFoV.Checked = false;
            disableDrawDistance.Checked = false;
            fogComboBox.SelectedIndex = 0;
            */
            this.Text = "Taz Wanted · SPEEDRUN MODE";
        }
        private void SpdUnlockOptions(bool init)
        {
            // Unlocking options
            mods.Enabled = true;
            cutsceneSubtitles.Enabled = true;
            extraDebug.Enabled = true;
            coopFix.Enabled = true;
            injections.Enabled = true;
            achievements.Enabled = false;
            level.Enabled = true;
            levelComboBox.Enabled = true;
            daffyculty.Enabled = true;
            daffycultyComboBox.Enabled = true;


            windowed.Enabled = true;
            aspectRatio.Enabled = true;
            aspectSwap.Visible = false;

            limitFPS.Enabled = true;
            numericFpsCap.Enabled = true;
            checkBoxFoV.Enabled = true;
            numericFoV.Enabled = true;
            disableDrawDistance.Enabled = true;
            fog.Enabled = true;
            fogComboBox.Enabled = true;

            trainerTab.Enabled = true;

            advancedTab.Enabled = true;

            // API
            if (!init)
            {
                int ind = apiComboBox.SelectedIndex;
                apiComboBox.Items.Clear();
                apiComboBox.Items.Add("d3d8 · vanilla");
                apiComboBox.Items.Add("d3d9 · d3d8to9");
                apiComboBox.Items.Add("d3d12 · dgVoodoo2");
                apiComboBox.Items.Add("vulkan · dxvk");
                if (ind == 1)
                    apiComboBox.SelectedIndex = 1;
                else
                    apiComboBox.SelectedIndex = 0;
            }
            // Aspect
            if (width.Text == "" || height.Text == "")
                autoFillVideo(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height);
            autoAspect(Int32.Parse(width.Text), Int32.Parse(height.Text));
            aspect1.ReadOnly = false;
            aspect2.ReadOnly = false;

            // Change options
            /*
            mods.Checked = true;
            cutsceneSubtitles.Checked = true;
            extraDebug.Checked = true;
            coopFix.Checked = true;
            //catComboBox.SelectedIndex = 0;
            disableDrawDistance.Checked = true;
            */

            this.Text = "Taz Wanted · Trainer & Patcher";
        }
        private void AchLockOptions()
        {
            // Lock some trainer features
            invisibility.Enabled = false;
            superBelchCan.Enabled = false;
            superJump.Enabled = false;
            freezeLevelTimer.Enabled = false;
            gameSpeed.Enabled = false;
            speedHack.Enabled = false;

            debugMenu.Enabled = false;
            flyCamera.Enabled = false;
            savePos.Enabled = false;
            flyMode.Enabled = false;
            debugInfo.Enabled = false;

            coopMode.Enabled = false;
            ballMode.Enabled = false;
            undestructibleWorld.Enabled = false;
            bulldozerMode.Enabled = false;
            unsinkabilityMode.Enabled = false;

            // Unlock achievements
            achievements.Enabled = true;
        }

        private void AchUnlockOptions()
        {
            // Lock some trainer features
            invisibility.Enabled = true;
            superBelchCan.Enabled = true;
            superJump.Enabled = true;
            freezeLevelTimer.Enabled = true;
            gameSpeed.Enabled = true;
            speedHack.Enabled = true;

            debugMenu.Enabled = true;
            flyCamera.Enabled = true;
            savePos.Enabled = true;
            flyMode.Enabled = true;
            debugInfo.Enabled = true;

            coopMode.Enabled = true;
            ballMode.Enabled = true;
            undestructibleWorld.Enabled = true;
            bulldozerMode.Enabled = true;
            unsinkabilityMode.Enabled = true;

            // Unlock achievements
            achievements.Enabled = false;
        }

        private void aspectSwap_Click(object sender, EventArgs e)
        {
            if (aspect1.Text == "4" && aspect2.Text == "3")
            {
                aspect1.Text = "16";
                aspect2.Text = "9";
            }
            else
            {
                aspect1.Text = "4";
                aspect2.Text = "3";
            }
        }

        private void resetLevel_CheckedChanged(object sender, EventArgs e)
        {
            // Read current level index
            byte[] lvlindex = { 0x00 };
            checkAndRead((IntPtr)0x006C8BA8, lvlindex, 1, new IntPtr());

            // Read current save slot
            byte[] saveslot = { 0x00 };
            checkAndRead((IntPtr)0x006C8E2C, saveslot, 1, new IntPtr());

            // Reset level progress
            byte[] bytes = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            checkAndWrite((IntPtr) (lvlindex[0] * 168 + saveslot[0] * 5076 + 0x006C9700), bytes, bytes.Length, new IntPtr());

            SingleCallInitialise();

            // RestartLevel.CEA
            byte[] reslevel = { 0xFF, 0x35, 0xA8, 0x8B, 0x6C, 0x00, 0xE8, 0xA5, 0xEA, 0xEA, 0xFF, 0x83, 0xC4, 0x04, 0xC3 };
            checkAndWrite((IntPtr)0x005F6900, reslevel, reslevel.Length, new IntPtr());

            message("Reset Level Progress");

            byte[] injectionFlag = { 0x01 };
            checkAndWrite((IntPtr)0x00655510, injectionFlag, injectionFlag.Length, new IntPtr());

            // Reset timer
            byte[] timer = { 0x00, 0x00, 0x00, 0x00 };
            checkAndWrite((IntPtr)0x006C8BB8, timer, timer.Length, new IntPtr());

        }
        private void webBrowserReadMe_Navigating(object sender, WebBrowserNavigatingEventArgs e)
        {
            if (!(e.Url.ToString().Equals("about:blank", StringComparison.InvariantCultureIgnoreCase)))
            {
                System.Diagnostics.Process.Start(e.Url.ToString());
                e.Cancel = true;
            }
        }

        private void webBrowserRepacking_Navigating(object sender, WebBrowserNavigatingEventArgs e)
        {
            if (!(e.Url.ToString().Equals("about:blank", StringComparison.InvariantCultureIgnoreCase)))
            {
                System.Diagnostics.Process.Start(e.Url.ToString());
                e.Cancel = true;
            }
        }

        private void verticalSplit_CheckedChanged(object sender, EventArgs e)
        {
            this.toolStripStatusLabel.Text = "Restart game with Cooperative Fix to change split screen orientation";
            this.toolStripStatusLabel.ForeColor = System.Drawing.Color.Green;
        }

        private void apiComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (radioSpeedrun.Checked == false)
            {
                // Lock coop fix for d3d8to9 (for some reason game crashes on startup)
                if (apiComboBox.SelectedIndex == 1)
                {
                    this.toolStripStatusLabel.Text = "Cooperative Fix unavailable with d3d8to9";
                    this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkOrange;
                    coopFix.Text = "Coop locked with d3d8to9";
                    coopFix.Enabled = false;
                }
                else
                {
                    this.toolStripStatusLabel.Text = "";
                    this.toolStripStatusLabel.ForeColor = System.Drawing.Color.DarkOrange;
                    coopFix.Text = "Cooperative Fix";
                    coopFix.Enabled = true;
                }
            }
        }

        private void DrawAchievementsTable()
        {
            var NameFont = new Font("Segoe UI", 13, FontStyle.Bold);
            var DescFont = new Font("Segoe UI", 12);

            for (int i = 0; i < Achievements.GetLength(0); i++)
            {
                listViewAchievements.Items.Add(i.ToString(), "", Achievements[i, 0] + "_lock.png");
                // Colors
                if (i % 2 == 0)
                    listViewAchievements.Items[i].BackColor = listViewAchievements.BackColor;
                else
                    listViewAchievements.Items[i].BackColor = Color.Beige;
                // Add achievement
                listViewAchievements.Items[i].UseItemStyleForSubItems = false;
                listViewAchievements.Items[i].SubItems.Add(Achievements[i, 1], Color.Black, listViewAchievements.Items[i].BackColor, NameFont);
                listViewAchievements.Items[i].SubItems.Add(Achievements[i, 2], Color.Black, listViewAchievements.Items[i].BackColor, DescFont);
            }

            progressBarAchievements.Maximum = achievementsTotal;
        }

        private void UpdateAchievementsTable()
        {
            int unlocked = 0;

            for (int i = 0; i < achievementsTotal; i++)
            {
                // Check unlock
                if (achievementsStateTrainer[i])
                {
                    listViewAchievements.Items[i].ImageKey = Achievements[i, 0] + ".png";
                    unlocked++;
                }
                else
                    listViewAchievements.Items[i].ImageKey = Achievements[i, 0] + "_lock.png";
            }
            labelAchievementsProgress.Text = unlocked.ToString() + '/' + achievementsTotal.ToString();
            labelAchievementsPercent.Text = ((float)unlocked/(float)achievementsTotal * 100).ToString("0.00") + " %";
            progressBarAchievements.Value = unlocked;
        }

        private void timerAchievementCheck_Tick(object sender, EventArgs e)
        {
            // Not available in trainer mode
            if (radioTrainer.Checked == false || injections.Checked == true)
            {    
            // Read achievement states
            byte[] achievementStatesGame = Enumerable.Repeat<byte>(0, achievementsTotal).ToArray(); ;
            checkAndRead((IntPtr)0x00731600, achievementStatesGame, achievementStatesGame.Length, new IntPtr());

                for (int i = 0; i < achievementsTotal; i++)
                {
                    if (achievementStatesGame[i] == 0x01 && achievementsStateTrainer[i] == false)
                    {
                        // Update achievements table
                        achievementsStateTrainer[i] = true;
                        UpdateAchievementsTable();

                        // Pop-up achievement when allowed
                        if (popupAchievements.Checked == true && radioSpeedrun.Checked == false)
                        {
                            AchievementNotificationForm.ShowAchievement(
                                Achievements[i, 1],
                                Achievements[i, 2],
                                listViewAchievements.Items[i].ImageList.Images[listViewAchievements.Items[i].ImageKey],
                                Achievements[i, 3]
                            );

                            // Achievement sound with cooldown
                            if (achievementSound.Checked == true && timerCooldown.Enabled == false)
                            {
                                playAchievementSound(Properties.Resources.achievement);
                                timerCooldown.Start();
                            }
                        }
                    }
                }
            }
        }

        private void timerCooldown_Tick(object sender, EventArgs e)
        {
            timerCooldown.Stop();
        }

        private void achReset_Click(object sender, EventArgs e)
        {
            var result = MessageBox.Show("This will reset all achievement progress. Continue?", "Reset achievements", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (result == DialogResult.No)
                return;

            // Reset in-game achievements states
            byte[] achievementStatesGame = Enumerable.Repeat<byte>(0, achievementsTotal).ToArray(); ;
            checkAndWrite((IntPtr)0x00731600, achievementStatesGame, achievementStatesGame.Length, new IntPtr());

            // Reset trainer achievements states
            for (int i = 0; i < achievementsTotal; i++)
                achievementsStateTrainer[i] = false;

            UpdateAchievementsTable();

            string AchievementMessage = "Reset All Achievements";
            message(AchievementMessage);
            this.toolStripStatusLabel.Text = AchievementMessage;
            this.toolStripStatusLabel.ForeColor = System.Drawing.Color.Green;
        }

        private void labelAchievementsProgress_Click(object sender, EventArgs e)
        {
#if DEBUG
            bool unlock = false;

            for (int i = 0; i < achievementsTotal; i++)
            {
                // Check not unlocked
                if (!achievementsStateTrainer[i])
                    unlock = true;
            }

            if (unlock)
            {
                // Unlock all achievements
                for (int i = 0; i < achievementsTotal; i++)
                    achievementsStateTrainer[i] = true;
            }
            else
            {
                // Reset in-game achievements states
                byte[] achievementStatesGame = Enumerable.Repeat<byte>(0, achievementsTotal).ToArray(); ;
                checkAndWrite((IntPtr)0x00731600, achievementStatesGame, achievementStatesGame.Length, new IntPtr());

                // Reset trainer achievements states
                for (int i = 0; i < achievementsTotal; i++)
                    achievementsStateTrainer[i] = false;
            }

            UpdateAchievementsTable();
#endif
        }

        private void listViewAchievements_SelectedIndexChanged(object sender, EventArgs e)
        {
#if DEBUG
            int i = 0;

            if (listViewAchievements.SelectedItems.Count > 0)
                i = listViewAchievements.SelectedItems[0].Index;
            else
                return;

            if (achievementsStateTrainer[i] == false)
            {
                // Update achievements table
                achievementsStateTrainer[i] = true;
                UpdateAchievementsTable();

                // Pop-up achievement when allowed
                if (popupAchievements.Checked == true && radioSpeedrun.Checked == false)
                {
                    AchievementNotificationForm.ShowAchievement(
                        Achievements[i, 1],
                        Achievements[i, 2],
                        listViewAchievements.Items[i].ImageList.Images[listViewAchievements.Items[i].ImageKey],
                        Achievements[i, 3]
                    );

                    // Achievement sound with cooldown
                    if (achievementSound.Checked == true && timerCooldown.Enabled == false)
                    {
                        playAchievementSound(Properties.Resources.achievement);
                        timerCooldown.Start();
                    }
                }
            }
            else
            {
                achievementsStateTrainer[i] = false;
                UpdateAchievementsTable();
            }

            listViewAchievements.SelectedItems.Clear();
#endif
        }

        private void radioAchievements_Click(object sender, EventArgs e)
        {
            /*if (radioAchievements.Checked == true)
                return;*/

            // Check game
            if (checkProcess())
            {
                var result = MessageBox.Show("This will terminate launched game process. Continue?", "Achievements mode", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (result == DialogResult.Yes)
                    killProcess();
                else
                {
                    // Reset radio
                    if (trainerTab.Enabled == false)
                        radioSpeedrun.Checked = true;
                    else
                        radioTrainer.Checked = true;
                    return;
                }
            }

            // Unlock spd options
            if (trainerTab.Enabled == false)
                SpdUnlockOptions(false);

            // Lock options
            AchLockOptions();
        }

        private void radioSpeedrun_Click(object sender, EventArgs e)
        {
           /* if (radioTrainer.Checked == true)
                return;*/

            // Check game
            if (checkProcess())
            {
                var result = MessageBox.Show("This will terminate launched game process. Continue?", "Speedrun mode", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (result == DialogResult.Yes)
                    killProcess();
                else
                {
                    // Reset radio
                    if (achievements.Enabled == false)
                        radioTrainer.Checked = true;
                    else
                        radioAchievements.Checked = true;
                    return;
                }
            }

            // Lock options
            SpdLockOptions();
        }

        private void radioTrainer_Click(object sender, EventArgs e)
        {
            // Check game
            if (checkProcess())
            {
                var result = MessageBox.Show("This will terminate launched game process. Continue?", "Trainer mode", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (result == DialogResult.Yes)
                    killProcess();
                else
                {
                    // Reset radio
                    if (trainerTab.Enabled == false)
                        radioSpeedrun.Checked = true;
                    else
                        radioAchievements.Checked = true;
                    return;
                }
            }

            // Unlock options (except achievements)
            if (trainerTab.Enabled == false)
                SpdUnlockOptions(false);
            AchUnlockOptions();
        }
    }
}